*　程序失败了，不会输出segment fault(core dumped)这样的信息。bash就可以。这个信息在工作时很重要。
*　要支持ls *.txt .*.txt 此类的通配符

1, lsh的正则表达式先按正常的来，以后有机会用
https://github.com/GuillaumeBadi/Verbal-Exprejon
  当参考，来设计。
  用lua实现的话，"generator"估计写的难看一些，但采集更容易，即，能很容易的支持更美观的用户写法。
  用C实现的话，则是反过来。
  考虑用lsh的preprocessor以兼得。
 
2, lsh该怎么处理带空格的字符串参数？
   像git commit -m "1 2 3 4"
   目前lsh是把字符串拆开了，所以git不能正常工作。 应该当做一个整体传过去。

===============================================
命令行中的参数如果包含空格该怎么处理

如题:加入一个文件的位置是在 
C:\Documents and Settings\Administrator\桌面\1.txt 时.
如果通过编程来索引到这个1.txt文件,并相应的对该文件做出相应, 那么程序会把该路径C:\Documents          and                  Settings\Administrator\桌面\1.txt      解析成3个参数,

这样就会导致程序不能正确的执行,  该如何处理呢, 这个问题我也思考很久, 在读了一本叫做<<C Primer Plus>>的书籍后,最后终于找到了答案.

这句话是这么说的:

"顺便提一下,很多环境(包括UNIX和DOS)允许使用引号把多个单词集中在一个参数里.例如:

repeat    "I am hungry"    now  

" 这个命令会把字符串"I am hungry"分配给argv[1],把字符串"now"分配给argv[2].

幸好它顺便提了一下,要不还不知道怎么解决呢 , 还好解决了
===============================================

可以看出，对单引号的处理是shell的一部分工作。
luashell目前还没做到。
单引号不仅起着聚集带字符串的作用。
它发挥了聚集作用后，本身被shell trip掉了。并不会传入argv。这是lua shell实现上又要注意的一点。


3, Lua Shell要赶紧支持以script文件做参数。 
   即，用户运行./commit cmd。 内核会自动调用commit里标志的lsh解释器，并且把cmd当参数传给lsh解释器，lsh要负责把命令悉数传递给脚本。

4, 直接运行一个bash文件abc。和手动执行/bin/bash abc的效果是一样的。


=========Done============
3, 使用lua5.2。
   5.2的语法稍微强一些。 暂时不考虑再做混合语法了。就用纯lua。
