all:prepare_folder boot.bin kernel.elf ../cmd/dimg
#'make' will search target-file and rely-file according through VPATH,if she
#failed under current directory.
VPATH=../lib/ ../bin/
#header_path will be used when 'gcc -M'.you can not use '$(cflags)' instead of
#'$(head_path)' under this case,because other unrelated cflags may affect the 
#operation of 'gcc -M',according to by test.
cheader_path=-I../include/ -I./usr/include/	-I./include/ -I./arch/x86/include/
cflags=$(cheader_path) -Wall -std=c99 -fno-builtin -Wno-implicit-function-declaration -g -fno-stack-protector
asmflags=-i../include/ -i./usr/include/
ldpath=-L../lib/

usro= ../src/usr/lib/asmtask.o ../src/usr/lib/sys_call.o ../src/usr/lib/utils.o\
	  ../src/usr/lib/unistd.o
#the target of a rule matchs in a stiff way,kernel.a will match '%.a:%.asm' but
#../lib/kernel.a won't.
asmo=kernel.asmo utils.asmo bootinfo.asmo
co= kernel.o   utils.o proc.o  disp.o video_drv.o schedule.o\
ku_utils.o mm.o func_table.o pmm.o kbd_drv.o mmzone.o irq.o time.o i8259.o\
ramdisk.o elf.o fork.o 
 
kernelrelyo=$(asmo)  $(co)	../src/drivers/block/ll_rw_blk.o ../src/drivers/ide/ide.o ../src/fs_cell.o ../src/fs/namei.o ../src/fs/inode.o ../src/fs/dcache.o ../src/fs/super.o ../src/fs/cell/namei.o  ../src/fs/open.o ../src/fs/read_write.o ../src/mm/slab.o ../src/drivers/pci/pci.o	../src/drivers/pci/pci_vendor.o
include $(co:.o=.d)

boot.bin:boot.asm
	nasm -o ../bin/boot.bin boot.asm
kernel.elf:$(kernelrelyo)
	cd ../lib/;\
	ld -m elf_i386 -s -Ttext 0xc0030400 -o ../bin/kernel.elf $(kernelrelyo);\
	ld -m elf_i386 -Ttext 0xc0030400 -o ../bin/g_kernel.elf $(kernelrelyo) 
../cmd/dimg:../cmd/dimg.c bootinfo.asmo
	gcc -c ../cmd/dimg.c -o ../cmd/dimg.o -std=c99 -Wno-implicit-function-declaration -g
	gcc -o  ../cmd/dimg  ../cmd/dimg.o ../lib/bootinfo.asmo
%.d:%.c
	set -e;rm -f $@;\
	gcc -M $< $(cheader_path) > this_is_a_tmp_file;\
	sed 's\:\ $@: \'  this_is_a_tmp_file  > $@;\
	rm  -f this_is_a_tmp_file

%.o:%.c
	gcc -c -o ../lib/$@ $< $(cflags)

%.asmo: %.asm ../include/*.inc
	nasm -felf -o ../lib/$@ $< $(asmflags)
clean:
	rm  -rf ../lib/;\
	rm -f *.d;
#replace your 400m.img to after using make git
git:
	rm  -f ../lib/*;rm -f ../bin/*;rm -f *.d;\
	rm -f ../cmd/parport.out ../cmd/dimg;\
	rm -f usr/lib/*;\
	rm -f usr/src/*.o;\
	rm -f ../cmd/*.o;\
	rm ../cmd/bochsout.txt;\
	mv ../cmd/test ../../yanqi_test;\
	mv ../cmd/*.img ../..;\
	mv ../cmd/log ../../
tig:
	mv ../../*.img ../cmd/ ;\
	mv ../../yanqi_test ../cmd/test;\
	mv ../../log ../cmd/

prepare_folder:
	mkdir -p ../lib/ ../bin/
.PHONY:all





























