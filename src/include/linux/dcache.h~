#ifndef DCACHE_H
#define DCACHE_H
#include<linux/mount.h>

struct qstr{
	char *name;		/*TODO intialized with memcpy when do d_alloc */
	int len;
	unsigned hash;
};
struct dentry_operations{
	void (*compare) (void);		/* 节点名比对,例如，有些文件系统忽略大小写*/
};
struct dentry{
	struct inode *inode;
	struct dentry *parent;
	struct qstr qstr;		/* partial name */
	struct dentry_operations *operations;
	struct list_head vfsmount;

	struct list_head hash;
};

/**
 * d_add - add dentry to hash queues
 * @entry: dentry to add
 * @inode: The inode to attach to this dentry
 *
 * This adds the entry to the hash queues and initializes @inode.
 * The entry was actually filled in earlier during d_alloc().
 */
static inline d_add(struct dentry *dentry, struct inode *inode){
	dentry->inode = inode;
	struct list_head *queue = d_hash(dentry->parent, dentry->name.hash);
	list_add(dentry->hash, queue);
}

/* Allocation counts.. */

/**
 *	dget, dget_locked	-	get a reference to a dentry
 *	@dentry: dentry to get a reference to
 *
 *	Given a dentry or %NULL pointer increment the reference count
 *	if appropriate and return the dentry. A dentry will not be 
 *	destroyed when it has references. dget() should never be
 *	called for dentries with zero reference counter. For these cases
 *	(preferably none, functions in dcache.c are sufficient for normal
 *	needs and they take necessary precautions) you should hold dcache_lock
 *	and call dget_locked() instead of dget().
 */
 static struct  dentry *dget(struct dentry *dir){
 	dir->count ++;
	return dir;
 }


 static struct  dentry *dput(struct dentry *dir){
 	dir->count --;
	return dir;
 }
















#endif
