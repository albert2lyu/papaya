cscope 15 $HOME/lab/yanqi/src -q 0000004768 0000335168
	@arch/x86/include/asm/bit.h

1 #i‚de‡
X86_BIT_H


2 
	#X86_BIT_H


	)

4 
ölöe
 
	$__bs
(
x
){

5 
lowe°
;

6 
__asm__
 
	`__vﬁ©ûe__
("bsf %1, %0\n\t"

10 :"Ù"(
lowe°
)

11 :"r"(
x
)

13  
lowe°
;

15 
	}
}

17 
ölöe
 
	$__b§
(
x
){

18 
highe°
;

19 
__asm__
 
	`__vﬁ©ûe__
("bsr %1, %0\n\t"

23 :"Ù"(
highe°
)

24 :"r"(
x
)

26  
highe°
;

28 
	}
}

30 
ölöe
 
	$__bs0r
(
x
){

31  
	`__b§
(~
x
);

33 
	}
}

35 
ölöe
 
	$__bs0
(
x
){

36  
	`__bs
(~
x
);

37 
	}
}

39 
__bt
(*
ba£
, 
bô_id
);

40 
__bts
(*
ba£
, 
bô_id
);

41 
__bå
(*
ba£
, 
bô_id
);

51 
	#MASK_H
(
x
, 
m
) ({ \

52 
n
 = (
x
) * 8; \

53 
throw
 = 32 - 
n
 + (
m
); \

54 
u
 = 
x
; \

55 
u
 = u << 
throw
 >>Åhrow; \

56 
u
; \

57 })

	)

60 
	#MASK_L
(
x
, 
m
Ë((xË>> (mË<< (m))

	)

	@arch/x86/include/asm/errno.h

1 #i‚de‡
X86_ERRNO_H


2 
	#X86_ERRNO_H


	)

3 
	~<asm-gíîic/î∫o.h
>

	@arch/x86/include/asm/io.h

1 #i‚de‡
X86_IO_H


2 
	#X86_IO_H


	)

5 *
i‹em≠
(
phys_addr
, 
size
, 
Êags
);

7 
ölöe
 
	$wrôeb
(
addr
, 
u8
 
vÆue
){

8 
__asm__
 
	`__vﬁ©ûe__
("mov %%al, (%%ebx)\n\t"

10 :"b"(
addr
), "a"(
vÆue
));

11 
	}
}

13 
ölöe
 
	$wrôew
(
addr
, 
u16
 
vÆue
){

14 
__asm__
 
	`__vﬁ©ûe__
("mov %%ax, (%%ebx)\n\t"

16 :"b"(
addr
), "a"(
vÆue
));

17 
	}
}

19 
ölöe
 
	$wrôñ
(
addr
, 
vÆue
){

20 
__asm__
 
	`__vﬁ©ûe__
("mov %%eax, (%%ebx)\n\t"

22 :"b"(
addr
), "a"(
vÆue
));

23 
	}
}

25 
ölöe
 
	$ªadb
(
addr
){

26 
vÆue
;

27 
__asm__
 
	`__vﬁ©ûe__
("xor %0, %0 \n\t"

29 :"Ù"(
vÆue
)

30 :"b"(
addr
)

32  
vÆue
;

33 
	}
}

36 
ölöe
 
	$ªadw
(
addr
){

37 
vÆue
;

38 
__asm__
 
	`__vﬁ©ûe__
("xor %0, %0 \n\t"

40 :"Ù"(
vÆue
)

41 :"b"(
addr
)

43  
vÆue
;

44 
	}
}

47 
ölöe
 
	$ªadl
(
addr
){

48 
vÆue
;

49 
__asm__
 
	`__vﬁ©ûe__
("xor %0, %0 \n\t"

51 :"Ù"(
vÆue
)

52 :"b"(
addr
)

54  
vÆue
;

55 
	}
}

57 
ölöe
 
	$maskb
(
addr
, 
u8
 
mask
){

58 
vÆue
 = 
	`ªadb
(
addr
);

59 
vÆue
 |
mask
;

60 
	`wrôeb
(
addr
, 
vÆue
);

61 
	}
}

63 
ölöe
 
	$unmaskb
(
addr
, 
u8
 
mask
){

64 
vÆue
 = 
	`ªadb
(
addr
);

65 
vÆue
 &~
mask
;

66 
	`wrôeb
(
addr
, 
vÆue
);

67 
	}
}

70 
ölöe
 
	$maskw
(
addr
, 
u16
 
mask
){

71 
vÆue
 = 
	`ªadw
(
addr
);

72 
vÆue
 |
mask
;

73 
	`wrôew
(
addr
, 
vÆue
);

74 
	}
}

76 
ölöe
 
	$unmaskw
(
addr
, 
u16
 
mask
){

77 
vÆue
 = 
	`ªadw
(
addr
);

78 
vÆue
 &~
mask
;

79 
	`wrôew
(
addr
, 
vÆue
);

80 
	}
}

82 
ölöe
 
	$maskl
(
addr
, 
mask
){

83 
vÆue
 = 
	`ªadl
(
addr
);

84 
vÆue
 |
mask
;

85 
	`wrôñ
(
addr
, 
vÆue
);

86 
	}
}

88 
ölöe
 
	$unmaskl
(
addr
, 
mask
){

89 
vÆue
 = 
	`ªadl
(
addr
);

90 
vÆue
 &~
mask
;

91 
	`wrôñ
(
addr
, 
vÆue
);

92 
	}
}

	@arch/x86/include/asm/page.h

1 #i‚de‡
X86_PAGE_H


2 
	#X86_PAGE_H


	)

3 
	~<vÆTy≥.h
>

4 
	~<löux/as£π.h
>

7 
	#PAGE_SHIFT
 12

	)

8 
	#PAGE_SIZE
 0x1000

	)

9 
	#PAGE_MASK
 (~0xfff)

	)

10 
	#∑_idx
(
∑ddr
Ë(’addr)>>
PAGE_SHIFT
)

	)

11 
	#∑_pg
 
∑_idx


	)

13 
	#PG_P
 1

	)

14 
	#PG_USU
 4

	)

15 
	#PG_RWW
 2

	)

17 
	#PG_H10
(
pg_id
Ë’g_id>>10)

	)

18 
	#PG_L10
(
pg_id
Ë’g_id&(0x400-1))

	)

20 
ölöe
 
	$övÕg
(*
vaddr
){

21 
__asm__
 
	`__vﬁ©ûe__
("övÕg (%0)"::"r"(
vaddr
));

22 
	}
}

24 
	#FLUSH_TLB
 
__asm__
 
	`__vﬁ©ûe__
("mov %%cr3, %0\n\t" \

27 :"r"(0))

	)

32 
	#±e2∑ge
(
±e
Ë((*)
	`__va
(’ã).
vÆue
 & 
PAGE_MASK
))

	)

33 
	#±e2∑ge_t
(
±e
Ë–
mem_m≠
 + (±e).
physiˇl
 )

	)

41 #¥agm®
∑ck
(
push
)

42 #¥agm®
∑ck
(1)

43 
	u±e
{

44 
	mvÆue
;

46 
	m¥e£¡
: 1;

47 
	mwrôabÀ
: 1;

48 
	mu£r
: 1;

49 
	mPWT
: 1;

50 
	mPCD
: 1;

51 
	mac˚s£d
: 1;

52 
	mdúty
: 1;

54 
	mavl
: 3;

55 
	mphysiˇl
: 20;

58 
	mÊags
: 12;

63 
	ulöór_addr
{

64 
	mvÆue
;

66 
	moff£t
: 12;

67 
	mtbl_idx
: 10;

68 
	mdú_idx
: 10;

72 
	u¸3
{

73 
	mvÆue
;

76 
	mphysiˇl
: 20;

80 
	upgîr_code
{

81 
u32
 
	mvÆue
;

83 
	m¥Ÿe˘i⁄
: 1;

84 
	m⁄_wrôe
: 1;

85 
	m‰om_u£r
: 1;

86 
	mdúty_rsv
: 1;

87 
	mö°ru˘i⁄
: 1;

91 
	m$n›age
: 1;

92 
	m$⁄_ªad
: 1;

93 
	m$ö_kî√l
: 1;

95 
	m$d©a
: 1;

99 #¥agm®
∑ck
(
p›
)

101 
	#PAGE_OFFSET
 0XC0000000

	)

102 
	#__∑
(
vaddr
Ë(()(vaddrË- 
PAGE_OFFSET
)

	)

103 
	#__va
(
∑ddr
Ë(()’addrË+ 
PAGE_OFFSET
)

	)

104 
	#KV
 
__va


	)

108 
ölöe
 *
	$±e2∑ge
(
±e
Öte){

109 
	`as£π
(
±e
.
vÆue
 &&Öã.
¥e£¡
);

110  ((*)
	`__va
((
±e
).
vÆue
 & 
PAGE_MASK
));

111 
	}
}

113 
ölöe
 
±e
 *
	$__va2±e
(*
vaddr
, 
±e
 *
pgdú
){

114 if(!
pgdú
)  0;

116 
löór_addr
 
œddr
 ;

117 
œddr
.
vÆue
 = ()
vaddr
;

118 
±e
 *
èbÀ
 = 
	`±e2∑ge
–
pgdú
[
œddr
.
dú_idx
] );

119  
èbÀ
 + 
œddr
.
tbl_idx
;

120 
	}
}

	@arch/x86/kernel/process.c

1 
	~<ﬁd/¥oc.h
>

2 
	~<löux/sched.h
>

3 
	~<asm/î∫o.h
>

4 
	~<löux/NR_sysˇŒ.h
>

6 
kî√l_thªad
((*
‚
)(*), *
¨g
, 
Êags
){

7 
__asm__
 
	`__vﬁ©ûe__
(".intel_syntaxÇoprefix\n\t"

17 :"a"(
NR_f‹k
), "r"(
‚
), "r"(
¨g
)

20 
	}
}

23 
	$sys_execve
(
±_ªgs
 
ªgs
){

24 
îr‹
;

25 *
fûíame
 = (*)
ªgs
.
ebx
;

26 **
¨gv
 = (*)
ªgs
.
ecx
;

27 if(!
¨gv
Ë -
EINVAL
;

28 
îr‹
 = 
	`do_execve
(
fûíame
, 
¨gv
, (**)
ªgs
.
edx
, &regs);

29  
îr‹
;

30 
	}
}

32 
	$sys_¥ötf
(
±_ªgs
 
ªgs
){

33 
__asm__
 
	`__vﬁ©ûe__
 ("push %0\n\t"

38 :"c"(
ªgs
.
ecx
), "b"‘egs.
ebx
)

41 
	}
}

	@arch/x86/kernel/sys_i386.c

17 
sys_mm≠2
()

	@arch/x86/mm/fault.c

1 
	~<asm/∑ge.h
>

2 
	~<löux/mm.h
>

3 
	~<¥oc.h
>

4 
	~<úq.h
>

6 
⁄_¥Ÿe˘i⁄_îr‹
(
îr_addr
,

7 
±_ªgs
 *
¥egs
, 
pgîr_code
);

8 
	gcou¡_pgîr
;

24 
	$do_∑ge_Áu…
(
±_ªgs
 *
¥egs
, 
pgîr_code
 
îrcode
){

25 
IF
 = 
	`˛i_ex
();

27 if(++
cou¡_pgîr
 >2Ë
	`•ö
("doubleÖage fault");

28 
u32
 
îr_addr
;

29 
__asm__
 
	`__vﬁ©ûe__
(

31 :"Ù" (
îr_addr
)

35 
	`›rötf
("∑gêîr‹:Éº_addr:%x,Éù:%x,É•:%x\n", 
îr_addr
, 
¥egs
->
eù
,Öªgs->
e•
);

36 
	`›rötf
("error code:%s: %c %c\n",

37 
îrcode
.
¥Ÿe˘i⁄
 ? "∑gê¥Ÿe˘i⁄Éº‹":"∑gênŸÉxi°Éº‹",Éºcode.
‰om_u£r
 ? 'U':'S',

38 
îrcode
.
⁄_wrôe
 ? 'W':'R'

41 if(
îr_addr
 =0Ë
	`•ö
("attemptÅoáccessáddress 0");

42 if(
	`ö_öãºu±
(Ë|| !
cuºít
->
mm
Ë
	`•ö
("OOPs !");

44 if(
îrcode
.
$n›age
 == 0){

45 
vm_¨ó
 *
vma
 = 
	`föd_vma
(
cuºít
->
mm
, 
îr_addr
);

46 if(!
vma
){

47 
	`as£π
(
îr_addr
 >
__3G
);

48 
	`•ö
("kernel spaceÖage fault");

50 if(
vma
->
°¨t
 <
îr_addr
){

51 if(
vma
->
›s
 && vma->›s->
n›age
){

52 
vma
->
›s
->
	`n›age
(vma, 
îr_addr
, 
îrcode
);

55 
	`comm⁄_no_∑ge
(
vma
, 
îr_addr
, 
îrcode
);

58 
	`•ö
("in vm_area gaps");

61 
	`⁄_¥Ÿe˘i⁄_îr‹
(
îr_addr
, 
¥egs
, 
îrcode
);

64 
cou¡_pgîr
--;

65 if(
IF
Ë
	`°i
();

67 
	}
}

69 
	$⁄_¥Ÿe˘i⁄_îr‹
(
îr_addr
,

70 
±_ªgs
 *
¥egs
, 
pgîr_code
 
îrcode
){

71 if(
îrcode
.
‰om_u£r
 =
Ál£
Ë
	`•ö
("kernel fault !");

72 if(
îrcode
.
⁄_wrôe
 =
Ál£
Ë
	`•ö
("page fault onÑead!");

75 
vm_¨ó
 *
îr_¨ó
 = 
	`föd_vma
–
cuºít
->
mm
, 
îr_addr
 );

76 if(!
îr_¨ó
Ë
	`•ö
(" youÅouched kernel space !");

77 if(
îr_¨ó
->
°¨t
 <
îr_addr
){

78 
vm_Êags
 vm_Êag†
îr_¨ó
->
Êags
;

79 
boﬁ
 
cow
 = 
vm_Êags
.
sh¨ed
 =
Ál£
 && vm_Êags.
maywrôe
;

80 if(
cow
){

81 
∑ge
 *
th©_∑ge_t
;

82 
±e
 *
th©_±e
;

83 *
th©_∑ge
;

84 * 
√w_∑ge
;

86 
th©_∑ge
 = (*)(
îr_addr
 & 
PAGE_MASK
);

87 
th©_±e
 = 
	`__va2±e
((*)
îr_addr
, 
	`PGDIR_OF_MM
(
cuºít
->
mm
));

88 
th©_∑ge_t
 = 
	`±e2∑ge_t
(*
th©_±e
);

90 
th©_±e
->
wrôabÀ
 = 
åue
;

91 if(
th©_∑ge_t
->
_cou¡
 == 1){

92 
	`›rötf
("COW, single user, just unwp\n");

93 
d⁄e
;

95 if(
th©_∑ge_t
->
_cou¡
 <0Ë
	`•ö
("that_page_t->count == 0!");

96 
	`›rötf
("%u, COW,áŒo¯√wÖage. \n", 
th©_∑ge_t
->
_cou¡
);

99 
√w_∑ge
 = 
	`__Æloc_∑ge
(0);

100 
	`mem˝y
(
√w_∑ge
, 
th©_∑ge
, 
PAGE_SIZE
);

102 
	`put_∑ge
(
th©_∑ge_t
);

103 
th©_±e
->
physiˇl
 = 
	`__∑
(
√w_∑ge
) >> 12;

105 
d⁄e
:

106 
	`övÕg
((*)
îr_addr
);

110 
	`•ö
("in gap !");

113 
	}
}

115 
	$do_bªakpoöt_Áu…
(
±_ªgs
 *
ªgs
){

116 
	`•ö
("breakpoint fault\n");

118 
	}
}

121 
	$do_gíîÆ_¥Ÿe˘_Áu…
(
±_ªgs
 *
ªgs
, 
îrcode
){

122 
	`›rötf
("generalÖrotectionÉrror!\n");

123 
	`›rötf
("îr‹ code:%x", 
îrcode
);

124 
	`›rötf
("‰om %s,Éù=%x\n", (
ªgs
->
cs
 & 3Ë? "u£r" : "kî√l",Ñegs->
eù
);

125 
	`•ö
("");

127 
	}
}

	@arch/x86/mm/ioremap.c

1 
	~<mm.h
>

2 
	~<asm/io.h
>

4 * 
	$i‹em≠
(
phys_addr
, 
size
, 
Êags
){

5 if(
phys_addr
 >> 30) {

6 
	`›rötf
(" %x ", 
phys_addr
);

7 
	`•ö
("too big IOÖhysicaláddress");

9  (*)(
phys_addr
 + 
PAGE_OFFSET
);

10 
	}
}

	@block/buffer.cn

31 
	~<löux/buf„r_hód.h
>

32 
	~<löux/blkdev.h
>

33 
	~<scheduÀ.h
>

34 
	~<löux/¶ab.h
>

36 
¶ab_hód
 *
	gbuf„rhód_ˇche
;

38 
	gbuf„r_hód
 *

39 ÁºìÂÜ≤ÂùóË°®
	g_
Êü•Êâæ(
blk_unô
 *
	gunô
, 
ul⁄g
 
	gblock_id
);

41 
	gli°_hód
 Á©∫Èó≤Èìæ;

46 
	gli°_hód
 ÂøôÁ¢åÈìæ;

47 
	gul⁄g
 ÂøôÁ¢åÂùóÊï∞Èáè;

48 
	gul⁄g
 Á©∫Èó≤ÂùóÊï∞Èáè;

49 
	gul⁄g
 ÁõÆÂâçÂùóÊï∞Èáè;

50 
	gul⁄g
 ÂùóÊï∞ÈáèÈÖçÈ¢ù = 256;

56 
ölöe
 ÂøôÁ¢åÈìæ
	g_
Ê∑ªÂä†–
buf„r_hód
 *
	gô
){

57 
li°_add
–&
ô
->
Ãu
, &ÂøôÁ¢åÈìæ );

61 
ölöe
 ÂøôÁ¢åÈìæ
	g_
ÁßªÈô§–
buf„r_hód
 *
	gô
){

62 
li°_dñ
(&
ô
->
Ãu
);

69 
ölöe
 Á©∫Èó≤Èìæ
	g_
Ê∑ªÂä†–
buf„r_hód
 *
	gô
){

70 
li°_add_èû
–&
ô
->
Ãu
, &Á©∫Èó≤Èìæ );

74 
ölöe
 Á©∫Èó≤Èìæ
	g_
ÁßªÈô§–
buf„r_hód
 *
	gô
){

75 
li°_dñ
(&
ô
->
Ãu
);

79 
ölöe
 ÂºïÁî®ÁºìÂÜ≤Âùó(
buf„r_hód
 *
	gblock
){

80 
	gblock
->
	gcou¡
++;

84 
ölöe
 ÊîæÂºÉÁºìÂÜ≤Âùó(
buf„r_hód
 *
	gblock
){ 
a§t
(
block
->
cou¡
 > 0);

85 
	gblock
->
	gcou¡
--;

89 Ëß£Êò†Â∞ÑÂùó(
buf„r_hód
 *
	gblock
){ 
a§t
(
block
->
cou¡
 > 0);

90 ÊîæÂºÉÁºìÂÜ≤Âùó(
	gblock
);

91 if(
	gblock
->
	gcou¡
 == 0){

93 ÂøôÁ¢åÈìæ
_
ÁßªÈô§–
block
 );

94 Á©∫Èó≤Èìæ
	g_
Ê∑ªÂä†–
	gblock
 );

99 
ölöe
 Á≠âÂæÖÂùóËß£ÈîÅ(
buf„r_hód
 *
	gbh
){

100 
	gbh
->
	glock
){

101 
¶ìp_⁄
(&
bh
->
waô
);

107 
	gbuf„r_hód
 * ÁºìÂÜ≤ÂùóÂëΩ‰∏≠(
u32
 
	gdev
, 
	gblock
){

110 
blk_unô
 *
	gunô
;

111 
	gbuf„r_hód
 *ÂëΩ‰∏≠Âùó;

113 
	gunô
 = 
BLK_UNIT
(
dev
);

114 ÂëΩ‰∏≠Âùó = ÁºìÂÜ≤ÂùóË°®
_
Êü•Êâæ(
unô
, 
	gblock
);

119 
a§t
(ÂëΩ‰∏≠Âùó->
block
 == block

120 && ÂëΩ‰∏≠Âùó->
dev_id
 =
dev
);

123 if(ÂëΩ‰∏≠Âùó->
	gio
 =
Ál£
){

124 
Œ_rw_block
–
READ
, ÂëΩ‰∏≠Âùó);

127 if(ÂëΩ‰∏≠Âùó->
	gio
 =
Ál£
){

137 
	gbuf„r_hód
 * Êñ∞Âª∫Á©∫ÁôΩÂùó(){

138 
buf„r_hód
 *
	gbh
;

139 
	gbh
 = 
kmem_ˇche_Æloc
(
buf„rhód_ˇche
, 0); 
a§t
(
bh
);

140 *
	gd©a
 = 
__Æloc_∑ge
(0);

141 
	gbh
->
	gd©a
 = 
d©a
;

142 
	gbh
->
	glock
 = 
Ál£
;

143 
	gbh
->
	ghash
.
	g¥ev
 = 
bh
->
hash
.
√xt
 = 0;

144 
	gbh
->
	gdúty
 = 
Ál£
;

145 
INIT_LIST_HEAD
(&
bh
->
waô
);

146  
	gbh
;

149 
boﬁ
 
	$ex∑nd_‰ìli°
(){ 
	`as£π
–
	`li°_em±y
( &Á©∫Èó≤Èìæ ));

150 
u32
 
√wtŸÆ
 = ÁõÆÂâçÂùóÊï∞Èáè + ÁîüÈïøÁ≤íÂ∫¶;

151 if(
√wtŸÆ
 > ÂùóÊï∞ÈáèÈÖçÈ¢ù){

152  
Ál£
;

154 
i
 = 0; i < ÁîüÈïøÁ≤íÂ∫¶; i++){

155 
buf„r_hód
 *
√w
 = Êñ∞Âª∫Á©∫ÁôΩÂùó(); 
	`a§t
(new);

157 
	`li°_add
(&
√w
->
Ãu
, &Á©∫Èó≤Èìæ);

159 ÁõÆÂâçÂùóÊï∞Èáè = 
√wtŸÆ
;

161  
åue
;

162 
	}
}

183 
	gbuf„r_hód
 *ËØ∑Ê±ÇÁ©∫Èó≤Âùó(){

184 
buf„r_hód
 *
	g‹ph™
;

185 if–
li°_em±y
( &Á©∫Èó≤Èìæ) ){

186 
boﬁ
 
	gok
 = 
ex∑nd_‰ìli°
(); if(!okË 
	gÁl£
;

190 
	g‹ph™
 = 
c⁄èöî_of
(Á©∫Èó≤Èìæ.
√xt
,

191 
buf„r_hód
, 
Ãu
);

193 Á©∫Èó≤Èìæ
	g_
ÁßªÈô§–
	g‹ph™
 );

196 if(
	g‹ph™
->
	ghash
.
	g¥ev
 == 0);

198 
li°_dñ
–&
‹ph™
->
hash
 );

199 if(
	g‹ph™
->
	gdúty
){ 
as£π
(0 && "write-backÇot implemented yet");

200 if(!
	g‹ph™
->
	glock
Ë
Œ_rw_block
(
WRITE
, 
‹ph™
);

207 
as£π
–
li°_em±y
(&
‹ph™
->
waô
));

208 
	g‹ph™
->
	gcou¡
 = 1;

209  
	g‹ph™
;

213 
	$öô_blkœyî_buf„r
(){

214 
	`INIT_LIST_HEAD
(&Á©∫Èó≤Èìæ);

215 
	`INIT_LIST_HEAD
(&ÂøôÁ¢åÈìæ);

216 
buf„rhód_ˇche
 = 
	`kmem_ˇche_¸óã
(

218 (
buf„r_hód
), 0,

219 
SLAB_HWCACHE_ALIGN
, 0, 0 );

220 
	}
}

222 
	$öô_blkœyî
(){

223 
	`öô_blkœyî_basic
();

224 
	`öô_blkœyî_buf„r
();

225 
	}
}

231 ÊâÄÈúÄÁÉ≠Ë°®Èïø(
blk_unô
 *
	gunô
){

232 
	gul⁄g
 ÂçïÈìæÂÆπÈáè = 
__4K
 * Á¢∞ÊíûÈìæÂÆπÈáè;

233 
	gul⁄g
 ÂèåÈ°µÂÆπÈáè = ÂçïÈìæÂÆπÈáè * 
__1K
 ;

234 
ul⁄g
 
	gdev_size
 = 512 * 
unô
->
tŸÆ_£˘‹s
;

235  
˚û_div
–
dev_size
, ÂèåÈ°µÂÆπÈáè);

243 
	$ªgi°î_blkdev
(
maj‹
){ 
	`as£π
(maj‹ < 
MAX_BLKDEV
);

244 
blk_dev
 *
blkdev
;

245 
blkdev
 = &
blk_devs
[
maj‹
]; 
	`a§t
(blkdev->
unômax
 > 0);

248 
i
 = 0; i < 
blkdev
->
unômax
; i++){

249 
blk_unô
 *
unô
;

252 if–(
i
 % 
blkdev
->
unôcy˛e
) == 0) ;

254 
unô
 = 
blkdev
->
unôs
[
i
];

255 if(!
unô
Ë; 
	`a§t
(unô->
tŸÆ_£˘‹s
 != 0);

256 
	`a§t
(!
unô
->
hŸabÀ
 && "registeredálready!");

257 
	`ªgi°î_blkunô
(
unô
, 
	`MKDEV
(
maj‹
, 
i
));

259 
	}
}

265 
	$ªgi°î_blkunô
(
blk_unô
 *
unô
, 
u32
 
dev
){ 
	`a§t
(unô && unô->
tŸÆ_£˘‹s
 );

266 
li°_hód
 *ÁºìÂÜ≤ÂùóË°®;

269 
∑ges_√ed
 = ÊâÄÈúÄÁÉ≠Ë°®Èïø(
unô
) * 2;

270 
‹dî_√ed
 = 
	`pg‹dî_√eded
(
∑ges_√ed
);

271 
∑ges_giveyou
 = 1 << 
‹dî_√ed
;

272 ÁºìÂÜ≤ÂùóË°® = 
	`__Æloc_∑ges
(0, 
‹dî_√ed
); 
	`a§t
(ÁºìÂÜ≤ÂùóË°®);

273 ÁºìÂÜ≤ÂùóË°®Èïø = 
∑ges_giveyou
 * 
__4K
 /(
li°_hód
);

274 
i
 = 0 ; i < ÁºìÂÜ≤ÂùóË°®Èïø; i++){

275 
	`INIT_LIST_HEAD
–&ÁºìÂÜ≤ÂùóË°®[
i
] );

278 
unô
->ÁºìÂÜ≤ÂùóË°® = ÁºìÂÜ≤ÂùóË°®;

279 
unô
->ÁºìÂÜ≤ÂùóË°®Èïø= ÁºìÂÜ≤ÂùóË°®Èïø;

280 
unô
->
dev_id
 = 
dev
;

281 
	}
}

289 ÁºìÂÜ≤ÂùóË°®
	g_
Ê∑ªÂä†(
blk_unô
 *
	gunô
,

290 
buf„r_hód
 *
	g√w
)

291 { 
a§t
(
√w
->
cou¡
 == 1);

292 
	g√w
->
	gdev_id
 = 
unô
->
dev_id
;

293 
	g√w
->
	gdúty
 = 
Ál£
;

294 
	g√w
->
	glock
 = 
Ál£
;

297 
li°_hód
 *
	ghashtbl
 = 
unô
->ÁºìÂÜ≤ÂùóË°®;

298 
	ghash
 = 
√w
->
block
 % 
unô
->ÁºìÂÜ≤ÂùóË°®Èïø;

299 
li°_add
(&
√w
->
hash
, &
hashtbl
[hash]);

304 
	gbuf„r_hód
 *

305 ÁºìÂÜ≤ÂùóË°®
	g_
Êü•Êâæ(
blk_unô
 *
	gunô
, 
ul⁄g
 
	gblock_id
){

306 
	ghash
 = 
block_id
 % 
unô
->ÁºìÂÜ≤ÂùóË°®Èïø;

307 
li°_hód
 *
	gcﬁlisi⁄
 = 
unô
->ÁºìÂÜ≤ÂùóË°® + 
hash
;

308 
buf„r_hód
 *
	gcuº
;

309 
li°_f‹_óch_ß„
(
cﬁlisi⁄
, 
cuº
, 
hash
){

310 if(
	gcuº
->
	gblock
 =
block_id
Ë 
cuº
;

337 
	gbuf„r_hód
 *Êò†Â∞ÑÁ£ÅÁõòÂùó(
u32
 
	gdev
, 
ul⁄g
 
	gblock
){

338 
buf„r_hód
 *
	gbuf„r
;

339 
buf„r_hód
 *
	gøw
;

342 
	gblk_devs
[
MAJOR
(
dev
)].
globÆ2loˇl
(&dev, &
block
);

344 
	gbuf„r
 = ÁºìÂÜ≤ÂùóÂëΩ‰∏≠(
dev
, 
	gblock
);

345 if(
	gbuf„r
)  buffer;

347 
	gøw
 = ËØ∑Ê±ÇÁ©∫Èó≤Âùó(); 
a§t
(
øw
);

348 if(
	gøw
->
	glock
){

350 
kp_¶ìp
(0, 0);

352 if–(
	gbuf„r
 = ÁºìÂÜ≤ÂùóÂëΩ‰∏≠(
dev
, 
	gblock
) ) ){

353 Á©∫Èó≤Èìæ
	g_
Ê∑ªÂä†(
	gøw
);

354  
	gbuf„r
;

357 
	gbuf„r
 = 
øw
;

365 
	gbuf„r
->
	gblock
 = 
block
;

366 ÁºìÂÜ≤ÂùóË°®
	g_
Ê∑ªÂä†–
BLK_UNIT
(
dev
), 
	gbuf„r
);

367 ÂøôÁ¢åÈìæ
	g_
Ê∑ªÂä†(
	gbuf„r
);

369 
Œ_rw_block
(
READ
, 
buf„r
);

370 Á≠âÂæÖÂùóËß£ÈîÅ(
	gbuf„r
);

377 if(
	gbuf„r
->
	gio
 =
Ál£
){

378 ÊîæÂºÉÁºìÂÜ≤Âùó(
buf„r
);

379 
	gbuf„r
 = 0; 
•ö
("IO fault");

381  
	gbuf„r
;

388 
	$Œ_rw_blocks
(
u32
 
dev_id
, 
rw
,

389 
ul⁄g
 
°¨t
, ul⁄g 
blocknum
, *
buf
)

391 *
‰om
, *
to
;

392 
buf„r_hód
 *
bh
;

394 
i
 = 0; i < 
blocknum
; i++){

395 
bh
 = 
	`mm≠_disk
(
dev_id
, 
°¨t
 + 
i
); 
	`a§t
(bh);

396 if(
rw
 =
READ
) {

397 
‰om
 = 
bh
->
d©a
;

398 
to
 = 
buf
 + 
i
 * 
BLOCK_SIZE
;

401 
‰om
 = 
buf
 + 
i
* 
BLOCK_SIZE
;

402 
to
 = 
bh
->
d©a
;

405 
	`mem˝y
(
to
, 
‰om
, 
BLOCK_SIZE
);

406 
	`munm≠_disk
(
bh
);

409 
	}
}

411 
	gbuf„r_hód
 *ËØ∑Ê±ÇÂÜôÂÖ•Âùó(
u32
 
	gdev
, 
ul⁄g
 
	gblock
){

422 
	gbuf„r_hód
 *ÂõûÊî∂ÊúÄÂÜ∑Âùó(){

423 if(
li°_em±y
(&ÁºìÂÜ≤ÂùóÂÖ®Â±ÄÈìæ))  0;

425 
buf„r_hód
 *
	gcﬁdblock
;

426 
	gcﬁdblock
 = 
c⁄èöî_of
(ÁºìÂÜ≤ÂùóÂÖ®Â±ÄÈìæ.
√xt
, 
buf„r_hód
, 
Ãu
);

427 if(
	gcﬁdblock
->
	gcou¡
 > 0Ë
•ö
("unusual case");

429 ÁºìÂÜ≤ÂùóËÑ±Èìæ(
	gcﬁdblock
);

430 if(
	gcﬁdblock
->
	gdúty
){

432 
Œ_rw_block
(
WRITE
, 
cﬁdblock
);

434  
	gcﬁdblock
;

443 
buf„r_hód
 *
	gem±y
;

445 
	gem±y
 = Êñ∞Âª∫Á©∫ÁôΩÂùó();

448 
	gem±y
 = ÂõûÊî∂ÊúÄÂÜ∑Âùó();

450 
a§t
(
em±y
 && 
li°_em±y
–&em±y->
waô
 ));

451  
	gem±y
;

456 
	gli°_hód
 ÁºìÂÜ≤ÂùóÂÖ®Â±ÄÈìæ;

464 
ölöe
 ÂÖ®Â±ÄÈìæ
	g_
Ê∑ªÂä†(
buf„r_hód
 *
	g√w
){

465 
li°_add_èû
(&
√w
->
Ãu
, &ÁºìÂÜ≤ÂùóÂÖ®Â±ÄÈìæ);

466 ÂÖ®Â±ÄÈìæÈïø++; 
a§t
(ÂÖ®Â±ÄÈìæÈïø <= ÂÖ®Â±ÄÈìæÂÆπÈáè);

471 ÁºìÂÜ≤ÂùóËÑ±Èìæ(
buf„r_hód
 *
	gbh
){

472 
li°_dñ
(&
bh
->
Ãu
);

473 
li°_dñ
(&
bh
->
hash
);

	@block/ll_rw_blk.c

3 
	~<löux/blkdev.h
>

4 
	~<scheduÀ.h
>

5 
	~<utûs.h
>

6 
	~<löux/buf„r_hód.h
>

8 
ªque°
 
	grq_¨r
[
MAX_REQUEST
];

9 
queue_gëãr
 
	gqueue_gëãrs
[
MAX_BLKDEV
];

11 
	$ªgi°î_queue_gëãr
(
maj‹
, 
gë_queue_‚
 *
gë_queue
, *
d©a
){

12 
	`as£π
(
maj‹
 < 
MAX_BLKDEV
 && major > 0);

13 
queue_gëãrs
[
maj‹
].
gë_queue
 = get_queue;

14 
queue_gëãrs
[
maj‹
].
d©a
 = data;

15 
	}
}

21 
ªque°_queue
 * 
	$blk_gë_queue
(
u16
 
dev_id
){

22 
queue_gëãr
 *
gëãr
 = &
queue_gëãrs
[
	`MAJOR
(
dev_id
)];

23 i‡(
gëãr
->
gë_queue
)

24  
gëãr
->
	`gë_queue
(
dev_id
);

27  &
gëãr
->
ªque°_queue
;

28 
	}
};

32 
ªque°
 *
	$gë_‰ì_ªque°
(){

33 
i
 = 0; i < 
MAX_REQUEST
; i++){

34 if(
rq_¨r
[
i
].
dev_id
 == 0) Ñq_arr + i;

36 
	`as£π
(0);

38 
	}
}

47 
	$gíîic_mk_ªque°
(
rw
, 
buf„r_hód
 *
bh
){

48 
	`˛i_push
();

49 
maj‹
 = 
	`MAJOR
(
bh
->
dev_id
);

50 
ªque°
 * 
rq
 = 
	`gë_‰ì_ªque°
();

51 
rq
->
bh
 = bh;

52 
rq
->
dev_id
 = 
bh
->dev_id;

53 
rq
->
cmd
 = 
rw
;

54 
rq
->
°¨t
 = 
bh
->
block
;

55 
rq
->
cou¡
 = 1;

56 
rq
->
buf
 = 
bh
->
d©a
;

57 
rq
->
askî
 = 
cuºít
;

59 
blk_devs
[
maj‹
].
	`add_ªque°
(
rq
);

60 
	`Êagi_p›
();

61 
	}
}

64 
	$öô_blkœyî_basic
(){

65 
i
 =0; i < 
MAX_BLKDEV
; i++){

68  
i
 = 0; i < 
MAX_REQUEST
; i++){

70 
	`INIT_LIST_HEAD
(&
rq_¨r
[
i
].
ã¡a˛e
);

72 
	}
}

79 
	$Œ_rw_block
(
rw
, 
buf„r_hód
 *
bh
){

88 
u32
 
dev_id
 = 
bh
->dev_id;

89 
blk_unô
 *
unô
 = 
	`BLK_UNIT
(
dev_id
);

90 
u32
 
rw_°¨t
 = 
	`block2lba
–
bh
->
block
 );

91 
u32
 
rw_£˘‹s
 = 
	`block2£˘‹s
–
bh
->
cou¡
 );

92 
u32
 
rw_íd
 = 
rw_°¨t
 + 
rw_£˘‹s
;

93 if(
rw_íd
 <
unô
->
tŸÆ_£˘‹s
);

94 
	`•ö
("ll_rw out-of-boundray");

96 
bh
->
lock
 = 
åue
;

97 
	`gíîic_mk_ªque°
(
rw
, 
bh
);

99 
	}
}

	@boot.asm

1 ; 
The
 
mem‹y
 
œyout
 
dügøm
 
is
 
ö
 
	gboŸöfo
.
	gasm


2 ;1 
sögÀ
 
£gmít
 
should
 
be
 
smÆÀr
 
	gth™
 64
	gKB


3 %
	gö˛ude
 "bootinfo.asm"

4 %
	gö˛ude
 "include/old/pm.inc"

5 %
	gö˛ude
 "include/old/utils.inc"

6 
	g‹g
 0x7c00

7 
addr_mbr_lﬂded
 
equ
 (
_ba£_kî√l_lﬂded
 - 512 * (
_boŸbö_occupy_£˘‹s
 + 
_fiximg_occupy_£˘‹s
))

8 [
bôs
 16]

9 
	gmbrHód
:

10 
mov
 
ax
, 0xb800

11 
mov
 
	ggs
, 
ax


12 
	gªad_Ê›py_side_o_£˘‹_tŸÆ_de°ß_de°ó
 0x80,0,0,2,(
	g_boŸbö_occupy_£˘‹s
 + 
	g_fiximg_occupy_£˘‹s
 - 1),0,0x7e00 ;'-1' 
beˇu£
 
bios
 
has
 
Æªay
 
lﬂded
 
the
 
fú°
 
£˘‹


13 
	gªad_Ê›py_side_o_£˘‹_tŸÆ_de°ß_de°ó
 0x80, 0,0,1,63,(
	gaddr_mbr_lﬂded
) >> 4, 0

14 
	gªad_Ê›py_side_o_£˘‹_tŸÆ_de°ß_de°ó
 0x80, 1,0,1,63,(
	gaddr_mbr_lﬂded
 + 512 * 63) >> 4, 0

15 
	gªad_Ê›py_side_o_£˘‹_tŸÆ_de°ß_de°ó
 0x80, 2,0,1,63,(
	gaddr_mbr_lﬂded
 + 512 * 63 * 2) >> 4, 0

16 
	gªad_Ê›py_side_o_£˘‹_tŸÆ_de°ß_de°ó
 0x80, 3,0,1,63,(
	gaddr_mbr_lﬂded
 + 512 * 63 * 3) >> 4, 0

17 
	gªad_Ê›py_side_o_£˘‹_tŸÆ_de°ß_de°ó
 0x80, 4,0,1,63,(
	gaddr_mbr_lﬂded
 + 512 * 63 * 4) >> 4, 0

18 ;
	gªad_Ê›py_side_o_£˘‹_tŸÆ_de°ß_de°ó
 0x80, 5,0,1,63,(
	gaddr_mbr_lﬂded
 + 512 * 63 * 5) >> 4, 0

19 ;
	gªad_Ê›py_side_o_£˘‹_tŸÆ_de°ß_de°ó
 0x80, 6,0,1,63,(
	gaddr_mbr_lﬂded
 + 512 * 63 * 6) >> 4, 0

20 ;
	gªad_Ê›py_side_o_£˘‹_tŸÆ_de°ß_de°ó
 0x80, 7,0,1,63,(
	gaddr_mbr_lﬂded
 + 512 * 63 * 7) >> 4, 0

21 ;ÂÖ±Â∫¶Âèñ
	gkî√l
.
	gñf
 63 
	gx
 8 / 2 = 252
K
 ÔºåËøòË¶ÅÂáèÂéªÂá†‰∏™ÊâáÂå∫ÁöÑ
boŸ
.
bö
Âíå
fix
.
img


22 ;
whí
 
the
 
size
 
of
 
	gkî√l
.
ñf
 
gës
 
˛o£
 
	gto
 256
	gK
, 
we
 
	gˇn
'tÜoad it completely

23 
jmp
 
	gíå™˚


25 ;[
£˘i⁄
 .
gdt
]

26 ; 
GDT


27 
	ggdt
: 
Des¸ùt‹
 0, 0, 0 ; 
nuŒ
 
	gdes¸ùt‹


28 .
	gdesc_∂aö_c0
: 
Des¸ùt‹
 0, 0fffff
	gh
, 
	gDA_32
 + 
	gDA_C
 + 
	gDA_LIMIT_4K


29 .
	gdesc_∂aö_d0
: 
Des¸ùt‹
 0, 0fffff
	gh
, 
	gDA_DRW
 | 
	gDA_LIMIT_4K
 + 
	gDA_32


30 ; 
íd
 
of
 
	gGDT


32 ; 
the
 
£À˘‹
 
c‹ª•⁄d
 
to
Åhê
two
 
deföed
 
des¸ùt‹
 
bef‹e


33 
Àn_gdt
 
equ
 
	g$
 - 
	ggdt
 ; 
gdt
 
Àngth


34 
£À˘‹_∂aö_c0
 
equ
 
	ggdt
.
	gdesc_∂aö_c0
 - 
gdt


35 
£À˘‹_∂aö_d0
 
equ
 
	ggdt
.
	gdesc_∂aö_d0
 - 
gdt


37 
	ggdtPå
:

38 
dw
 
Àn_gdt
 - 1 ; 
gdt
 
limôs


39 
dd
 
	ggdt
 ; 
this
 
ödiˇãs
 
th©
 
gdt
 
mu°
 
loˇã
 
©
 
mbr


42 
	gíå™˚
:

43 ;
lﬂd
 
	gdisk
 1

44 
jmp
 
ªad_ok


46 
	gªad_îr‹
:

47 
mov
 
bx
, 0xb800

48 
mov
 
	gds
,
bx


49 
mov
 
	gÆ
, '?'

50 
mov
 
	gah
, '?'

51 
mov
 
	gbyã
 [0], 
Æ


52 
mov
 
	gbyã
 [2], 
ah


53 
jmp
 
$


55 
	gªad_ok
:

56 
mov
 
ax
, 
	g_ba£_kî√l_lﬂded
>>4

57 
mov
 
	ges
, 
ax


58 
mov
 
	gdi
, 0

59 
mov
 
	gcx
, 255

60 
mov
 
	gbx
, 0xb800

61 
mov
 
	gds
, 
bx


62 
mov
 
	gbx
, 0

63 
	gshow_ñf
:

64 
mov
 
Æ
, [
es
:
di
]

65 
mov
 
byã
 [
bx
], 
Æ


66 
add
 
	gbx
, 2

67 
öc
 
di


68 
lo›
 
	gshow_ñf


70 ;
now
 
gë
 
machöe
 
physiˇl
 
mem‹y
 
öfom©i⁄


71 
x‹
 
	gax
, 
ax


72 
mov
 
	gds
, 
ax


73 
mov
 
	ges
, 
ax


74 
	ggë_mem‹y_öf‹m©i⁄
:

75 
mov
 
ebx
,0

76 
mov
 
	gdi
,
	gmem_£göfo_¨r


77 .
	glo›
:

78 
mov
 
óx
,0E820
h


79 
mov
 
	gecx
,20

80 
mov
 
	gedx
,0534D4150
h


81 15
h


82 
	gjc
 .
Áû


83 
add
 
	gdi
,20

84 
öc
 
	gdw‹d
 [
mem_£gnum
]

85 
cmp
 
	gebx
,0

86 
	gj√
 .
lo›


87 
	gjmp
 .
	gd⁄e


88 .
	gÁû
:

89 
mov
 
Æ
, 'X'

90 
mov
 
	gbyã
 [
gs
:0], 
Æ


91 
mov
 
	gbyã
 [
gs
:2], 
Æ


92 
jmp
 
	g$


93 .
	gd⁄e
:

94 
jmp
 
mbr_exãnd


95 
times
 512-(
$
-
$$
Ë
db
 0

97 
mbr_exãnd
: ;
	g£˘‹
 2,3,4 => 0x7d00,0x7e00,0x7f00

98 ; 
lﬂd
 
gdt


99 
mov
 
	gax
,0

100 
mov
 
	gds
,
ax


101 
	glgdt
 [
gdtPå
]

102 ;
ds
 
poöt
 
	gto
 [.
d©a
] 
ö
 
	gkî√l
.
	gasm


104 ; 
˛o£
 
the
 
	göãºu±
, 
™d
 
›í
 
A20
 
to
 
gë
Åhê
addªssög
 
abûôy
 
	gbey⁄d
 1
	gM
.

105 
˛i


106 
	g›íA20
:

107 
ö
 
Æ
, 92
h


108 
‹
 
	gÆ
, 00000010b

109 
	gout
 92
	gh
, 
	gÆ


111 ; 
to
 
¥Ÿe˘i⁄
 
mode


112 
	gswôch_¥oMode
:

113 
mov
 
óx
, 
¸0


114 
‹
 
	góx
, 1 ; 
£t
 
	gCR0
's PE bit

115 
mov
 
	g¸0
, 
óx


117 
mov
 
	gax
, 
£À˘‹_∂aö_d0


118 
mov
 
	gds
,
ax


119 
mov
 
	ges
,
ax


120 
mov
 
	gss
,
ax


121 
jmp
 
dw‹d
 
	g£À˘‹_∂aö_c0
:
fix_kî√l
 ;'jmp'-
›î©i⁄
 
	g√˚sßry
?

123 [
bôs
 32]

124 
	gfix_kî√l
:

125 ;
	gedi
ÊåáÂêëÂÜÖÊ†∏Êò†ÂÉè, ÊØèÊ¨°Ë∑≥512, ÊÄªÊòØÊåáÂú®ÊâáÂå∫ÁöÑÁ¨¨‰∏Ä‰∏™Â≠óËäÇ

126 ;‰πüÊòØÂèñÂÆÉÁöÑ'de°ö©i⁄'‰πãÊÑè, 
	gfix
.
	gimg
ÈáåÁöÑ
	gbyã
Ë¶Å‰∏Ä‰∏™‰∏™Ë°•ÂõûÂà∞
	gedi
ÊâÄÊåáÁöÑÂú∞Êñπ

127 
mov
 
	gedi
, 
	g_ba£_kî√l_lﬂded


128 ;
	gesi
ÊåáÂêë
	gfix
.
	gimg
, ÊØèÊ¨°Ëµ∞‰∏Ä‰∏™
byã


129 
mov
 
	gesi
, (
	g_fiximg_°¨t_£˘‹
 - 1) * 512 + 0x7c00

130 ;
	góx
Áõ∏ÂΩì‰∫é"ÊâáÂå∫ÂÅèÁßª", Ë°®Á§∫‰øÆÊ≠£Âà∞Á¨¨Âá†‰∏™ÊâáÂå∫(‰ªé0ËÆ°Êï∞)

131 
x‹
 
	góx
, 
óx


132 
mov
 
	gecx
, 0 ; !
	gboﬁón
, 
ödiˇãs
 
the
 
œ°
 
£˘‹
 
to
 
	gfix


133 .
	gcheck_⁄e
:

134 ;Ê≥®ÊÑè, ËøôÈáåÊØîÂØπÁöÑÂè™ËÉΩÊòØ
	gÆ
, ‰ΩÜÁ®çÂêé
	göc
ÁöÑÁ°ÆÂÆû
	gax
, Êàë‰ª¨ÊòØÊïÖÊÑèËÆ©ÂÆÉÂõûÁªïÁöÑ.

135 
cmp
 
	gbyã
 [
edi
], 
	gÆ
 ;
check
 
magic
 
numbî


136 
	gje
 .
	gfix_ô


137 ;ÈÄíÂ¢ûÂ∫èÁªàÊ≠¢, ÁúãÁúãÊòØ‰∏çÊòØ
	gkî√l
.
	gñf
ÁöÑÊúÄÂêé‰∏Ä‰∏™ÊâáÂå∫

139 
cmp
 
	gbyã
 [
edi
], 0xcc

140 
	gj√
 .
	gbad
 ;ÂÆå‰∫Ü, 
	gkî√l
.
	gimg
ÁöÑÂÜÖÂ≠òÊò†ÂÉèÂú®Ëøô‰∏™ÊâáÂå∫Âá∫Èîô‰∫Ü

141 ;Â•ΩÁöÑ, Ê†°È™åÈÄöËøá, Áé∞Âú®Êù•‰øÆÊ≠£
	gkî√l
.
	gñf
ÊúÄÂêé‰∏Ä‰∏™ÊâáÂå∫

142 
mov
 
	gecx
, 1 ;Êúâ‰∫õÊó©Ôºå‰ΩÜÊ≤°‰∫ãÔºåÂõ†‰∏∫Â¶ÇÊûú
	gcou¡
Ê†∏ÂØπÂ§±Ë¥•ÔºåÂ∞±Ê≠ªÂæ™ÁéØ‰∫Ü„ÄÇ

143 ;
öc
 
	gax
‰πãÂêé,áxÁöÑÂÄºÂ∞±Áõ∏ÂΩì‰∫é
	gkî√l
.
	gñf
ÊÄªÁöÑÊâáÂå∫Êï∞Èáè

144 
öc
 
ax


145 
cmp
 
	gw‹d
 [
esi
 + 1], 
	gax
 ;
	gesi
Ê≠§Êó∂ËøòÊåáÂêë
	gfix
.
	gimg
ÁöÑÊúÄÂêé‰∏Ä‰∏™ÁùÄËâ≤
	gbyã
Â§á‰ªΩ

146 ;Âú®ÂÆÉ‰πãÂêé, Á¥ßË∑üÁöÑÊòØ‰∏§‰∏™
	gbyã
ÁöÑ"ÊÄªÊâáÂå∫Êï∞"

147 ;Êàë‰ª¨Ë¶ÅË∑ü
	gax
ÊØîÂØπ‰∏Ä‰∏ã, ËøôÊòØ‰∏ÄÊ¨°ÊÄªÁöÑÊ†°È™å

148 ;Ê£ÄÈ™åÈÄöËøá, Ë∑≥Âà∞
	gfix_ô
, Â∞±‰∏çÂÜçÂõûÊù•‰∫Ü.Âõ†‰∏∫
	gecx
Â∑≤ÁªèÁΩÆ1

149 
	gje
 .
	gfix_ô


150 .
	gbad
: 
jmp
 
$


151 .
fix_ô
:

152 
mov
 
bl
, [
esi
]

153 
	gmov
 [
edi
], 
bl


154 
öc
 
esi


155 
öc
 
ax


156 
add
 
	gedi
, 512

157 
	gjcxz
 .
check_⁄e


159 
	gª£t_kî√l
:

160 ;
˛ór
 
RAM
 .
bss


161 
mov
 
	gedi
,
ba£_kî√l_ª£t


162 
mov
 
	góx
,0

163 
mov
 
	gecx
,256*1024/4

164 
˛d


165 
ªp
 
	g°osd


166 ; 
lﬂd
 
kî√l
 
	g‰om
 0x8000
h


167 
mov
 
	gebx
, 
_ba£_kî√l_lﬂded


168 
mov
 
	gedx
,0

169 
mov
 
	gdx
, [
ebx
+42] ; 
e_phítsz


170 
mov
 
	gecx
,0

171 
mov
 
	gcx
, [
ebx
+44] ; 
e_phnum


172 
mov
 
	gebx
, [
ebx
+28]

173 
	g£¨ch_ph_ty≥Lﬂded
:

174 
cmp
 
dw‹d
 [
_ba£_kî√l_lﬂded
 + 
ebx
], 1

175 
j√
 
doNŸhög


176 
	gcySegmít
:

177 
push
 
ecx


178 
mov
 
ecx
, [
_ba£_kî√l_lﬂded
 + 
ebx
 + 16]

179 
mov
 
	gesi
, [
_ba£_kî√l_lﬂded
 + 
ebx
 + 4]

180 
add
 
	gesi
, 
_ba£_kî√l_lﬂded


181 
mov
 
	gedi
, [
_ba£_kî√l_lﬂded
 + 
ebx
 + 8]

182 
™d
 
	gedi
,0x0ffffff‡;
	gmask
 '0xc003XXXX' 
	gto
 '0x0003XXXX'

183 
˛d


184 
ªp
 
movsb


185 
p›
 
ecx


187 
	gdoNŸhög
:

188 
add
 
ebx
,
edx


189 
lo›
 
£¨ch_ph_ty≥Lﬂded


190 
	gkî√l_pg_m≠
:

191 
˛d


192 
mov
 
edi
,
	g_gpgdú_ba£
+0xc00 ;
∑ge
 
	gdúe˘‹y
, ÂØπÂ∫î‰∫Ü3
	gG
ÂºÄÂßãÁöÑÂÜÖÂ≠ò

193 
mov
 
	gecx
,224 ;ÂàùÂßãÂåñ224‰∏™
	gíåy
ÔºåÂØπÂ∫î3
	gG
~3G+896
	gM
ÁöÑÂÜÖÂ≠ò

194 
mov
 
	góx
,0x101000|
	gPG_P
|
	gPG_USS
|
	gPG_RWW
 ;
íåy
 
	gvÆue
ÔºåÂç≥È°µË°®Âú∞ÂùÄÔºå‰ªé0x101000ÈÄíÂ¢û

195 .
	gfûldú
:

196 
°osd


197 
add
 
óx
,0x1000

198 
	glo›
 .
fûldú


199 
mov
 
	gecx
,0x400*224 ;224‰∏™
∑ge
 
	gèbÀ
,ÊØè‰∏™∑gêèbÀÊúâ1024‰∏™
íåy


200 
mov
 
	góx
,0|
	gPG_P
|
	gPG_USS
|
	gPG_RWW
 ;Â°´ÂÖÖËøô‰∫õ
	gíåy
,‰ªé0ÈÄíÂ¢û„ÄÇË°®Á§∫‰ªé0Âú∞ÂùÄÂºÄÂßã
	gm≠
.

201 
mov
 
	gedi
,0x101000

202 .
	gfû…bl
:

203 
°osd


204 
add
 
óx
,0x1000

205 
	glo›
 .
	gfû…bl


206 ;
	gm≠
 0x7000~0x8ff‡
	gnow


207 ;1~2
	gM
ÈÉΩÊòØ
∑ge
 
èbÀ
(ÊúÄÂºÄÂßãÊòØ‰∏Ä‰∏™
∑gedú
,ÊúÄÊú´Â∞æÊúâ‰∏ÄÊÆµÊ≤°Áî®)ÔºåÂÆåÊàê‰∫Ü3
	gG
-3G,896M

208 ;Âêë0~896
	gM
ÁöÑÊò†Â∞Ñ„ÄÇ Êàë‰ª¨‰ªéÊúÄÊú´Â∞æÂàÜÈÖç4
	gK
ÔºàËøô‰∏™
	g∑ge
ËÇØÂÆöËøòÊ≤°Áî®ÔºåÂæàÂÆâÂÖ®)ÂΩì‰ΩúÈ°µË°®Ôºå

209 ;ÁÑ∂ÂêéÊääËøô‰∏™È°µË°®Ê≥®ÂÜåÂú®
∑ge
 
	gdúe˘‹y
ÁöÑ
	gíåy
 0ÔºåÂÆÉÂ∞±ËÉΩÊò†Â∞ÑËôöÊãüÂú∞ÂùÄÁöÑ0~4
	gM
‰∫ÜÔºåÊàë

210 ;‰ª¨ÊÉ≥Êò†Â∞ÑÁöÑÊòØËôöÂ≠òÂú∞ÂùÄÁöÑ7c00~8fff,Âõ†‰∏∫
	gboŸ
.
	gbö
ÁöÑ‰ª£Á†ÅÂàÜÂ∏ÉÂú®(7c00+)„ÄÇÂõ†‰∏∫Êé•‰∏ãÊù•

211 ;
	gMMU
ÊâìÂºÄÔºåÊàë‰ª¨Ë¶ÅËµ∂Á¥ßÂÆåÊàêËøô‰∏™ÂØπÁ≠âÊò†Â∞Ñ„ÄÇ

212 
tmp_tbl_addr
 
	gequ
 0x200000-0x1000

213 
mov
 
	gdw‹d
 [
_gpgdú_ba£
],
	gtmp_tbl_addr
|
	gPG_P
|
	gPG_USS
|
PG_RWW


214 
mov
 
	gdw‹d
 [
tmp_tbl_addr
+7*4],0x7000|
	gPG_P
|
	gPG_USS
|
PG_RWW


215 
mov
 
	gdw‹d
 [
tmp_tbl_addr
+8*4],0x8000|
	gPG_P
|
	gPG_USS
|
PG_RWW


217 
mov
 
	góx
,
_gpgdú_ba£


218 
mov
 
	g¸3
,
	góx
 ;
	g∑ge
-
m≠
 
a˘ive
 
now


219 
mov
 
	góx
,
¸0


220 
‹
 
	góx
,0x80000000

221 
mov
 
	g¸0
,
óx


222 
jmp
 
dw‹d
 
	g£À˘‹_∂aö_c0
:
_ba£_íå™˚_kî√l


223 
times
 512-(
$
-
mbr_exãnd
Ë
db
 0

228 ; --13
h
 (
Àaf
 8, 
ã°
 
∑ømëî
)

229 ; 
mov
 
	gah
, 8

230 ; 
mov
 
	gdl
, 0x80

231 ; 
mov
 
	gdi
, 0

232 ; 
mov
 
	ges
, 
	gdi


235 ; 
mov
 
	gbx
, 0xb800

236 ; 
mov
 
	gds
, 
	gbx


237 ; 
mov
 
	gbx
, 0

239 ; 
mov
 
	gbyã
 [
bx
], 'C'

241 ; 
mov
 
	gax
, 
	gcx


242 ; 
add
 
	gbx
, 2

243 ; 
mov
 
	gbyã
 [
bx
], 
	gah


244 ; 
shr
 
	gÆ
, 6

245 ; 
add
 
	gbx
, 2

246 ; 
mov
 
	gbyã
 [
bx
], 
	gÆ


247 ; 
add
 
	gbx
, 2

248 ; 
mov
 
	gbyã
 [
bx
], 'h'

249 ; 
add
 
	gbx
 , 2

250 ; 
add
 
	gdh
, '0'

251 ; 
mov
 
	gbyã
 [
bx
], 
	gdh


252 ; 
add
 
	gbx
, 2

253 ; 
mov
 
	gbyã
 [
bx
], 'd'

254 ; 
add
 
	gbx
, 2

255 ; 
add
 
	gdl
, '0'

256 ; 
mov
 
	gbyã
 [
bx
], 
	gdl


257 ; 
add
 
	gbx
, 2

258 ; 
mov
 
	gbyã
 [
bx
], 's'

259 ; 
mov
 
	gax
, 
	gcx


260 ; 
™d
 
	gÆ
, 00111111b

261 ; 
add
 
	gbx
, 2

262 ; 
mov
 
	gbyã
 [
bx
], 
	gÆ


263 ; 
jmp
 
	g$


268 ;
mov
 
	gebx
, 0xb8000

269 ;
mov
 
	gax
, 
	gcx


270 ;
add
 
	gÆ
, '0'

271 ;
add
 
	gah
, '0'

272 ;
mov
 
	gbyã
 [
ebx
], 
	gÆ


273 ;
mov
 
	gbyã
 [
ebx
 + 2], 
	gah


274 ;
jmp
 
	g$


	@bootinfo.asm

1 ; 1, Ëøô‰∏™Êñá‰ª∂ÂÆö‰πâ‰∫ÜÂêØÂä®Êó∂ÁöÑÂÖ≥ÈîÆÂèÇÊï∞Ôºö‰æãÂ¶Ç‰ªéÂì™‰∏™ÊâáÂå∫Âä†ËΩΩ
	gfix
.
	gimg
Ôºå‰ªéÂì™‰∏™ÊâáÂå∫ÂºÄÂßã

2 ; Âä†ËΩΩ
	gkî√l
.
	gñf
„ÄÇ

3 ; 2, Ëøô‰∫õÂèÇÊï∞ÊòØ‰ª•Ê±áÁºñ
equ
 
	gœbñ
ÁöÑÂΩ¢ÂºèÂ≠òÂú®ÁöÑÔºåÂÆÉ‰ª¨Âà∞‰∫Ü
	gC
ËØ≠Ë®ÄÈáåÂ∞±ÊòØÂèòÈáè„ÄÇ

4 ; 
	gboŸöfo
.
	gasm
ÂêåÊó∂ÂèÇ‰∏é
	gboŸ
.
	gbö
Âíå
	gkî√l
.
	gñf
ÁöÑÁîüÊàê„ÄÇ ‰ªñ‰ΩøÂæó
	gC
ËØ≠Ë®ÄËÉΩËÆøÈóÆÂàùÂßã

7 ; [
Name
 
C⁄víti⁄
]

8 ; 
	g«sm
‰∏ã
	gequ
ÂΩ¢ÂºèÁöÑ
	gœbñ
, ÂÉèÊØî
abc
Équ 0x7c00Ôºå ÊúÄÁªàË∑ü
	gC
ËØ≠Ë®ÄÈìæÊé•Êó∂Ôºå
	gabc
Áõ∏ÂΩì‰∫é
	gc
ËØ≠Ë®Ä

9 ; ÈáåÊôÆÈÄöÁöÑÂèòÈáèÊ†áÁ≠æ„ÄÇ Âú®
	gC
ËØ≠Ë®ÄÈáåÔºåÊàë‰ª¨Â£∞Êòé 
abc
; 
¥ötf
("%d",ábc);

10 ; ÊâìÂç∞Âá∫Êù•ÁöÑÂ∞±ÊòØ0x7c00Â§ÑÁöÑ‰∏Ä‰∏™
	gdw‹d
„ÄÇ

11 ; ÊâÄ‰ª•Êàë‰ª¨Á∫¶ÂÆöÔºå ‰ªéÊ±áÁºñÂæÄ
	gC
Èáå‰º†ÂèòÈáèÊó∂ÔºåÂ¶ÇÊûúÊÉ≥‰º†ÈÄíÁöÑÂ∞±ÊòØ‰∏Ä‰∏™ÂèòÈáèÔºåÈÇ£Êó†ÊâÄË∞ì„ÄÇ

12 ; ‰ΩÜÂ¶ÇÊûúÊÉ≥‰º†ÈÄíÁöÑÊòØËøô‰∏™Ê†áÁ≠æÊú¨Ë∫´ÁöÑ
	gvÆue
ÔºåÂ∞±Ë¶ÅÂëΩÂêçÊàê
	g_xxx
ÁöÑÂΩ¢Âºè„ÄÇÂâç‰∏ãÂàíÁ∫ø„ÄÇÂà∞‰∫Ü

13 ÈáåÊàë‰ª¨ËøôÊ†∑Áî®ÂÆÉ, #deföêxxx ()&(_xxx)

14 ; 
Sì
 
Æso
 
	gboŸöfo
.
	gh


16 %
	gö˛ude
 "include/old/utils.inc"

19 ; | 256 
	gbyãs
 | 4b
	gyãs
 |

20 ; |
	g_____________________________
|
	g________
|

22 ;| | 
	gmem_£göfo
 | 
	g£gnum
 |

25 ;
	g«sm
ÁöÑÁªìÊûÑ‰ΩìÂπ∂‰∏çÂÆûÁî®ÔºåËøôÂÑøÂè™ÊòØÁî®ÂÆÉÂ¢ûÂä†ÂèØËØªÊÄß„ÄÇ

26 
°ruc
 
	gªÆmod_öfo_°ru


27 .
	gmem_£gnum
: 
ªsb
 4

28 .
mem_£göfo_¨r
: 
ªsb
 256

29 
íd°ruc


31 
gequ
 
ªÆmod_öfo
, 0x6000

32 
mem_£gnum
 
equ
 
	gªÆmod_öfo
 + 
	gªÆmod_öfo_°ru
.mem_segnum

33 
mem_£göfo_¨r
 
equ
 
	gªÆmod_öfo
 + 
	gªÆmod_öfo_°ru
.
	gmem_£göfo_¨r


35 ;ÊâáÂå∫ÊòØ‰ªé1ÂºÄÂßãËÆ°Êï∞ÁöÑÔºåÂà∞‰∫Ü
	gdimg
.
	gc
ÈáåË¶ÅÂáè1ÔºåÂõ†‰∏∫
	gdd
ÊòØ‰ªé0ÂºÄÂßãËÆ°Êï∞ÁöÑ„ÄÇ

38 ; 
	g_______________________________________________________________________


39 ;
	g£˘‹
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | | | |

40 ; |
	g______boŸ
.
	gbö______
|
	g_fix__
|
	g_____kî√l
.
	gñf__________________________
|

43 
gequ
 
	g_boŸbö_°¨t_£˘‹
, 1

44 
gequ
 
	g_boŸbö_occupy_£˘‹s
,3

45 
gequ
 
	g_fiximg_°¨t_£˘‹
, 
	g_boŸbö_°¨t_£˘‹
 + 
_boŸbö_occupy_£˘‹s


46 
gequ
 
	g_fiximg_occupy_£˘‹s
, 1

47 
gequ
 
	g_kî√l_image_°¨t_£˘‹
, (
	g_fiximg_°¨t_£˘‹
 + 
	g_fiximg_occupy_£˘‹s
)

49 
gequ
 
	g_gpgdú_ba£
,0x100000

51 
Àqu
 
	g_ba£_kî√l_lﬂded
,0x60000

52 
ba£_kî√l_ª£t
 
	gequ
 0x10400

53 
Àqu
 
	g_ba£_íå™˚_kî√l
,
	gba£_kî√l_ª£t
+0xc0000000

55 
gequ
 
	gRAMDISK_BASE
, 0x10000

	@drivers/ide/ide.c

7 
	~<löux/ide.h
>

8 
	~<úq.h
>

9 
	~<scheduÀ.h
>

10 
	~<löux/buf„r_hód.h
>

12 
ªque°
 * 
ide_gë_√xt_rq
(
ide_hwif
 *
hwif
);

13 
ide_do_ªque°
(
u32
 
dev_id
);

19 
	#DEVICE_NR
(
dev_id
Ë(
	`MINOR
(dev_idË/ 64)

	)

21 
	#CURR_HWIF
(
dev_id
Ë(
ide_hwifs
 + 
	`ch™√l_id
(dev_id))

	)

22 
	#MAX_HWIFS
 3

	)

26 
ide_hwif
 
	gide_hwifs
[
MAX_HWIFS
] = {

28 .
io_p‹ts
={0x1f0, 0x1f1,0x1f2,0x1f3,0x1f4,0x1f5,0x1f6,0x1f7,0x3f6},

31 .
io_p‹ts
={0x170, 0x171,0x172,0x173,0x174,0x175,0x176,0x177,0x3f6},

35 
add_ªque°
(
ªque°
 * 
rq
);

38 
	$ch™√l_id
(
dev_id
){

39  
	`MAJOR
(
dev_id
) / 22;

40 
	}
}

41 
ªque°
 *
	$ã¡a˛e2ªque°
(
li°_hód
 *
hód
){

42  
	`MB2STRU
(
ªque°
, 
hód
, 
ã¡a˛e
);

43 
	}
}

46 * 
	$ide_idítify
(
u32
 
dev_id
){

47 
ªque°
 * 
rq
;

49 
IF
 = 
	`˛i_ex
();

52 
rq
 = 
	`kmÆloc0
––
ªque°
) );

53 
rq
->
dev_id
 = dev_id;

54 
rq
->
buf
 = 
	`__Æloc_∑ge
(
__GFP_ZERO
);

55 
rq
->
cmd
 = 
WIN_IDENTIFY
;

56 
rq
->
askî
 = 
cuºít
;

57 
	`add_ªque°
(
rq
);

58 
	`kp_¶ìp
(0, 0);

60 if(
IF
Ë
	`°i
();

61  (*)
rq
->
buf
;

62 
	}
}

72 
	$globÆ2loˇl
(
u32
 *
_dev
, 
ul⁄g
 *
_block
){

73 
blk_dev
 *
blkdev
;

74 
blk_unô
 **
unôs
;

76 
u32
 
dev
 = *
_dev
;

77 
ul⁄g
 
block
 = *
_block
;

78 
u32
 
maj‹
 = 
	`MAJOR
(
dev
);

79 
u32
 
mö‹
 = 
	`MINOR
(
dev
);

80 
blkdev
 = 
blk_devs
 + 
maj‹
;

81 
unôs
 = 
blkdev
->unôs; 
	`a§t
(unôs[
mö‹
]);

82 if(!
unôs
[
mö‹
]->
h™zi
) ;

86 
i
 = 
mö‹
 % 
blkdev
->
unôcy˛e
 + 1;

87 
i
 < 
blkdev
->
unôcy˛e
; i++)

89 
blk_unô
 *
unô
 = 
blkdev
->
unôs
[ 
mö‹
 + 
i
];

90 if(!
unô
) ;

92 
lba_off£t
 = 
	`block2lba
(
block
Ë- 
unô
->
°¨t_£˘‹
;

93 if(
lba_off£t
 >= 0 &&

94 
lba_off£t
 < 
	`block2£˘‹s
(
unô
->
tŸÆ_£˘‹s
))

95 { 
u32
 
√wdev
 = 
	`MKDEV
(
maj‹
, 
mö‹
 + 
i
);

96 
	`›rötf
(">>ªdúe˘ %xÅÿ%x:%x>>>", 
dev
,

97 
√wdev
, 
lba_off£t
 / 
BLOCK_SECTORS
);

98 *
_dev
 = 
	`MKDEV
(
maj‹
, 
mö‹
 + 
i
);

99 *
_block
 = 
lba_off£t
 / 
BLOCK_SECTORS
;

100 if(
unô
->
h™zi
Ë
	`globÆ2loˇl
(
_dev
, 
_block
);

103 
	}
}

105 
	$ide_íd_ªque°
(
ide_hwif
 *
hwif
){ 
	`as£π
(hwif->
cur_rq
);

106 
buf„r_hód
 *
bh
;

107 
ªque°
 *
to_dñ
;

109 
to_dñ
 = 
hwif
->
cur_rq
;

110 
bh
 = 
to_dñ
->bh;

111 
hwif
->
cur_rq
 = 
	`ide_gë_√xt_rq
(hwif);

112 
	`li°_dñ_öô
(&
to_dñ
->
ã¡a˛e
);

113 
to_dñ
->
dev_id
 = 0;

114 
hwif
->
h™dÀr
 = 0;

116 
bh
->
lock
 = 
Ál£
;

117 
bh
->
dúty
 = 
Ál£
;

118 
bh
->
io
 = 
åue
;

120 
	`wake_up
(&
bh
->
waô
);

121 
	}
}

123 
	$wö_ªsu…
(
ide_hwif
 *
hwif
){

124 
i
 = 
	`ö_byã
(
hwif
->
io_p‹ts
[
SLOT_REG_STATUS
]);

125 if–(
i
 & (
STATUS_BUSY
 | 
STATUS_READY
 | 
STATUS_WRERR
 | 
STATUS_SEEK
 | 
STATUS_ERR
)) == (STATUS_READY | STATUS_SEEK) ) \

127 if(
i
 & 
STATUS_ERR
Ëò
	`ö_byã
(
hwif
->
io_p‹ts
[
SLOT_REG_ERROR
]);

128  
i
;

129 
	}
}

130 
	$idítify_öå
(
ide_hwif
 *
hwif
){

131 
	`a§t
–
	`wö_ªsu…
–
hwif
) == 0);

132 
ªque°
 *
cur_rq
 = 
hwif
->cur_rq;

133 
	`p‹t_ªad
(
hwif
->
io_p‹ts
[
SLOT_REG_DATA
], 
cur_rq
->
buf
, 512);

135 
hwif
->
cur_rq
 = 
	`ide_gë_√xt_rq
(hwif);

136 
	`li°_dñ_öô
(&
cur_rq
->
ã¡a˛e
);

137 
hwif
->
h™dÀr
 = 0;

139 
	`¶ìp_a˘ive
(
cur_rq
->
askî
);

140 
	`ide_do_ªque°
(
cur_rq
->
dev_id
);

141 
	}
}

144 
	$ªad_öå
(
ide_hwif
 *
hwif
){

145 if(
	`wö_ªsu…
(
hwif
)){

146 
	`as£π
(0);

149 
ªque°
 *
cur_rq
 = 
hwif
->cur_rq;

151 
	`p‹t_ªad
(
hwif
->
io_p‹ts
[
SLOT_REG_DATA
], 
cur_rq
->
buf
, 512);

152 if(--
cur_rq
->
cou¡
){

153 
cur_rq
->
buf
 += 512;

154 
	`›rötf
("%c", 0xfe);

157 
	`ide_íd_ªque°
(
hwif
);

158 
	`ide_do_ªque°
(
cur_rq
->
dev_id
);

159 
	}
}

161 
	$wrôe_öå
(
ide_hwif
 *
hwif
){

162 if(
	`wö_ªsu…
(
hwif
)){

163 
	`as£π
(0);

165 
ªque°
 *
cur_rq
 = 
hwif
->cur_rq;

166 if(--
cur_rq
->
cou¡
){

167 
cur_rq
->
buf
 += 512;

169 
	`p‹t_wrôe
(
hwif
->
io_p‹ts
[
SLOT_REG_DATA
], 
cur_rq
->
buf
, 512);

172 
	`ide_íd_ªque°
(
hwif
);

173 
	`ide_do_ªque°
(
cur_rq
->
dev_id
);

174 
	}
}

176 
	$ide_öå
(
úq
, *
_hwif
, 
±_ªgs
 *
ªg
){

177 
	`as£π
(((
ide_hwif
 *)
_hwif
)->
h™dÀr
);

179 ((
ide_hwif
*)
_hwif
)->
	`h™dÀr
(_hwif);

180 
	}
}

184 
ide_drive
 *
	$gë_öfo_±r
(
u16
 
dev_id
){

185 
unô
 = 
	`DEVICE_NR
(
dev_id
);

186 
ch™√l
 = 
	`ch™√l_id
(
dev_id
);

187  &
ide_hwifs
[
ch™√l
].
drive
[
unô
];

188 
	}
}

191 
	$hd_out
(*
io_p‹ts
, 
cmd
, 
drv
, 
lba
, 
cou¡
, *
buf
){

192 
	`ö_byã
(
io_p‹ts
[
SLOT_REG_STATUS
]Ë& 
STATUS_BUSY
Ë
	`›rötf
("@hd_out waiting on IDE controllor's BSY-bit\n");

193 
	`›rötf
("writing IDEÑegisters\n");

196 
lba
 *
lba_°ru
 = (lba *)(&lba);

197 
£À˘
 * sñe˘ = &(
lba_°ru
->select);

198 
£À˘
->
drv
 = drv;

199 
£À˘
->
lba
 = 1;

200 
£À˘
->
bô5
 = sñe˘->
bô7
 = 1;

202 
	`out_byã
(
io_p‹ts
[
SLOT_REG_CONTROL
],0);

204 
	`out_byã
(
io_p‹ts
[
SLOT_REG_FEATURES
], 0);

205 
	`out_byã
(
io_p‹ts
[
SLOT_REG_COUNT
],
cou¡
);

206 
	`out_byã
(
io_p‹ts
[
SLOT_REG_LBA_LOW
],
lba_°ru
->
low
);

207 
	`out_byã
(
io_p‹ts
[
SLOT_REG_LBA_MID
],
lba_°ru
->
middÀ
);

208 
	`out_byã
(
io_p‹ts
[
SLOT_REG_LBA_HIGH
],
lba_°ru
->
high
);

209 
	`out_byã
(
io_p‹ts
[
SLOT_REG_DEVICE
], *(
u8
 *)
£À˘
);

210 
	`out_byã
(
io_p‹ts
[
SLOT_REG_COMMAND
], 
cmd
);

211 
	}
}

214 
	$__°¨t_ªque°
(
ªque°
 *
rq
){

215 
˘æ
;

216 
ide_hwif
 *
hwif
 = &
ide_hwifs
[
	`ch™√l_id
(
rq
->
dev_id
)];

217 if(
rq
->
cmd
 =
READ
){

218 
˘æ
 = 
WIN_READ
;

219 
hwif
->
h™dÀr
 = 
ªad_öå
;

221 if(
rq
->
cmd
 =
WRITE
){

222 
˘æ
 = 
WIN_WRITE
;

223 
hwif
->
h™dÀr
 = 
wrôe_öå
;

225 if(
rq
->
cmd
 =
WIN_IDENTIFY
){

226 
hwif
->
h™dÀr
 = 
idítify_öå
;

227 
˘æ
 = 
WIN_IDENTIFY
;

229 
	`as£π
(0);

232 if(
˘æ
 !
WIN_IDENTIFY
){

233 
rq
->
°¨t
 = 
	`BLK_UNIT
‘q->
dev_id
)->
°¨t_£˘‹
 + 
	`block2£˘‹s
(rq->start);

234 
rq
->
cou¡
 *
BLOCK_SECTORS
;

236 
	`hd_out
(
hwif
->
io_p‹ts
, 
˘æ
, 
	`DEVICE_NR
(
rq
->
dev_id
),rq->
°¨t
,Ñq->
cou¡
,Ñq->
buf
);

239 if(
rq
->
cmd
 =
WRITE
){

240 
i
;

241 
waôög
 = 3000 * 100;

242 
i
 = 0; i < 
waôög
 && 
STATUS_DRQ
 == 0; i++);

243 
	`as£π
(
i
 !
waôög
 && "waiting DRQ changesÅo 1, overtime ");

244 
	`p‹t_wrôe
(
hwif
->
io_p‹ts
[
SLOT_REG_DATA
], 
rq
->
buf
, 512);

248 
	}
}

252 
	$ide_do_ªque°
(
u32
 
dev_id
){

255 
ide_hwif
 *
hwif
 = 
ide_hwifs
 + 
	`ch™√l_id
(
dev_id
);

256 if(!
hwif
->
cur_rq
){

258 
em±y_cou¡
;

259 
	`›rötf
("[E %u] ", 
em±y_cou¡
++);

262 
	`__°¨t_ªque°
(
hwif
->
cur_rq
);

263 
	}
}

265 
ªque°_queue
 * 
	$ide_gë_queue
(
u16
 
dev_id
){

266 
ide_drive
 * 
drive
 = 
	`gë_öfo_±r
(
dev_id
);

267 if(
drive
Ë &drive->
queue
;

269 
	}
}

271 
	$add_ªque°
(
ªque°
 * 
rq
){

272 
dev_id
 = 
rq
->dev_id;

273 
maj‹
 = 
	`MAJOR
(
dev_id
);

274 
ªque°_queue
 *
q
 = 
	`blk_gë_queue
(
dev_id
);

275 
ide_hwif
 * 
hwif
 = 
ide_hwifs
 + 
	`ch™√l_id
(
dev_id
);

277 
	`˛i_push
();

278 
	`li°_add
(&
rq
->
ã¡a˛e
, &
q
->
queue_hód
);

279 
	`Êagi_p›
();

280 if(!
hwif
->
cur_rq
){

281 
hwif
->
cur_rq
 = 
rq
;

282 
blk_devs
[
maj‹
].
	`do_ªque°
(
dev_id
);

284 
	}
}

293 
	$ide_ªad_∑π©i⁄
(
maj‹
, 
drive
){

294 
buf„r_hód
 *
ebr_block
 = 0,

295 *
mbr_block
 = 0;

296 
blk_dev
 *
blkdev
 = &
blk_devs
[
maj‹
];

297 
blk_unô
 **
unôs
 = 
blkdev
->units;

299 if(!
unôs
Ë{ 
	`as£π
(
blkdev
->
unômax
 == 128);

300 
unôs
 = (*)
	`kmÆloc0
(4 * 
blkdev
->
unômax
);

301 
blkdev
->
unôs
 = units;

304 
i
 = 
drive
 * 
blkdev
->
unôcy˛e
;

305 
disk_devid
 = 
	`MKDEV
(
maj‹
, 
i
);

306 
u16
 *
disk_öfo
 = 
	`ide_idítify
(
disk_devid
);

307 
u32
 
disk_£˘‹s
 = *(u32 *)(
disk_öfo
+60);

310 if(!
unôs
[
i
])

311 
unôs
[
i
] = 
	`kmÆloc0
((
blk_unô
));

312 
unôs
[
i
]->
°¨t_£˘‹
 = 0;

313 
unôs
[
i
]->
tŸÆ_£˘‹s
 = 
disk_£˘‹s
;

314 
unôs
[
i
]->
h™zi
 = 
åue
;

315 
	`ªgi°î_blkunô
–
unôs
[
i
], 
disk_devid
 );

317 
mbr_block
 = 
	`mm≠_disk
(
disk_devid
, 0); 
	`a§t
(mbr_block);

318 *
mbr
 = 
mbr_block
->
d©a
;

320 
∑πôi⁄
 *
dp
 = (*)(
mbr
 + 446);

321 
ebr_lba
 = 0;

323 
i
 = 0; i <=3; i++){

324 
uid
 = 
i
 + 64*
drive
 + 1;

325 if(
dp
[
i
].
°¨t_£˘‹
 == 0)

327 if(!
unôs
[
uid
])

328 
unôs
[
uid
] = 
	`kmÆloc
–(
blk_unô
) );

329 
unôs
[
uid
]->
°¨t_£˘‹
 = 
dp
[
i
].start_sector;

330 
unôs
[
uid
]->
tŸÆ_£˘‹s
 = 
dp
[
i
].total_sectors;

331 
unôs
[
uid
]->
hŸabÀ
 = 0;

333 if(
dp
[
i
].
sys_id
 =
SYSID_EXTEND
) {

334 
ebr_lba
 = 
dp
[
i
].
°¨t_£˘‹
;

335 
unôs
[
uid
]->
h™zi
 = 
åue
;

337 
unôs
[
uid
]->
h™zi
 = 
Ál£
;

338 
	`ªgi°î_blkunô
(
unôs
[
uid
], 
	`MKDEV
(
maj‹
, uid));

343 
√xt_ebr
:

344 if(
ebr_lba
 =0Ë
d⁄e
; 
	`›rötf
("\nreadÇextÉbr");

346 if(
ebr_block
Ë
	`munm≠_disk
(ebr_block);

347 
ebr_block
 = 
	`mm≠_disk
(
disk_devid
, 
	`lba2block
(
ebr_lba
) );

348 
dp
 = (*)(
ebr_block
->
d©a
 + 446);

349 
uid
 = 
i
 + 64 * 
drive
 + 1;

350 
	`as£π
(
dp
[0].
°¨t_£˘‹
);

352 if(!
unôs
[
uid
])

353 
unôs
[
uid
] = 
	`kmÆloc
–(
blk_unô
));

354 
unôs
[
uid
]->
°¨t_£˘‹
 = 
ebr_lba
 + 
dp
[0].start_sector;

355 
unôs
[
uid
]->
tŸÆ_£˘‹s
 = 
dp
[0].total_sectors;

358 
	`ªgi°î_blkunô
–
unôs
[
uid
], 
	`MKDEV
(
maj‹
, uid) );

359 if(
dp
[1].
°¨t_£˘‹
Ë
ebr_lba
 += dp[1].start_sector;

360 
ebr_lba
 = 0;

361 
i
++;

362 
√xt_ebr
;

363 
d⁄e
:

364 if(
ebr_block
Ë
	`munm≠_disk
(ebr_block);

365 if(
mbr_block
Ë
	`munm≠_disk
(mbr_block);

367 
	}
}

369 
	$ide_öô
(){

370 
	`ªgi°î_queue_gëãr
(3, 
ide_gë_queue
, 0);

371 
	`ªgi°î_queue_gëãr
(22, 
ide_gë_queue
, 0);

372 
i
 = 0; i < 
MAX_HWIFS
; i++){

373 
j
 = 0; j <=1; j++){

374 
	`INIT_LIST_HEAD
(&
ide_hwifs
[
i
].
drive
[
j
].
queue
.
queue_hód
);

378 
ide_hwifs
[0].
drive
[0].
¥e£¡
 = 1;

379 
ide_hwifs
[0].
drive
[1].
¥e£¡
 = 1;

380 
	`ªque°_úq
(0xe, 
ide_öå
, 
SA_INTERRUPT
, 
ide_hwifs
);

381 
úq_desc
[0xe].
°©us
 &~
IRQ_DISABLED
;

383 
blk_devs
[3].
do_ªque°
 = 
ide_do_ªque°
;

384 
blk_devs
[3].
add_ªque°
 =ádd_request;

385 
blk_devs
[3].
globÆ2loˇl
 = global2local;

387 
blk_devs
[22].
do_ªque°
 = 
ide_do_ªque°
;

388 
blk_devs
[22].
add_ªque°
 =ádd_request;

389 
blk_devs
[22].
globÆ2loˇl
 = global2local;

390 
blk_devs
[3].
unômax
 = 128;

391 
blk_devs
[3].
unôcy˛e
 = 64;

392 
blk_devs
[22].
unômax
 = 128;

393 
blk_devs
[22].
unôcy˛e
 = 64;

395 
	}
}

400 
ªque°
 * 
	$ide_gë_√xt_rq
(
ide_hwif
 *
hwif
){

401 
ªque°
 *
cur_rq
 = 
hwif
->cur_rq;

402 if(
cur_rq
){

403 
ªque°_queue
 *
curq
 = 
	`ide_gë_queue
(
cur_rq
->
dev_id
);

404 if(!
	`li°_mìt_èû
(&
curq
->
queue_hód
, &
cur_rq
->
ã¡a˛e
))

405  
	`ã¡a˛e2ªque°
(
cur_rq
->
ã¡a˛e
.
√xt
);

410 
i
 = 0; i <=1; i++){

411 if(
hwif
->
drive
[
i
].
¥e£¡
 =
Ál£
) ;

412 
ªque°_queue
 * 
q
 = &
hwif
->
drive
[
i
].
queue
;

413 if(
	`li°_em±y
(&
q
->
queue_hód
)) ;

414 
ªque°
 * 
rq
 = 
	`ã¡a˛e2ªque°
(
q
->
queue_hód
.
√xt
);

415 if(
rq
 !
cur_rq
) Ñq;

418 
	}
}

	@drivers/net/8139.c

9 
	~<löux/pci.h
>

10 
	~<asm/io.h
>

11 
	~<löux/√tdevi˚.h
>

12 
	~<úq.h
>

13 
	~<löux/¶ab.h
>

14 
	~<mm.h
>

15 
	~<löux/skbuff.h
>

16 
	~<löux/bh.h
>

17 
	#PRIV
(
√tdev
Ë((
πl8139_¥iv©e
*)“ëdev->
¥iv©e
))

	)

18 
	#__¥iv
(
√tdev
Ë((
πl8139_¥iv©e
 *Íëdev->
¥iv©e
)

	)

19 
	#ETH_MIN_LEN
 60

	)

20 
	#NUM_TX_DESC
 4

	)

21 
	#TX_BUF_SIZE
 (1762 & ~3Ë

	)

24 
	sπl8139_¥iv©e
{

25 
pci_dev
 *
	mpcidev
;

26 *
	mmmio_addr
;

27 
	mªgs_Àn
;

28 
	mtx_Êags
;

29 
	mtou£_desc
;

30 
	mbsy_desc
;

31 *
	mtx_bufs
[
NUM_TX_DESC
];

32 *
	mtx_buf
;

33 *
	mtx_buf_dma
;

34 
u16
 
	mtxbuf_size
;

37 
u8
 *
	mrx_rög
;

38 *
	mrx_rög_dma
;

39 
	mrx_rög_Àn
;

40 
	mcurs‹_r
;

45 
ölöe
 
	$RTL_maskb
(
√t_devi˚
 *
√tdev
, 
off£t
, 
mask
){

46 
	`maskb
(
√tdev
->
ba£_addr
 + 
off£t
, 
mask
);

47 
	}
}

48 
ölöe
 
	$RTL_maskw
(
√t_devi˚
 *
√tdev
, 
off£t
, 
mask
){

49 
	`maskw
(
√tdev
->
ba£_addr
 + 
off£t
, 
mask
);

50 
	}
}

51 
ölöe
 
	$RTL_maskl
(
√t_devi˚
 *
√tdev
, 
off£t
, 
mask
){

52 
	`maskl
(
√tdev
->
ba£_addr
 + 
off£t
, 
mask
);

53 
	}
}

56 
ölöe
 
	$RTL_ªadb
(
√t_devi˚
 *
√tdev
, 
off£t
){

57  
	`ªadb
(
√tdev
->
ba£_addr
 + 
off£t
);

58 
	}
}

59 
ölöe
 
	$RTL_ªadw
(
√t_devi˚
 *
√tdev
, 
off£t
){

60  
	`ªadw
(
√tdev
->
ba£_addr
 + 
off£t
);

61 
	}
}

62 
ölöe
 
	$RTL_ªadl
(
√t_devi˚
 *
√tdev
, 
off£t
){

63  
	`ªadl
(
√tdev
->
ba£_addr
 + 
off£t
);

64 
	}
}

68 
ölöe
 
	$RTL_wrôeb
(
√t_devi˚
 *
√tdev
, 
off£t
, 
vÆue
){

69 
	`wrôeb
(
√tdev
->
ba£_addr
 + 
off£t
, 
vÆue
);

70 
	}
}

71 
ölöe
 
	$RTL_wrôew
(
√t_devi˚
 *
√tdev
, 
off£t
, 
vÆue
){

72 
	`wrôew
(
√tdev
->
ba£_addr
 + 
off£t
, 
vÆue
);

73 
	}
}

74 
ölöe
 
	$RTL_wrôñ
(
√t_devi˚
 *
√tdev
, 
off£t
, 
vÆue
){

75 
	`wrôñ
(
√tdev
->
ba£_addr
 + 
off£t
, 
vÆue
);

76 
	}
}

78 
	sùc⁄fig
{

79 
u8
 
	mmac
[7];

80 
u32
 
	mù
;

81 
u32
 
	mg©eway_ù
;

82 
u32
 
	mùmask
;

83 } 
	gùc⁄figs
[] ={

86 
MAKE_IP
(192, 168, 0, 9),

87 
MAKE_IP
(192, 168, 0, 1),

92 
MAKE_IP
(192, 168, 1, 9),

93 
MAKE_IP
(192, 168, 1, 1),

99 
pci_devi˚_id
 
	gπl8139_id_tbl
[] = {

124 
	eRTL8139_ªgi°îs
 {

125 
	mMAC0
 = 0,

126 
	mMAR0
 = 8,

127 
	mTxSètus0
 = 0x10,

128 
	mTxAddr0
 = 0x20,

129 
	mRBSTART
 = 0x30,

130 
	mChùCmd
 = 0x37,

131 
	mCurs‹ToRód
 = 0x38,

132 
	mCurs‹ToRecv
 = 0x3A,

133 
	mIMR
 = 0x3C,

134 
	mISR
 = 0x3E,

135 
	mTxC⁄fig
 = 0x40,

136 
	mRxC⁄fig
 = 0x44,

137 
	mTimî
 = 0x48,

138 
	mRxMis£d
 = 0x4C,

139 
	mCfg9346
 = 0x50,

140 
	mC⁄fig0
 = 0x51,

141 
	mC⁄fig1
 = 0x52,

142 
	mTimîI¡
 = 0x54,

143 
	mMedüSètus
 = 0x58,

144 
	mC⁄fig3
 = 0x59,

145 
	mC⁄fig4
 = 0x5A,

146 
	mH…Clk
 = 0x5B,

147 
	mMu…iI¡r
 = 0x5C,

148 
	mTxSumm¨y
 = 0x60,

149 
	mBasicModeCål
 = 0x62,

150 
	mBasicModeSètus
 = 0x64,

151 
	mNWayAdvît
 = 0x66,

152 
	mNWayLPAR
 = 0x68,

153 
	mNWayEx∑nsi⁄
 = 0x6A,

155 
	mFIFOTMS
 = 0x70,

156 
	mCSCR
 = 0x74,

157 
	mPARA78
 = 0x78,

158 
	mFœshReg
 = 0xD4,

159 
	mPARA7c
 = 0x7c,

160 
	mC⁄fig5
 = 0xD8,

163 
	eChùCmdBôs
 {

164 
	mCmdRe£t
 = 0x10,

165 
	mCmdRxEnb
 = 0x08,

166 
	mCmdTxEnb
 = 0x04,

167 
	mRxBufEm±y
 = 0x01,

172 
	eI¡rSètusBôs
 {

173 
	mPCIEº
 = 0x8000,

174 
	mPCSTimeout
 = 0x4000,

175 
	mCabLíChg
 = 0x2000,

176 
	mRxFIFOOvî
 = 0x40,

177 
	mRxUndîrun
 = 0x20,

178 
	mRxOvîÊow
 = 0x10,

179 
	mTxEº
 = 0x08,

180 
	mTxOK
 = 0x04,

181 
	mRxEº
 = 0x02,

182 
	mRxOK
 = 0x01,

184 
	mRxAckBôs
 = 
RxFIFOOvî
 | 
RxOvîÊow
 | 
RxOK
,

187 
	eTxSètusBôs
 {

188 
	mTxHo°Owns
 = 0x2000,

189 
	mTxUndîrun
 = 0x4000,

190 
	mTxSètOK
 = 0x8000,

191 
	mTxOutOfWödow
 = 0x20000000,

192 
	mTxAb‹ãd
 = 0x40000000,

193 
	mTxC¨rõrLo°
 = 0x80000000,

195 
	eRxSètusBôs
 {

196 
	mRxMu…iˇ°
 = 0x8000,

197 
	mRxPhysiˇl
 = 0x4000,

198 
	mRxBrﬂdˇ°
 = 0x2000,

199 
	mRxBadSymbﬁ
 = 0x0020,

200 
	mRxRu¡
 = 0x0010,

201 
	mRxTooL⁄g
 = 0x0008,

202 
	mRxCRCEº
 = 0x0004,

203 
	mRxBadAlign
 = 0x0002,

204 
	mRxSètusOK
 = 0x0001,

208 
	erx_mode_bôs
 {

209 
	mAc˚±Eº
 = 0x20,

210 
	mAc˚±Ru¡
 = 0x10,

211 
	mAc˚±Brﬂdˇ°
 = 0x08,

212 
	mAc˚±Mu…iˇ°
 = 0x04,

213 
	mAc˚±MyPhys
 = 0x02,

214 
	mAc˚±AŒPhys
 = 0x01,

218 
	etx_c⁄fig_bôs
 {

220 
	mTxIFGShi·
 = 24,

221 
	mTxIFG84
 = (0 << 
TxIFGShi·
),

222 
	mTxIFG88
 = (1 << 
TxIFGShi·
),

223 
	mTxIFG92
 = (2 << 
TxIFGShi·
),

224 
	mTxIFG96
 = (3 << 
TxIFGShi·
),

226 
	mTxLo›Back
 = (1 << 18) | (1 << 17),

227 
	mTxCRC
 = (1 << 16),

228 
	mTxCÀ¨Abt
 = (1 << 0),

229 
	mTxDMAShi·
 = 8,

230 
	mTxRëryShi·
 = 4,

232 
	mTxVîsi⁄Mask
 = 0x7C800000,

235 
	eRxC⁄figBôs
 {

237 
	mRxCfgFIFOShi·
 = 13,

238 
	mRxCfgFIFON⁄e
 = (7 << 
RxCfgFIFOShi·
),

241 
	mRxCfgDMAShi·
 = 8,

242 
	mRxCfgDMAU∆imôed
 = (7 << 
RxCfgDMAShi·
),

245 
	mRxCfgRcv8K
 = 0,

246 
	mRxCfgRcv16K
 = (1 << 11),

247 
	mRxCfgRcv32K
 = (1 << 12),

248 
	mRxCfgRcv64K
 = (1 << 11) | (1 << 12),

251 
	mRxNoWøp
 = (1 << 7),

253 
ölöe
 
	$πl8139_ª£t
(
√t_devi˚
 *
√tdev
){

254 
	`RTL_wrôeb
(
√tdev
, 
ChùCmd
, 
CmdRe£t
);

255 
i
 = 0; i < 1000; i++){

256 if((
	`RTL_ªadb
(
√tdev
, 
ChùCmd
Ë& 
CmdRe£t
) == 0) ;

257 
	`udñay
(10);

259 
	`•ö
("8139Ñeset failed");

261 
	}
}

272 
	$πl8139_°›
(
√t_devi˚
 *
√tdev
){

274 
	}
}

276 #¥agm®
∑ck
(
push
)

277 #¥agm®
∑ck
(1)

278 
	sTxSètusReg
{

280 
	mvÆue
;

282 
	msize
: 13;

283 
	mOWN
: 1;

284 
	mTUN
: 1;

285 
	mTOK
: 1;

286 
	mthªshﬁd
: 6;

287 
	mª£rved
: 2;

288 
	mncc
: 4;

289 
	mCDH
: 1;

290 
	mOWC
: 1;

291 
	mTABT
: 1;

292 
	mCRS
: 1;

297 
	søw_∑ckage
{

298 
u16
 
	mrx_°©us
;

299 
u16
 
	msize
;

300 
	md©a
[0];

302 #¥agm®
∑ck
(
p›
)

304 
	$öfo_ªgs
(
√t_devi˚
 *
√tdev
){

305 
u16
 
öå_°©us
 = 
	`RTL_ªadw
(
√tdev
, 
ISR
);

306 
u32
 
tx_°©us
 = 
	`RTL_ªadl
(
√tdev
, 
TxSètus0
);

307 
	`›rötf
("TxSètus0: %x, ISR: %x, IMR: %x \n", 
tx_°©us
, 
öå_°©us
, \

308 
	`RTL_ªadw
(
√tdev
, 
IMR
));

309 
	}
}

311 
	$tx_bŸtomhÆf
–*
_√tdev
){

312 
√t_devi˚
 *
√tdev
 = 
_√tdev
;

313 
	`nic_wake_queue
(
√tdev
);

317 
	}
}

324 
	$⁄_tx
(
√t_devi˚
 *
√tdev
){

325 
	`›rötf
(" ------!T!------ ");

326 
πl8139_¥iv©e
 *
¥iv©e
 = 
√tdev
->private;

327 
‰ozí_desc
 = 
¥iv©e
->
tou£_desc
 + 4;

328 
	`as£π
–
¥iv©e
->
bsy_desc
 < 
‰ozí_desc
);

330 
TxSètusReg
 
TSR
;

331 
vdesc
 = 
¥iv©e
->
bsy_desc
;

332 
¥iv©e
->
bsy_desc
 !
‰ozí_desc
){

333 
ªÆdesc
 = 
¥iv©e
->
bsy_desc
 % 
NUM_TX_DESC
;

334 
TSR
.
vÆue
 = 
	`RTL_ªadl
(
√tdev
, 
TxSètus0
 + 
ªÆdesc
 * 4);

335 if(!
TSR
.
TOK
 && !TSR.
TUN
 && !TSR.
TABT
){

336 if(
vdesc
 =
¥iv©e
->
bsy_desc
){

337 
√tdev
->
debug
.
cou¡_dr›_tok
++;

338 
	`›rötf
(" T\\ ");

343 if(
TSR
.
TOK
){

347 
	`›rötf
(" TSR NOT TOK: %u, bsy_desc: %u,Åou£_desc:%u\n", 
TSR
.
vÆue
, 
¥iv©e
->
bsy_desc
,Öriv©e->
tou£_desc
);

348 
	`•ö
("spin");

351 
¥iv©e
->
bsy_desc
 ++;

355 if(
¥iv©e
->
bsy_desc
 -Öriv©e->
tou£_desc
 == 4){

358 
	`m¨k_bh
(
√tdev
->
⁄_tx_bh
);

360 
	}
}

363 
¥o˚ss_rx_queue
–
√t_devi˚
 *
√tdev
);

364 
	$rx_bŸtomhÆf
–*
_√tdev
){

365 
	`¥o˚ss_rx_queue
(
_√tdev
);

367 
	}
}

368 
	$⁄_rx
(
√t_devi˚
 *
√tdev
){

371 
	`›rötf
(" !R! ");

373 
πl8139_¥iv©e
 *
¥iv©e
 = 
√tdev
->private;

374 !–
	`RTL_ªadb
(
√tdev
, 
ChùCmd
Ë& 
RxBufEm±y
 )){

375 
øw_∑ckage
 *
øw
 = (*)(
¥iv©e
->
rx_rög
 +Öriv©e->
curs‹_r
);

378 
d©a_size
 = 
øw
->
size
 - 4;

379 
sk_buff
 *
skb
 = 
	`dev_Æloc_skb
(
d©a_size
 );

380 
skb
->
dev
 = 
√tdev
;

381 
	`mem˝y
(
skb
->
ëhhdr
, 
øw
->
d©a
, 
d©a_size
);

382 
	`LL2_A
(&
√tdev
->
rx_queue
, 
skb
);

383 
	`m¨k_bh
(
√tdev
->
⁄_rx_bh
);

387 
¥iv©e
->
curs‹_r
 = (¥iv©e->curs‹_∏+ 
øw
->
size
 + 4 + 3) & ~3;

388 if(
¥iv©e
->
curs‹_r
 >Öriv©e->
rx_rög_Àn
)

389 
¥iv©e
->
curs‹_r
 %¥iv©e->
rx_rög_Àn
;

390 
	`RTL_wrôew
(
√tdev
, 
Curs‹ToRód
, 
¥iv©e
->
curs‹_r
 - 0x10);

393 
	}
}

399 
	$⁄_öå
(
úq
, *
dev
, 
±_ªgs
 *
ªgs
){

400 
√t_devi˚
 *
√tdev
 = 
dev
;

405 
i§
 = 
	`RTL_ªadw
(
√tdev
, 
ISR
);

406 
	`RTL_wrôew
(
√tdev
, 
ISR
, 0xffff);

409 if(
i§
 & 
TxOK
){

410 
	`⁄_tx
(
√tdev
);

412 if(
i§
 & 
TxEº
){

413 
	`•ö
("TxErr");

415 if(
i§
 & 
RxOK
){

416 
	`⁄_rx
–
√tdev
 );

418 if(
i§
 & 
RxEº
){

419 
	`•ö
("RxErr");

421 if(
i§
 & 
RxOvîÊow
){

422 
	`•ö
( "RxOverflow");

424 if(
i§
 & 
RxUndîrun
){

425 
	`•ö
( "CARP is written but Rx buffer isÉmpty, orÜink status changed");

427 if(
i§
 &
RxOvîÊow
){

428 
	`›rötf
("Rx FIFIO Overflow, ignoreánd clear it\n");

430 if(
i§
 & 
CabLíChg
){

431 
	`•ö
("Cable Length Change");

433 if(
i§
 & 
PCSTimeout
){

434 
	`•ö
("PCSTimeout");

436 if(
i§
 & 
PCIEº
){

437 
	`•ö
("PCIErr");

439 if(
i§
 == 0)

441 
	`›rötf
("w¨nög,á¿úq o‡8139 wôh zîÿISR. sì ISR:%x \n", 
i§
);

444 
	}
}

452 
	$πl8139_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
√tdev
){

453 
πl8139_¥iv©e
 * 
¥iv©e
 = 
√tdev
->private;

454 
	`as£π
(
¥iv©e
->
bsy_desc
 >Öriv©e->
tou£_desc
);

455 
	`as£π
–
	`˛i_Æªady
() );

457 
ªÆdesc
 = 
¥iv©e
->
tou£_desc
 % 
NUM_TX_DESC
;

458 if(
skb
->
pkgsize
 < 
TX_BUF_SIZE
){

460 
size
 = 
skb
->
pkgsize
 < 60 ? 60 : skb->pkgsize;

461 
	`mem£t
–
	`PRIV
(
√tdev
)->
tx_bufs
[
ªÆdesc
], 0xbb, 
size
 );

462 
	`mem˝y
–
	`PRIV
(
√tdev
)->
tx_bufs
[
ªÆdesc
], 
skb
->
ëhhdr
, skb->
pkgsize
 );

463 
	`dev_‰ì_skb
(
skb
);

465 
TxSètusReg
 
t§
 = {
vÆue
: 0};

466 
t§
.
size
 = size;

467 
t§
.
OWN
 = 0;

468 
t§
.
thªshﬁd
 = 0;

470 
	`RTL_wrôñ
(
√tdev
, 
TxSètus0
 + 
ªÆdesc
 * 4, 
t§
.
vÆue
);

472 
	`as£π
("ÅooÜargeÖackage size ");

473 
¥iv©e
->
tou£_desc
 ++;

479 if(
¥iv©e
->
bsy_desc
 =¥iv©e->
tou£_desc
)  -1;

490 
	}
}

492 
boﬁ
 
	$πl8139_tx_busy
(
√t_devi˚
 *
√tdev
){

493  
	`PRIV
(
√tdev
)->
tou£_desc
 =PRIV“ëdev)->
bsy_desc
;

494 
	}
}

497 
	$πl8139_›í
(
√t_devi˚
 *
√tdev
){

498 
πl8139_¥iv©e
 *
¥iv©e
 = 
√tdev
->private;

499 
¥iv©e
->
rx_rög
 = 
	`kmÆloc2
((32 + 2Ë* 1024, 
__GFP_DMA
);

500 
¥iv©e
->
rx_rög_dma
 =Öriv©e->
rx_rög
 - 
PAGE_OFFSET
;

501 
¥iv©e
->
tx_buf
 = 
	`kmÆloc2
–
TX_BUF_SIZE
 * 
NUM_TX_DESC
, 
__GFP_DMA
);

502 
¥iv©e
->
tx_buf_dma
 =Öriv©e->
tx_buf
 - 
PAGE_OFFSET
;

503 
i
 = 0; i < 
NUM_TX_DESC
; i++){

504 
¥iv©e
->
tx_bufs
[
i
] =Öriv©e->
tx_buf
 + i * 
TX_BUF_SIZE
;

507 
¥iv©e
->
bsy_desc
 = 4;

508 
¥iv©e
->
tou£_desc
 = 0;

510 
√tdev
->
Êags
 = 0;

511 
√tdev
->
tx_cou¡
 =Çëdev->
rx_cou¡
 = 0;

512 
	`mem£t
(&
√tdev
->
debug
, 0, (netdev->debug));

513 
¥iv©e
->
curs‹_r
 = 0;

514 
¥iv©e
->
rx_rög_Àn
 = 32 * 1024;

516 
	`πl8139_ª£t
(
√tdev
);

517 
	`RTL_wrôeb
(
√tdev
, 
ChùCmd
, 
CmdRxEnb
 | 
CmdTxEnb
);

518 
	`RTL_wrôñ
(
√tdev
, 
RBSTART
, ()
	`__¥iv
“ëdev)->
rx_rög_dma
);

519 
	`RTL_wrôñ
(
√tdev
, 
RxC⁄fig
, 
Ac˚±AŒPhys
 | 
Ac˚±MyPhys
 | 
Ac˚±Brﬂdˇ°
 | 
Ac˚±Mu…iˇ°
 |
RxNoWøp
 | 
RxCfgRcv32K
);

521 
	`ªque°_úq
(
√tdev
->
úq
, 
⁄_öå
, 
SA_INTERRUPT
,Çetdev);

522 
úq_desc
[()
√tdev
->
úq
].
°©us
 &~
IRQ_DISABLED
;

523 
	`RTL_wrôew
(
√tdev
, 
IMR
, 0xffff);

527 
i
 = 0; i < 
NUM_TX_DESC
; i++){

528 
	`RTL_wrôñ
(
√tdev
, 
TxAddr0
 + 
i
*4, ()(
¥iv©e
->
tx_buf_dma
 + 
TX_BUF_SIZE
*i));

530 
√tdev
->
⁄_tx_bh
 = 
	`Æloc_bh
(
tx_bŸtomhÆf
,Çetdev);

531 
√tdev
->
⁄_rx_bh
 = 
	`Æloc_bh
(
rx_bŸtomhÆf
,Çetdev);

532 
√tdev
->
tx_queue
.
roŸ
 =Çëdev->tx_queue.
èû
 = 0;

533 
√tdev
->
rx_queue
.
roŸ
 =Çëdev->rx_queue.
èû
 = 0;

535 
	}
}

538 
	$πl8139_öô_⁄e
(
pci_dev
 *
pcidev
, c⁄° 
pci_devi˚_id
 *
id
){

539 
	`pci_íabÀ_devi˚
(
pcidev
);

540 
	`pci_£t_ma°î
(
pcidev
);

541 
√t_devi˚
 *
√tdev
 = 
	`kmÆloc2
( (net_device), 0 );

543 
pcidev
->
c‹e
 = 
√tdev
;

544 
√tdev
->
pcidev
 =Öcidev;

545 
	`ªgi°î_nic
(
√tdev
);

546 
√tdev
->
›í
 = 
πl8139_›í
;

547 
√tdev
->
°›
 = 
πl8139_°›
;

548 
√tdev
->
tx_busy
 = 
πl8139_tx_busy
;

549 
√tdev
->
°¨t_xmô
 = 
πl8139_°¨t_xmô
;

551 
	`›rötf
("úqÖö: %u ,Üöe: %u\n", 
pcidev
->
úqpö
,Öcidev->
úqlöe
);

553 
√tdev
->
ba£_addr
 = ()–
pcidev
->
addªss
[1] & ~0xfË- 
PAGE_OFFSET
;

554 
	`›rötf
("ba£_addr:%x\n", 
√tdev
->
ba£_addr
);

556 
√tdev
->
úq
 = 
pcidev
->
úqlöe
;

557 
mac
[2] = {0};

558 
mac
[0] = 
	`RTL_ªadl
(
√tdev
, 0);

559 
mac
[1] = 
	`RTL_ªadl
(
√tdev
, 4);

560 
	`mem˝y
(
√tdev
->
mac
, (*)mac, 6);

561 
√tdev
->
mac
[6] = 0;

564 
πl8139_¥iv©e
 *
¥iv©e
 = 
	`kmÆloc2
( (rtl8139_private), 0);

565 
¥iv©e
->
pcidev
 =Öcidev;

566 
√tdev
->
¥iv©e
 =Örivate;

568 
i
 = 0; i <= 2; i ++){

569 
	`as£π
(
i
 != 2);

570 if(
	`memcmp
((*)
√tdev
->
mac
, 
ùc⁄figs
[
i
].mac, 6) == 0){

572 
√tdev
->
ùmask
 = 
ùc⁄figs
[
i
].ipmask;

573 
√tdev
->
g©eway_ù
 = 
ùc⁄figs
[
i
].gateway_ip;

574 
√tdev
->
ù
 = 
ùc⁄figs
[
i
].ip;

583 
	}
}

585 
pci_drivî
 
	gπl8139_drivî
 = {

586 
id_èbÀ
: 
πl8139_id_tbl
,

587 
¥obe
:
πl8139_öô_⁄e
,

590 
	$ªgi°î_πl8139_drivî
(){

591 
	`pci_ªgi°î_drivî
(&
πl8139_drivî
);

592 
	}
}

596 
BOOLEAN
 
	$PackëOK
–
PPACKETHEADER
 
pPktHdr
 )

598 
BOOLEAN
 
BadPackë
 = 
pPktHdr
->
RUNT
 ||

599 
pPktHdr
->
LONG
 ||

600 
pPktHdr
->
CRC
 ||ÖPktHdr->
FAE
;

601 if––!
BadPackë
 ) && ( 
pPktHdr
->
ROK
 ) )

603 i‡–(
pPktHdr
->
PackëLígth
 > 
RX_MAX_PACKET_LENGTH
 ) ||

604 (
pPktHdr
->
PackëLígth
 < 
RX_MIN_PACKET_LENGTH
 )Ë(
FALSE
);

605 
PackëRe˚ivedGood
++;

606 
ByãRe˚ived
 +
pPktHdr
->
PackëLígth
;

607  
TRUE
 ;

609  
FALSE
;

610 
	}
}

611 
BOOLEAN
 
	$RxI¡îru±H™dÀr
()

613 
TmpCMD
;

614 
PktLígth
;

615 *
pIncomePackë
, *
RxRódPå
;

616 
PPACKETHEADER
 
pPackëHódî
;

617 
TRUE
)

619 
TmpCMD
 = 
	`öp‹tb
(
IOBa£
 + 
CR
);

620 i‡(
TmpCMD
 & 
CR_BUFE
) ;

623 
RxRódPå
 = 
RxBuf„r
 + 
RxRódPåOff£t
;

624 
pPackëHódî
 = (
PPACKETHEADER
)
RxRódPå
;

625 
pIncomePackë
 = 
RxRódPå
 + 4;

626 
PktLígth
 = 
pPackëHódî
->
PackëLígth
;

628 i‡–
	`PackëOK
–
pPackëHódî
 ) )

630 i‡–(
RxRódPåOff£t
 + 
PktLígth
Ë> 
RX_BUFFER_SIZE
 )

632 
	`mem˝y
–
RxBuf„r
 + 
RX_BUFFER_SIZE
 , RxBuffer,

633 (
RxRódPåOff£t
 + 
PktLígth
 - 
RX_BUFFER_SIZE
) );

635 
	`C›yPackë
(
pIncomePackë
,
PktLígth
 - 4);

637 
RxRódPåOff£t
 = (RxRódPåOff£à+ 
PktLígth
 + 4 + 3Ë& 
RX_READ_POINTER_MASK
;

640 
	`ouç‹t
–
IOBa£
 + 
CAPR
, 
RxRódPåOff£t
 - 0x10);

644 
	`Re£tRx
();

647 
TmpCMD
 = 
	`öp‹tb
(
IOBa£
 + 
CR
);

649 !(
TmpCMD
 & 
CR_BUFE
));

651  (
TRUE
);

653 
	}
}

	@drivers/net/e1000.c

1 
	~<löux/pci.h
>

2 
	~<asm/io.h
>

3 
	~<löux/√tdevi˚.h
>

4 
	~<úq.h
>

5 
	~<löux/¶ab.h
>

6 
	~<mm.h
>

7 
	~<löux/skbuff.h
>

9 
	#INTEL_VEND
 0x8086

10 
	#E1000_DEV
 0x100E

11 
	#E1000_I217
 0x153A

12 
	#E1000_82577LM
 0x10EA

13 

	)

16 
	#REG_CTRL
 0x0000

	)

17 
	#REG_STATUS
 0x0008

	)

18 
	#REG_EEPROM
 0x0014

	)

19 
	#REG_CTRL_EXT
 0x0018

	)

20 
	#REG_IMASK
 0x00D0

	)

21 
	#REG_RCTRL
 0x0100

	)

22 
	#REG_RXDESCLO
 0x2800

	)

23 
	#REG_RXDESCHI
 0x2804

	)

24 
	#REG_RXDESCLEN
 0x2808

	)

25 
	#REG_RXDESCHEAD
 0x2810

	)

26 
	#REG_RXDESCTAIL
 0x2818

	)

28 
	#REG_TCTRL
 0x0400

	)

29 
	#REG_TXDESCLO
 0x3800

	)

30 
	#REG_TXDESCHI
 0x3804

	)

31 
	#REG_TXDESCLEN
 0x3808

	)

32 
	#REG_TXDESCHEAD
 0x3810

	)

33 
	#REG_TXDESCTAIL
 0x3818

	)

35 
	#REG_RDTR
 0x2820

36 
	#REG_RXDCTL
 0x3828

37 
	#REG_RADV
 0x282C

38 
	#REG_RSRPD
 0x2C00

39 

	)

40 
	#REG_TIPG
 0x0410

41 
	#ECTRL_SLU
 0x40

42 

	)

43 
	#RCTL_EN
 (1 << 1)

44 
	#RCTL_SBP
 (1 << 2)

45 
	#RCTL_UPE
 (1 << 3)

46 
	#RCTL_MPE
 (1 << 4)

47 
	#RCTL_LPE
 (1 << 5)

48 
	#RCTL_LBM_NONE
 (0 << 6)

49 
	#RCTL_LBM_PHY
 (3 << 6)

50 
	#RTCL_RDMTS_HALF
 (0 << 8)

51 
	#RTCL_RDMTS_QUARTER
 (1 << 8)

52 
	#RTCL_RDMTS_EIGHTH
 (2 << 8)

53 
	#RCTL_MO_36
 (0 << 12)

54 
	#RCTL_MO_35
 (1 << 12)

55 
	#RCTL_MO_34
 (2 << 12)

56 
	#RCTL_MO_32
 (3 << 12)

57 
	#RCTL_BAM
 (1 << 15)

58 
	#RCTL_VFE
 (1 << 18)

59 
	#RCTL_CFIEN
 (1 << 19)

60 
	#RCTL_CFI
 (1 << 20)

61 
	#RCTL_DPF
 (1 << 22)

62 
	#RCTL_PMCF
 (1 << 23)

63 
	#RCTL_SECRC
 (1 << 26)

64 

	)

66 
	#RCTL_BSIZE_256
 (3 << 16)

	)

67 
	#RCTL_BSIZE_512
 (2 << 16)

	)

68 
	#RCTL_BSIZE_1024
 (1 << 16)

	)

69 
	#RCTL_BSIZE_2048
 (0 << 16)

	)

70 
	#RCTL_BSIZE_4096
 ((3 << 16Ë| (1 << 25))

	)

71 
	#RCTL_BSIZE_8192
 ((2 << 16Ë| (1 << 25))

	)

72 
	#RCTL_BSIZE_16384
 ((1 << 16Ë| (1 << 25))

	)

75 
	#CMD_EOP
 (1 << 0)

76 
	#CMD_IFCS
 (1 << 1)

77 
	#CMD_IC
 (1 << 2)

78 
	#CMD_RS
 (1 << 3)

79 
	#CMD_RPS
 (1 << 4)

80 
	#CMD_VLE
 (1 << 6)

81 
	#CMD_IDE
 (1 << 7)

82 

	)

85 
	#TCTL_EN
 (1 << 1)

86 
	#TCTL_PSP
 (1 << 3)

87 
	#TCTL_CT_SHIFT
 4

88 
	#TCTL_COLD_SHIFT
 12

89 
	#TCTL_SWXOFF
 (1 << 22)

90 
	#TCTL_RTLC
 (1 << 24)

91 

	)

92 
	#TSTA_DD
 (1 << 0)

93 
	#TSTA_EC
 (1 << 1)

94 
	#TSTA_LC
 (1 << 2)

95 
	#LSTA_TU
 (1 << 3)

96 

	)

97 
	#E1000_NUM_RX_DESC
 32

	)

98 
	#E1000_NUM_TX_DESC
 8

	)

100 
	se1000_¥iv©e
{

101 
pci_dev
 *
	mpcidev
;

102 *
	mmmio_addr
;

103 
	mªgs_Àn
;

107 
pci_devi˚_id
 
	ge1000_id_tbl
[] = {

147 
	$tx_bŸtomhÆf
–*
_√tdev
){

150 
	}
}

152 
	$⁄_tx
(
√t_devi˚
 *
√tdev
){

153 
	}
}

156 
	$rx_bŸtomhÆf
–*
_√tdev
){

158 
	}
}

159 
	$⁄_rx
(
√t_devi˚
 *
√tdev
){

160 
	}
}

161 
	$⁄_öå
(
úq
, *
dev
, *
ªgs
){

162 
	}
}

163 
	$e1000_›í
(
√t_devi˚
 *
√tdev
){

165 
	}
}

167 
	$e1000_°›
(
√t_devi˚
 *
√tdev
){

169 
	}
}

170 
	$e1000_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
√tdev
){

172 
	}
}

174 
boﬁ
 
	$e1000_tx_busy
(
√t_devi˚
 *
√tdev
){

175 
	`as£π
(0);

177 
	}
}

179 
	$e1000_öô_⁄e
(
pci_dev
 *
pcidev
, c⁄° 
pci_devi˚_id
 *
id
){

180 
	`pci_íabÀ_devi˚
(
pcidev
);

181 
	`pci_£t_ma°î
(
pcidev
);

182 
√t_devi˚
 *
√tdev
 = 
	`kmÆloc2
( (net_device), 0 );

183 
	`ªgi°î_nic
(
√tdev
);

184 
√tdev
->
pcidev
 =Öcidev;

185 
pcidev
->
c‹e
 = 
√tdev
;

187 
√tdev
->
›í
 = 
e1000_›í
;

188 
√tdev
->
°›
 = 
e1000_°›
;

189 
√tdev
->
tx_busy
 = 
e1000_tx_busy
;

190 
√tdev
->
°¨t_xmô
 = 
e1000_°¨t_xmô
;

192 
	`›rötf
("úqÖö: %u ,Üöe: %u\n", 
pcidev
->
úqpö
,Öcidev->
úqlöe
);

194 
√tdev
->
ba£_addr
 = ()–
pcidev
->
addªss
[1] & ~0xfË- 
PAGE_OFFSET
;

197 
√tdev
->
úq
 = 
pcidev
->
úqlöe
;

199 
mac
[2] = {0};

200 
mac
[0] = 
	`RTL_ªadl
(
√tdev
, 0);

201 
mac
[1] = 
	`RTL_ªadl
(
√tdev
, 4);

202 
	`mem˝y
(
√tdev
->
mac
, (*)mac, 6);

203 
	`›rötf
("MAC:%x %x\n", 
mac
[0], mac[1]);

205 
πl8139_¥iv©e
 *
¥iv©e
 = 
	`kmÆloc2
( (rtl8139_private), 0);

206 
¥iv©e
->
pcidev
 =Öcidev;

207 
√tdev
->
¥iv©e
 =Örivate;

208 
√tdev
->
ùmask
 = ~0xff;

209 
√tdev
->
g©eway_ù
 = 
	`MAKE_IP
(192, 168, 1, 1);

210 
u32
 
__loˇl_ù
;

211 
√tdev
->
ù
 = 
__loˇl_ù
;

215 
ã°nd
 = 
√tdev
;

218 
	}
}

220 
pci_drivî
 
	ge1000_drivî
 = {

221 
id_èbÀ
: 
e1000_id_tbl
,

222 
¥obe
:
e1000_öô_⁄e
,

225 
	$ªgi°î_e1000_drivî
(){

226 
	`pci_ªgi°î_drivî
(&
e1000_drivî
);

227 
	}
}

	@drivers/pci/pci.c

1 
	~<löux/pci.h
>

3 
	#PCI_BUS_MAX
 256

	)

4 
	#PCI_DEV_MAX
 32

	)

5 
	#PCI_FUNC_MAX
 8

	)

6 
	~<utûs.h
>

7 
	~<löux/¶ab.h
>

8 
li°_hód
 
	gpcidevs_roŸ
;

9 
li°_hód
 
	gpcidrvs_roŸ
;

10 
	$pci_öô
(){

11 
	`INIT_LIST_HEAD
(&
pcidevs_roŸ
);

12 
	`INIT_LIST_HEAD
(&
pcidrvs_roŸ
);

14 
	`PciDevTabÀ_Mk_Fa°_Ac˚ss
();

15 
bus
 = 0; bu†< 
PCI_BUS_MAX
; bus++){

16 
dev
 = 0; dev < 
PCI_DEV_MAX
; dev++){

17 
func
 = 0; fun¯< 
PCI_FUNC_MAX
; func++){

18 
p‹t0xcfc
 = 
	`gë_pci_cfg_ªg
(
bus
, 
dev
, 
func
, 0);

19 
u16
 
víd‹
 = (u16)
p‹t0xcfc
;

21 if(
víd‹
 == 0xffff) ;

23 
pci_dev
 *
pcidev
 = 
	`kmÆloc2
( (pci_dev), 0);

24 
i
 = 0; i < 64; i++){

25 ((*)
pcidev
)[
i
] = 
	`gë_pci_cfg_ªg
(
bus
, 
dev
, 
func
, i);

26 
pcidev
->
bus
 = bus;

27 
pcidev
->
dev
 = dev;

28 
pcidev
->
func
 = func;

30 
	`li°_add
(&
pcidev
->
node
, &
pcidevs_roŸ
);

33 
pci_öfo_íåy
 * 
öfo_ít
 = 
	`PciTabÀ_Gë
(
víd‹
, 
p‹t0xcfc
>>16);

34 
pci_víd‹_íåy
 * 
víd‹_ít
 = 
	`PciVíd‹Tbl_Gë
(
víd‹
);

35 if(
víd‹_ít
){

36 
	`›rötf
("@%s, ", 
víd‹_ít
->
VíFuŒ
);

37 if(
öfo_ít
Ë
	`›rötf
("%s, %s", info_ít->
Chù
, info_ít->
ChùDesc
);

39 
	`›rötf
("@unknown(%x : %x)", 
víd‹
, 
p‹t0xcfc
 >> 16);

41 
p‹t0xcfc
 = 
	`gë_pci_cfg_ªg
(
bus
, 
dev
, 
func
, 2);

42 
pci_˛asscode
 
˛ass
 = { 
vÆue
: 
p‹t0xcfc
 >> 8};

43 
pci_˛ass_íåy
 *
ít
 = 
	`PciCœssTbl_Gë
(
˛ass
.
ba£
, cœss.
sub
, cœss.
¥og
);

44 if(
ít
Ë
	`›rötf
("˛ass(%x): %s, %s, %s\n", 
p‹t0xcfc
>>8,É¡->
Ba£Desc
,É¡->
SubDesc
,É¡->
ProgDesc
);

45 
	`›rötf
("˛ass(%x): unknow¿%x %x %x\n",
p‹t0xcfc
>>8, 
˛ass
.
ba£
, cœss.
sub
, cœss.
¥og
);

51 if(
func
 =0 && !(
pcidev
->
hódty≥
 & 0x80)) ;

56 
	}
}

58 
ölöe


59 
pci_devi˚_id
 *

60 
	$id_èbÀ_m©ched
(
pci_devi˚_id
 *
id_èbÀ
, 
pci_dev
 *
dev
){

61 
pci_devi˚_id
 * 
id
 = 
id_èbÀ
;

62 
id
->
víd‹
){

63 if(
id
->
víd‹
 =
dev
->víd‹ && id->
devi˚
 == dev->device)  id;

64 
id
++;

66  
Ál£
;

67 
	}
}

69 
	$pci_ªgi°î_drivî
(
pci_drivî
 *
drivî
){

70 
	`li°_add
(&
drivî
->
node
, &
pcidrvs_roŸ
);

71 
li°_hód
 *
cuº_node
 = 
pcidevs_roŸ
.
√xt
;

73 
cuº_node
 !&
pcidevs_roŸ
){

74 
pci_dev
 *
cuº_dev
 = 
	`MB2STRU
(pci_dev, 
cuº_node
, 
node
);

75 
pci_devi˚_id
 * 
id
 = 
	`id_èbÀ_m©ched
–
drivî
->
id_èbÀ
, 
cuº_dev
);

76 if(
id
){

77 
cuº_dev
->
drivî
 = driver;

78 
drivî
->
	`¥obe
–
cuº_dev
, 
id
);

80 
cuº_node
 = cuº_node->
√xt
;

83 
	}
}

85 
	$pci_íabÀ_devi˚
(
pci_dev
 *
pcidev
){

86 
	`pci_fix_c⁄fig_dw‹d
(
pcidev
, 
PCI_COMMAND
, 
PCI_COMMAND_IO
 | 
PCI_COMMAND_MEMORY
);

88 
	}
}

90 
	$pci_£t_ma°î
(
pci_dev
 *
pcidev
){

91 
	`pci_fix_c⁄fig_dw‹d
(
pcidev
, 
PCI_COMMAND
, 
PCI_COMMAND_MASTER
);

93 
	}
}

	@drivers/pci/pci_vendor.c

1 
	~<löux/pci_víd‹.h
>

2 
PCI_VENTABLE
 
	gPciVíTabÀ
 [] =

15 
	#PCI_VENTABLE_LEN
 ((
PciVíTabÀ
)/(
PCI_VENTABLE
))

	)

17 
PCI_DEVTABLE
 
	gPciDevTabÀ
 [] = {

1059 
	#PCI_DEVTABLE_LEN
 ((
PciDevTabÀ
)/(
PCI_DEVTABLE
))

	)

1061 
PCI_CLASSCODETABLE
 
	gPciCœssCodeTabÀ
 [] =

1151 
	#PCI_CLASSCODETABLE_LEN
 ((
PciCœssCodeTabÀ
)/(
PCI_CLASSCODETABLE
))

	)

1153 * 
	gPciComm™dFœgs
 [] =

1174 
	#PCI_COMMANDFLAGS_LEN
 ((
PciComm™dFœgs
)/(*))

	)

1177 * 
	gPciSètusFœgs
 [] =

1198 
	#PCI_STATUSFLAGS_LEN
 ((
PciSètusFœgs
)/(*))

	)

1201 * 
	gPciDevSñFœgs
 [] =

1210 
	#PCI_DEVSELFLAGS_LEN
 ((
PciDevSñFœgs
)/(*))

	)

1214 
	g°¨t_of_v£g
[255];

1215 
	$PciDevTabÀ_Mk_Fa°_Ac˚ss
(){

1216 
i
;

1217 
i
 = 0 ; i < (
°¨t_of_v£g
)/(); i++)

1218 
°¨t_of_v£g
[
i
] = 255;

1219 
d⁄e
 = -1;

1220 
i
 = 0; i < (
PciDevTabÀ
)/(
pci_öfo_íåy
); i++){

1221 
‰esh_£g
 = 
PciDevTabÀ
[
i
].
VíId
 >> 8;

1222 if–
‰esh_£g
 =
d⁄e
) ;

1224 
d⁄e
 = 
‰esh_£g
;

1225 
°¨t_of_v£g
[
‰esh_£g
] = 
i
;

1227 
	}
}

1229 
pci_öfo_íåy
 * 
	$PciTabÀ_Gë
(
víd‹
, 
devi˚
){

1230 
£g
 = 
víd‹
 >> 8;

1231 
°¨t_idx
 = 
°¨t_of_v£g
[
£g
];

1232 if(
°¨t_idx
 == 0xff)  0;

1233 
i
 = 
°¨t_idx
; i < (
PciDevTabÀ
Ë/ (
pci_öfo_íåy
); i++){

1234 if(
PciDevTabÀ
[
i
].
VíId
 =
víd‹
 && PciDevTabÀ[i].
DevId
 =
devi˚
){

1235  
PciDevTabÀ
 + 
i
;

1237 if(
PciDevTabÀ
[
i
].
VíId
 >> 8 !
£g
)  0;

1240 
	}
}

1242 
pci_víd‹_íåy
 *
	$PciVíd‹Tbl_Gë
(
u16
 
víd‹
){

1243 
i
 = 0; i < 
PCI_VENTABLE_LEN
; i++){

1244 if(
PciVíTabÀ
[
i
].
VíId
 =
víd‹
)  PciVenTable + i;

1247 
	}
}

1250 
pci_˛ass_íåy
 *
	$PciCœssTbl_Gë
(
u8
 
˛ass
, u8 
sub
, u8 
¥og
){

1251 
i
 = 0; i < 
PCI_CLASSCODETABLE_LEN
; i++){

1252 if(
PciCœssCodeTabÀ
[
i
].
Ba£Cœss
 =
˛ass
 &&

1253 
PciCœssCodeTabÀ
[
i
].
SubCœss
 =
sub
 &&

1254 
PciCœssCodeTabÀ
[
i
].
ProgIf
 =
¥og


1255 Ë 
PciCœssCodeTabÀ
 + 
i
;

1258 
	}
}

	@elf.c

1 
	~<ñf.h
>

2 
	~<utûs.h
>

4 
Elf32_Ehdr
 *
	gehódî
;

5 
Elf32_Phdr
 *
	gphódî
;

6 
	$£t
(*
img
){

7 
	`as£π
(
img
[1] == 'E' && img[2]=='L' && img[3] == 'F');

8 
ehódî
 = (
Elf32_Ehdr
 *)
img
;

9 
phódî
 = (
Elf32_Phdr
 *)(
img
 + 
ehódî
->
e_phoff
);

11 
	}
}

13 
	$lﬂdñf
(*
img
){

14 
	`£t
(
img
);

16 
i
 = 0; i < 
ehódî
->
e_phnum
; i++){

17 if(
phódî
[
i
].
p_ty≥
 != 1) ;

18 
	`mem£t
((*)
phódî
[
i
].
p_vaddr
,Öhódî[i].
p_memsz
, 0);

19 
	`mem˝y
((*)
phódî
[
i
].
p_vaddr
, 
img
 +Öhódî[i].
p_off£t
,Öhódî[i].
p_fûesz
);

21  
ehódî
->
e_íåy
;

22 
	}
}

	@fs/binfmt_elf.c

1 
	~<löux/böfmts.h
>

2 
	~<ñf.h
>

3 
	~<löux/mm.h
>

4 
	~<¥oc.h
>

5 
	#MAP_FIXED
 0

	)

6 
	#MAP_DENYWRITE
 0

	)

13 
	$lﬂd_ñf_bö¨y
(
löux_bö¥m
 *
b¥m
, 
±_ªgs
 *
ªgs
){

14 
mm
 *mm = 
cuºít
->mm;

15 
Elf32_Ehdr
 *
ehódî
 = (*)
b¥m
->
buf
;

16 
phnum
 = 
ehódî
->
e_phnum
;

17 
	`as£π
–
ehódî
->
e_idít
[0] == 0x7f &&

18 
ehódî
->
e_idít
[1] == 'E' &&

19 
ehódî
->
e_idít
[2] == 'L' &&

20 
ehódî
->
e_idít
[3] == 'F');

21 
Elf32_Phdr
 *
phdr
 = (*)
	`__Æloc_∑ge
(0);

22 
off£t
 = 
	`k_£ek
(
b¥m
->
fûe
, 
ehódî
->
e_phoff
, 0);

23 
	`as£π
(
off£t
 =
ehódî
->
e_phoff
);

24 
rbyãs
 = 
	`k_ªad
(
b¥m
->
fûe
, (*)
phdr
, 
phnum
 * 
PH_SIZE
);

25 
	`as£π
–
rbyãs
 =
phnum
 * 
PH_SIZE
);

26 
boﬁ
 
mìt_föÆ_íåy
 = 
Ál£
;

27 
i
 = 0; i < 
phnum
; i++){

28 
ul⁄g
 
vm_Êags
;

29 if(
phdr
[
i
].
p_ty≥
 !
PT_LOAD
) ;

30 
	`as£π
(!
mìt_föÆ_íåy
);

31 
	`as£π
(
phdr
[
i
].
p_memsz
 > 0);

32 
ul⁄g
 
vaddr
 = 
phdr
[
i
].
p_vaddr
;

33 
ul⁄g
 
fûeoff
 = 
phdr
[
i
].
p_off£t
;

34 
	`as£π
(
vaddr
 % 
__4K
 =
fûeoff
 % __4K);

35 
vaddr
 = 
	`Êo‹_Æign
(vaddr, 
__4K
);

36 
fûeoff
 = 
	`Êo‹_Æign
(fûeoff, 
__4K
);

38 
vm_Êags
 = 0;

39 if(
phdr
[
i
].
p_Êags
 & 
PF_R
Ë
vm_Êags
 |
VM_READ
;

40 if(
phdr
[
i
].
p_Êags
 & 
PF_W
){

41 
mìt_föÆ_íåy
 = 
åue
;

42 
vm_Êags
 |
VM_WRITE
;

43 
mm
->
°¨t_d©a
 = 
phdr
[
i
].
p_vaddr
;

50 
ul⁄g
 
íd_d©a
 = 
phdr
[
i
].
p_vaddr
 +Öhdr[i].
p_fûesz
;

51 
ul⁄g
 
íd_bss
 = 
phdr
[
i
].
p_vaddr
 +Öhdr[i].
p_memsz
;

52 
mm
->
íd_d©a
 = 
íd_bss
;

53 
mm
->
brk
 = mm->
°¨t_brk
 = 
	`˚û_Æign
(
íd_d©a
, 
__4K
);

55 if(
phdr
[
i
].
p_Êags
 & 
PF_X
){

56 
vm_Êags
 |
VM_EXEC
;

57 
mm
->
°¨t_code
 = 
phdr
[
i
].
p_vaddr
;

58 
mm
->
íd_code
 = 
phdr
[
i
].
p_vaddr
 +Öhdr[i].
p_memsz
;

62 *
ªt
 = 
	`mm≠
(
vaddr
, 
phdr
[
i
].
p_fûesz
, 
vm_Êags
,

63 
MAP_FIXED
 | 
MAP_DENYWRITE
, 
b¥m
->
fûe
, 
fûeoff
);

64 
	`as£π
(
ªt
 =(*)
vaddr
);

68 
bss_hﬁe
 = 
mm
->
íd_d©a
 - mm->
°¨t_brk
;

69 if(
bss_hﬁe
 > 0Ë
	`k_brk
–
	`˚û_Æign
(
mm
->
íd_d©a
, 
__4K
) );

71 
ªgs
->
cs
 = (
u32
)&
£À˘‹_∂aö_c3
;

72 
ªgs
->
fs
 =Ñegs->
gs
 = 0;

73 
ªgs
->
ds
 =Ñegs->
es
 =Ñegs->
ss
 = (
u32
)&
£À˘‹_∂aö_d3
;

74 
ªgs
->
eù
 = (
ul⁄g
)
ehódî
->
e_íåy
;

77 
	}
}

79 
löux_böfmt
 
	gñf_f‹m©
 = {

80 
lﬂd_bö¨y
: 
lﬂd_ñf_bö¨y
,

	@fs/cell/cell.c

1 
	~<löux/˚Œ.h
>

	@fs/cell/namei.c

5 
	~<löux/fs.h
>

6 
	~<löux/˚Œ.h
>

7 
	~<utûs.h
>

8 
	~<löux/blkdev.h
>

9 
	#SB_COMMON
(
su≥rblock
Ë((
˚Œ_sb_öfo
 *)(su≥rblock->
comm⁄
))

	)

10 
	#I_COMMON
(
öode
Ë–(
˚Œ_öode_öfo
 *)(öode->
comm⁄
Ë)

	)

15 
	#CELL_BLOCKS
(
sb
Ë(
	`SB_COMMON
(sb)->
˚Œsize
 / 
BLOCK_SIZE
)

	)

17 
	#CELL_START
(
˚Œid
, 
sb
) \

18 ((
	`SB_COMMON
(
sb
)->
roŸ˚Œ
 / 
BLOCK_SIZE
) \

19 + 
	`CELL_BLOCKS
(
sb
Ë* 
˚Œid
)

	)

21 
˚Œ_lookup
(
öode
 *
dú
, 
díåy
 *dentry);

22 
ªad_öode
(
öode
 *inode);

23 
öode_›î©i⁄s
 
	g˚Œ_öode_›î©i⁄s
= {

24 
lookup
: 
˚Œ_lookup
,

27 
su≥r_›î©i⁄s
 
	g˚Œ_sb_›î©i⁄s
 = {

28 
ªad_öode
:Ñead_inode,

31 
ªad
(
fûe
 *fûe, *
buf
,

32 
size
, *
µos
);

33 
⁄˛o£
(
fûe
 *file);

34 
fûe_›î©i⁄s
 
	g˚Œ_f_›s
 = {

35 
›í
: 0,

36 
l£ek
: 0,

37 
ªad
:read,

38 
⁄˛o£
:onclose,

40 
	$ªad_˚Œ
(
su≥r_block
 *
sb
, 
˚Œid
,

41 
˚Œ
 *
buf
)

43 
îr
 = 
	`Œ_rw_blocks
(
sb
->
dev
, 
READ
,

44 
	`CELL_START
(
˚Œid
, 
sb
), 
	`CELL_BLOCKS
(sb), 
buf
); 
	`a§t
(
îr
 == 0);

45  
îr
;

46 
	}
}

49 
˚Œ
 * 
	$ˇche_˚Œ_hódî
(
su≥r_block
 *
sb
, 
˚Œid
){

51 
˚Œ
 * cñ»
	`kmÆloc
(1024);

52 
îr
 = 
	`Œ_rw_block2
(
sb
->
dev
, 
READ
, 
	`CELL_START
(
˚Œid
, sb), 1, (*)
˚Œ
);

53 if(
îr
){

54 
	`k‰ì
(
˚Œ
);

55 
	`•ö
("read cell header failed");

57  
˚Œ
;

58 
	}
}

60 
	$ªad_öode
(
öode
 *inode){

61 
˚Œ
 *cell;

62 
buf„r_hód
 *
fú°4K
;

63 
su≥r_block
 *
sb
 = 
öode
->sb;

65 
fú°4K
 = 
	`mm≠_disk
(
sb
->
dev
, 
	`CELL_START
(
öode
->
öo
, sb)); 
	`a§t
(first4K);

66 if(!
fú°4K
)  1;

68 
˚Œ
 = (*)
fú°4K
->
d©a
;

69 
öode
->
mktime
 = 
˚Œ
->mktime;

70 
öode
->
chgtime
 = 
˚Œ
->chgtime;

71 
öode
->
size
 = 
˚Œ
->size;

72 
öode
->
›î©i⁄s
 = &
˚Œ_öode_›î©i⁄s
;

73 
öode
->
fûe_›s
 = &
˚Œ_f_›s
;

75 
	}
}

80 
	$˚Œ_lookup
(
öode
 *
dú
, 
díåy
 *dentry){

82 
îr
;

83 
su≥r_block
 *
sb
 = 
dú
->sb;

84 
q°r
 *
«me
 = &
díåy
->name;

85 
˚Œ
 *˚Œ = 
	`kmÆloc
(
	`SB_COMMON
(
sb
)->
˚Œsize
);

86 
îr
 = 
	`ªad_˚Œ
(
sb
, 
dú
->
öo
, 
˚Œ
);

87 if(
îr
) {

88 
	`k‰ì
(
˚Œ
);

89  
îr
;

91 
˚Œ_díåy
 *
˚Œ_ít
 = 
˚Œ
->
íts
;

92 
ªmaö
;

93 
ªmaö
 = 
˚Œ
->
size
;Ñemain > 0;){

94 
ítsize
 = (
˚Œ_díåy
Ë+ 
˚Œ_ít
->
Àn
;

96 
Àn
 = 
˚Œ_ít
->len;

97 if(
Àn
 != 0){

98 if(
Àn
 =
«me
->À¿&& 
	`°∫cmp
“ame->«me, 
˚Œ_ít
->name,Üen) == 0) ;

99 
ªmaö
 -
ítsize
;

101 
˚Œ_ít
 = (*)((
u32
)˚Œ_íà+ 
ítsize
);

103 if(
ªmaö
 <= 0){

104 
	`k‰ì
(
˚Œ
);

107 
díåy
->
öode
 = (*)
˚Œ_ít
->
˚Œid
;

108 
	`k‰ì
(
˚Œ
);

111 
	}
}

120 
	$˚Œ_ªad_su≥r
(
su≥r_block
 *
sb
){

121 
buf„r_hód
 *
su≥r_mm≠
;

122 
˚Œ_su≥rblock
 *
˚Œ_sb
;

125 
	`as£π
((
˚Œ_öode_öfo
Ë<(
INODE_COMMON_SIZE
));

126 
	`as£π
–
CELL_HEADER_SIZE
 < 1024 );

128 
su≥r_mm≠
 = 
	`mm≠_disk
(
sb
->
dev
, 0); 
	`a§t
(super_mmap);

129 
˚Œ_sb
 = (*)(
su≥r_mm≠
->
d©a
 + 
__1K
);

132 
sb
->
›î©i⁄s
 = &
˚Œ_sb_›î©i⁄s
;

133 
	`SB_COMMON
(
sb
)->
roŸ˚Œ
 = 
˚Œ_sb
->rootcell;

134 
	`SB_COMMON
(
sb
)->
˚Œsize
 = 
˚Œ_sb
->cellsize;

135 
	`SB_COMMON
(
sb
)->
˚Œnum
 = 
˚Œ_sb
->cellnum;

136 
	`SB_COMMON
(
sb
)->
bôm≠
 = 
˚Œ_sb
->bitmap;

139 
díåy
 *
loˇl_roŸ
 = 
	`d_¸óã
(0, &(
q°r
){"/", 1, 0});

140 
loˇl_roŸ
->
öode
 = 
	`igë
(
sb
, 0);

141 
sb
->
roŸ
 = 
loˇl_roŸ
;

142 
loˇl_roŸ
->
sb
 = sb;

144 
	}
}

146 
	sbuf2
{

147 *
	mfú°buf
, *
	mœ°buf
;

150 
	$ªad
(
fûe
 *fûe, *
buf
, 
size
, *
µos
){

152 
öode
 *öodê
fûe
->
díåy
->inode;

153 if(!
fûe
->
d©a
Ëfûe->d©®
	`kmÆloc0
–(
buf2
) );

154 
buf2
 *buf2 = 
fûe
->
d©a
;

155 if(!
buf2
->
fú°buf
Ëbuf2->fú°bu‡
	`kmÆloc0
–
BLOCK_SIZE
 );

156 if(!
buf2
->
œ°buf
Ëbuf2->œ°bu‡
	`kmÆloc0
–
BLOCK_SIZE
 );

157 *
fú°buf
 = 
buf2
->firstbuf;

158 *
œ°buf
 = 
buf2
->lastbuf;

161 
˚Œ_addr
 = 
	`CELL_START
(
öode
->
öo
, inode->
sb
Ë* 
BLOCK_SIZE
;

162 
pos
 = 
˚Œ_addr
 + 
CELL_HEADER_SIZE
 + 
fûe
->pos ;

163 
íd
 = 
pos
 + 
size
 - 1;

165 
fú°
 = 
pos
 / 
BLOCK_SIZE
;

166 
œ°
 = 
íd
 / 
BLOCK_SIZE
;

168 
	`Œ_rw_blocks
(
öode
->
dev
, 
READ
, 
fú°
, 1, 
fú°buf
);

169 if(
œ°
 !
fú°
Ë
	`Œ_rw_blocks
(
öode
->
dev
, 
READ
,Üa°, 1, 
œ°buf
);

171 
fú°_À·
 = 
pos
 % 
BLOCK_SIZE
;

172 
fú°_right
 = 
BLOCK_SIZE
 - 
fú°_À·
;

173 *
addr
 = 
buf
 + 
fú°_right
;

174 
i
 = 
fú°
 + 1; i <
œ°
 - 1; i++){

175 
	`Œ_rw_blocks
(
öode
->
dev
, 
READ
, 
i
, 1, 
addr
);

176 
addr
 +
BLOCK_SIZE
;

179 
	`mem˝y
(
buf
, 
fú°buf
 + 
fú°_À·
, 
	`mö
(
fú°_right
, 
size
) );

180 if(
œ°
 !
fú°
Ë
	`mem˝y
(
addr
, 
œ°buf
, 
íd
 % 
BLOCK_SIZE
 + 1);

182  
size
;

183 
	}
}

185 
	$⁄˛o£
(
fûe
 *file){

186 if(
fûe
->
d©a
){

187 
buf2
 *buf2 = 
fûe
->
d©a
;

188 
	`k‰ì
(
buf2
->
fú°buf
);

189 
	`k‰ì
(
buf2
->
œ°buf
);

190 
	`k‰ì
(
buf2
);

193 
	}
}

	@fs/dcache.c

1 
	~<löux/dˇche.h
>

2 
	~<li°.h
>

3 
	~<utûs.h
>

7 
díåy
 *
	$d_¸óã
(
díåy
 *
∑ª¡
, 
q°r
 *qstr){

9 
díåy
 *díåy = 
	`kmem_ˇche_Æloc
(
díåy_ˇche
, 0);

10 if(!
díåy
)  dentry;

11 *
°r
 = 
	`kmÆloc
(
q°r
->
Àn
 + 12);

12 
	`°∫˝y
(
°r
, 
q°r
->
«me
, q°r->
Àn
);

13 
°r
[
q°r
->
Àn
] = 0;

14 
díåy
->
«me
.«mê
°r
;

15 
díåy
->
«me
.
Àn
 = 
q°r
->len;

16 
díåy
->
«me
.
hash
 = 
q°r
->hash;

18 
díåy
->
∑ª¡
 = 0;

19 
díåy
->
öode
 = 0;

20 
díåy
->
›î©i⁄s
 = 0;

21 if(
∑ª¡
){

22 
díåy
->
∑ª¡
 =Öarent;

23 
díåy
->
sb
 = 
∑ª¡
->sb;

26 
	`INIT_LIST_HEAD
(&
díåy
->
hash
);

27 
	`INIT_LIST_HEAD
(&
díåy
->
vfsmou¡
);

28  
díåy
;

29 
	}
}

31 
	$d_ªhash
(
díåy
 *
dú
, 
hash
){

32 
hash
 = hash + (
u32
)
dú
 / 4;

33  
hash
 % 
D_HASHTABLE_LEN
;

34 
	}
}

36 
díåy
 *
	$d_lookup
(
díåy
 *
dú
, 
q°r
 *
«me
){

37 
li°_hód
 *
ã¡a˛e
 = 
díåy_hashèbÀ
 + 
	`d_ªhash
(
dú
, 
«me
->
hash
);

38 
li°_hód
 *
íd
 = 
ã¡a˛e
;

41  (
ã¡a˛e
 =Åíè˛e->
√xt
)!
íd
){

42 
díåy
 *
ít
 = 
	`MB2STRU
(díåy, 
ã¡a˛e
, 
hash
);

43 if(
ít
->
∑ª¡
 !
dú
) ;

44 if(
ít
->
›î©i⁄s
 &&É¡->›î©i⁄s->
com∑ª
){

45 if(
ít
->
›î©i⁄s
->
	`com∑ª
–&ít->
«me
,Çame)) ;

48 if(
«me
->
Àn
 !
ít
->name.len) ;

49 if(
	`°∫cmp
((*)
ít
->
«me
.«me, (*Íame->«me,Çame->
Àn
)) ;

52  
ít
;

55 
	}
}

	@fs/exec.c

1 
	~<löux/¶ab.h
>

2 
	~<¥oc.h
>

3 
	~<löux/böfmts.h
>

4 
	~<löux/mm.h
>

5 
	~<asm/î∫o.h
>

7 * 
c›y_°rög
(*
°r
);

8 ** 
c›y_°rögs
(**
°rs
);

9 
£¨ch_bö¨y_h™dÀr
(
löux_bö¥m
 *
bö¥m
,

10 
±_ªgs
 *
ªgs
);

12 
vm_¨ó
 *
	$mk_°ack_¨ó
(){

13 
vm_¨ó
 *
vma
 = 
	`kmem_ˇche_Æloc
(
vm_¨ó_ˇche
, 0);

14 
vma
->
íd
 = 
__3G
;

15 
vma
->
°¨t
 = 
__3G
 - 
__1M
;

16 
vma
->
Êags
.
vÆue
 = 
VM_STACK
;

17 
vma
->
mm
 = 
cuºít
->mm;

18 
vma
->
›s
 = 
NULL
;

19 
vma
->
fûe
 = 
NULL
;

20 
vma
->
pgoff
 = 0;

21 
vma
->
√xt
 = vma->
¥ev
 = vma;

22 
	`vm_upd©e_pg¥Ÿ
(
vma
);

23  
vma
;

24 
	}
}

29 
	$do_execve
(*
fûï©h
, *
¨gv
[], *
ívp
[], 
±_ªgs
 *
ªgs
){

30 
ªt
;

31 
mm
 *
ﬁdmm
;

32 
löux_bö¥m
 
bö¥m
;

33 
fûe
 * fûê
	`k_›í
(
fûï©h
, 0, 0);

34 if(!
fûe
Ë -
EINVAL
;

35 
bö¥m
.
fûï©h
 = filepath;

36 
bö¥m
.
¨gv
 =árgv;

37 
bö¥m
.
ívp
 =Énvp;

39 if(
fûï©h
 < (*)
__3G
)

40 
bö¥m
.
fûï©h
 = 
	`c›y_°rög
(filepath);

42 if(
¨gv
 &&árgv < (**)
__3G
)

43 
bö¥m
.
¨gv
 = 
	`c›y_°rögs
(argv);

45 if(
ívp
 &&Énv∞< (**)
__3G
)

46 
bö¥m
.
ívp
 = 
	`c›y_°rögs
(envp);

48 
bö¥m
.
fûe
 = file;

49 
rbyãs
 = 
	`k_ªad
(
fûe
, 
bö¥m
.
buf
, 128);

50 
	`as£π
(
rbyãs
 == 128);

51 
ﬁdmm
 = 
cuºít
->
mm
;

54 
	`˛i
();

58 
mm
 *mm = 
	`kmem_ˇche_Æloc
(
mm_ˇche
, 0);

59 
u32
 * 
pgdú
 = 
	`__Æloc_∑ge
(
__GFP_ZERO
);

60 
	`mem˝y
(
pgdú
 + 256 * 3, (
u32
 *)
	`__va
(
__1M
) + 256*3, 224 * 4);

61 
mm
->
¸3
.
vÆue
 = 
	`__∑
(
pgdú
);

62 
mm
->
°¨t_brk
 = mm->
brk
 = 0;

63 
mm
->
vma
 = 0;

64 
mm
->
u£rs
 = 1;

65 
cuºít
->
mm
 = mm;

67 
__asm__
 
	`__vﬁ©ûe__
 ("mov %0, %%cr3\n\t"

69 :"r"(
cuºít
->
mm
->
¸3
.
vÆue
)

71 
g_tss
->
e•0
 = ()
cuºít
 + 
THREAD_SIZE
;

74 if(
ﬁdmm
){

76 
	`åy_ªÀa£_u£r_•a˚
(
ﬁdmm
);

79 
	`put_mm
(
ﬁdmm
);

85 
cuºít
->
mm
->
vma
 = 
	`mk_°ack_¨ó
();

88 
u32
 
e•
 = 
__3G
;

89 
¨gc
, 
ívc
= 0;

90 **
°km¨k_of_¨g
 = (*)
	`__Æloc_∑ge
(0);

91 **
°km¨k_of_ív
 = (*)
	`__Æloc_∑ge
(0);

93 
i
;

94 **
ßº
 = 
bö¥m
.
ívp
;

95 **
m¨k
 = 
°km¨k_of_ív
;

96 
c›y_¨gs_to_u£r_°ack
:

97 
i
 = 0; 
ßº
 && sarr[i]; i++){

98 
Àn
 = 
	`°∫Àn
(
ßº
[
i
], 
__4K
); if÷í =__4KË -
EINVAL
;

99 
e•
 -
Àn
 + 1;

100 
	`°r˝y
((*)
e•
, 
ßº
[
i
]);

101 
m¨k
[
i
] = (*)
e•
;

103 
m¨k
[
i
] = 0;

104 if(
ßº
 =
bö¥m
.
ívp
){

105 
ívc
 = 
i
;

106 
ßº
 = 
bö¥m
.
¨gv
;

107 
m¨k
 = 
°km¨k_of_¨g
;

108 
c›y_¨gs_to_u£r_°ack
;

110 
¨gc
 = 
i
;

113 
e•
 &= ~3;

115 
e•
 -(
ívc
 + 1) * 4;

116 
ívp
 = (*)
e•
;

117 
i
 = 0; i <
ívc
; i++Ë
ívp
[i] = 
°km¨k_of_ív
[i];

119 
e•
 -(
¨gc
 + 1) * 4;

120 
¨gv
 = (*)
e•
;

121 
i
 = 0; i <
¨gc
; i++Ë
¨gv
[i] = 
°km¨k_of_¨g
[i];

123 
¨gv
[-1] = (*)
¨gc
;

125 
¨gv
[-2] = 0;

129 
ªgs
->
e•
 =Ésp - 8;

134 
	`__‰ì_∑ge
(
°km¨k_of_¨g
);

135 
	`__‰ì_∑ge
(
°km¨k_of_ív
);

138 
ªt
 = 
	`£¨ch_bö¨y_h™dÀr
(&
bö¥m
, 
ªgs
); 
	`as£π
(ret == 0);

140 
cuºít
->
time_¶i˚
 = cuºít->
time_¶i˚_fuŒ
 = 10;

141 
	`°∫˝y
(
cuºít
->
p_«me
, 
bö¥m
.
fûï©h
, 
P_NAME_MAX
);

143  
ªt
;

147 
	}
}

149 
löux_böfmt
 *
	gf‹m©s
;

150 
boﬁ
 
	$ªgi°î_böfmt
(
löux_böfmt
* 
böfmt
){

151 if(!
böfmt
 || !böfmt->
lﬂd_bö¨y
Ë 
Ál£
;

154 
IF
 = 
	`˛i_ex
();

155 if(!
f‹m©s
){

156 
f‹m©s
 = 
böfmt
;

157 
böfmt
->
√xt
 = böfmt->
¥ev
 = binfmt;

160 
	`O_INSERT_BEFORE
(
f‹m©s
, 
böfmt
);

162 if(
IF
Ë
	`°i
();

164  
åue
;;

165 
	}
}

171 
	$£¨ch_bö¨y_h™dÀr
(
löux_bö¥m
 *
bö¥m
,

172 
±_ªgs
 *
ªgs
)

174 
löux_böfmt
 *
fmt
 = 
f‹m©s
;

175 if(!
fmt
);

178 
ªt
 = 
fmt
->
	`lﬂd_bö¨y
(
bö¥m
, 
ªgs
);

179 if(
ªt
 =-
ENOEXEC
) ;

180 if(
ªt
 == 0 )  0;

181 if(
ªt
 !-
ENOEXEC
) Ñet;

183 
fmt
 = fmt->
√xt
;

184 }
fmt
 !
f‹m©s
);

186  -
ENOEXEC
;

187 
	}
}

192 
	$dr›_fd
(
fûes_°ru˘
 *
fûes
){

193 if(
fûes
->
fûï
 !fûes->
‹igö_fûï
){

194 
	`k‰ì2
(
fûes
->
fûï
);

198 
	}
}

201 * 
	$c›y_°rög
(*
°r
){

202 *
∑ge
 = 
	`__Æloc_∑ge
(0);

203 
	`°∫˝y
(
∑ge
, 
°r
, 
__4K
);

204  
∑ge
;

205 
	}
}

210 ** 
	$c›y_°rögs
(**
¨øy
){

211 **
loc
 = 
	`__Æloc_∑ge
(0);

212 *
∑ge
 = 
	`__Æloc_∑ge
(0);

213 *
de°
 = 
∑ge
;

214 
i
;

215 
i
 = 0; 
¨øy
[i]; i++){

216 *
§c
 = 
¨øy
[
i
];

217 
loc
[
i
] = 
de°
;

218 *
§c
){

219 *
de°
++ =*
§c
++;

220 if(
de°
 - 
∑ge
 >
__4K
)

221 
	`•ö
("bad");

223 *
de°
++=0;

225 
loc
[
i
] = 0;

226  
loc
;

227 
	}
}

	@fs/inode.c

1 
	~<li°.h
>

2 
	~<löux/fs.h
>

3 
	~<utûs.h
>

8 
öode
 *
	$ˇche_öode
(
su≥r_block
 *
sb
, 
u32
 
öo
, 
hash
){

10 
öode
 *öodê
	`kmem_ˇche_Æloc
–
öode_ˇche
, 0);

11 
öode
->
öo
 = ino;

12 
öode
->
sb
 = sb;

13 
öode
->
dev
 = 
sb
->dev;

14 
sb
->
›î©i⁄s
->
	`ªad_öode
(
öode
);

17 
	`hashèbÀ_add
(
öode_hashèbÀ
, 
hash
, &
öode
->hash);

18  
öode
;

19 
	}
}

20 
	$hash
(
su≥r_block
 *
sb
, 
u32
 
öo
){

21  ((
u32
)
sb
/4 + 
öo
Ë% 
I_HASHTABLE_LEN
;

22 
	}
}

25 
öode
 *
	$igë
(
su≥r_block
 *
sb
, 
öo
){

26 
hash_vÆue
 = 
	`hash
(
sb
, 
öo
);

27 
li°_hód
 *
hód
 = 
öode_hashèbÀ
 + 
hash_vÆue
;

28 
li°_hód
 *
cuº
 = 
hód
->
√xt
;

29 
cuº
 !
hód
){

30 
öode
 *öodê
	`MB2STRU
(öode, 
cuº
, 
hash
);

31 if(
öode
->
öo
 =öÿ&& inode->
sb
 == sb){

33  
öode
;

35 
cuº
 = cuº->
√xt
;

39  
	`ˇche_öode
(
sb
, 
öo
, 
hash_vÆue
);

40 
	}
}

	@fs/namei.c

3 
	~<löux/fs.h
>

4 
	~<¥oc.h
>

5 
	~<löux/î∫o.h
>

6 
	~<li°.h
>

8 
	#IS_MNT_PT
(
díåy
Ë–!
	`li°_em±y
–&(díåy)->
vfsmou¡
Ë)

	)

9 
	#LOOKUP_DIR
 1

	)

14 
	$fﬁlow_dŸdŸ
–
ö_dú
 *
ödú
){

16 if(
ödú
->
díåy
 =
cuºít
->
fs
->
roŸ
) ;

19 
vfsmou¡
 *
m¡_∑ª¡
 = 
ödú
->
m¡
->
∑ª¡
;

20 if(
ödú
->
díåy
 =ödú->
m¡
->
smÆl_roŸ
){

23 if(
m¡_∑ª¡
 =
ödú
->
m¡
) ;

25 
ödú
->
díåy
 = indú->
m¡
->
mou¡poöt
;

26 
ödú
->
m¡
 = 
m¡_∑ª¡
;

27 
	`fﬁlow_dŸdŸ
(
ödú
);

34 
ödú
->
díåy
 = indú->díåy->
∑ª¡
;

35 
	}
}

42 
vfsmou¡
 *

43 
	$íãr_mou¡ed
(
díåy
 *
mou¡poöt
, 
vfsmou¡
 *
‰om
){

44 
li°_hód
 *
tmp
 = 
mou¡poöt
->
vfsmou¡
.
√xt
;

45  
tmp
 !&
mou¡poöt
->
vfsmou¡
){

46 
vfsmou¡
 *
m¡
 = 
	`MB2STRU
(vfsmou¡, 
tmp
, 
˛ash
);

47 if(
m¡
->
∑ª¡
 =
‰om
)  mnt;

48 
tmp
 =Åmp->
√xt
;

51 
	}
}

58 
díåy
 *
	$ªÆ_lookup
(
díåy
 *
dú
, 
q°r
 *
«me
){

62 
díåy
 *
subdú
 = 
	`d_¸óã
(
dú
, 
«me
);

65 
öode_›î©i⁄s
 *
i_›s
 = 
dú
->
öode
->
›î©i⁄s
;

66 
îr
 = 
i_›s
->
	`lookup
(
dú
->
öode
, 
subdú
);

67 if(
îr
) {

69 
	`k‰ì
(
subdú
);

73 
öode
 *öodê
	`igë
(
subdú
->
sb
, (
u32
)subdir->inode);

74 if(!
öode
){

75 
	`k‰ì
(
subdú
);

79 
subdú
->
öode
 = inode;

80 
	`hashèbÀ_add
(
díåy_hashèbÀ
, 
	`d_ªhash
(
subdú
->
∑ª¡
, subdú->
«me
.
hash
),\

81 &
subdú
->
hash
);

82  
subdú
;

83 
	}
}

86 
díåy
 *
	$ˇched_lookup
(
díåy
 *
∑ª¡
, 
q°r
 *
∑πül
, 
Êags
)

88 
díåy
 *
ªsu…
 = 
	`d_lookup
(
∑ª¡
, 
∑πül
);

89  
ªsu…
;

90 
	}
}

92 
	$∑thwÆk
(*
∑th
, 
ö_dú
 *
ödú
, 
Êags
){

93 
hŸÊags
 = 0;

94 c⁄° *
foŸ
 = 
∑th
;

95 
q°r
 
∑πül
;

96 if(*
foŸ
 == '/'){

97 
ödú
->
díåy
 = 
cuºít
->
fs
->
roŸ
;

98 
ödú
->
m¡
 = 
cuºít
->
fs
->
roŸm¡
;

99 
foŸ
++;

102 
ödú
->
díåy
 = 
cuºít
->
fs
->
pwd
;

103 
ödú
->
m¡
 = 
cuºít
->
fs
->
pwdm¡
;

106 
°ï
:

107 if(*
foŸ
 == 0)  0;

108 
∑πül
.
«me
 = 
foŸ
;

110 *
foŸ
 && *foot != '/') foot++;

111 
∑πül
.
Àn
 = 
foŸ
 -Ö¨tül.
«me
;

113 
∑πül
.
hash
 = 
	`°r_hash
’¨tül.
«me
,Ö¨tül.
Àn
);

114 if(*
foŸ
 == '/'){

115 
hŸÊags
 |
LOOKUP_DIR
;

116 
foŸ
++;

119 if(
∑πül
.
«me
[0] == '.'){

120 
∑πül
.
Àn
){

122 if(
∑πül
.
«me
[1] != '.') ;

123 
	`fﬁlow_dŸdŸ
(
ödú
);

125 
°ï
;

132 
díåy
 *
subdú
 = 
	`ˇched_lookup
(
ödú
->díåy, &
∑πül
, 
hŸÊags
);

133 if(!
subdú
Ësubdú = 
	`ªÆ_lookup
(
ödú
->
díåy
, &
∑πül
);

134 if(!
subdú
)  1;

139 
vfsmou¡
 *
ju°_íãr
 = 
ödú
->
m¡
;

140 
boﬁ
 
mìt_m¡
 = 0;

141 
	`IS_MNT_PT
(
subdú
)){

142 
mìt_m¡
 = 1;

143 
ju°_íãr
 = 
	`íãr_mou¡ed
(
subdú
, just_enter);

144 if(!
ju°_íãr
) ;

145 
subdú
 = 
ju°_íãr
->
smÆl_roŸ
;

146 
ödú
->
m¡
 = 
ju°_íãr
;

147 
ödú
->
díåy
 = 
subdú
;

150 if(!
mìt_m¡
){

151 
ödú
->
díåy
 = 
subdú
;

153 
°ï
;

154 
	}
}

	@fs/open.c

1 
	~<löux/fs.h
>

5 
	$gë_unu£d_fd
(){

6 
fûes_°ru˘
 *
fûes
 = 
cuºít
->files;

7 
i
;

8 
i
 = 0; i < 
fûes
->
max_fds
; i++){

9 if(
fûes
->
fûï
[
i
] == 0){

10 
fûes
->
fûï
[
i
] = (*)1;

11  
i
;

15 
√w_max
 = 
fûes
->
max_fds
 * 2;

16 if(
√w_max
 > 
cuºít
->
æimôs
[
RLIMIT_NOFILE
].
cur
)  -1;

18 
fûe
 **
fûï
 = 
	`kmÆloc
(4 * 
√w_max
);

19 
	`mem˝y
(
fûï
, 
fûes
->fûï, 4 * fûes->
max_fds
);

20 
fûes
->
max_fds
 = 
√w_max
;

21 if(
fûes
->
fûï
 =fûes->
‹igö_fûï
Ë
	`k‰ì
(files->filep);

22 
fûes
->
fûï
 = filep;

24  
i
;

25 
	}
}

30 
	$sys_›í
(*
∑th
, 
Êags
, 
mode
){

31 
ö_dú
 
ödú
;

32 
îr
;

33 
îr
 = 
	`∑thwÆk
(
∑th
, &
ödú
, 0);

34 if(
îr
)  -1;

36 
fd
 = 
	`gë_unu£d_fd
();

37 if(
fd
 == -1)  -1;

40 
fûe
 *fûê
	`kmÆloc
( (file) );

41 
fûe
->
díåy
 = 
ödú
.dentry;

42 
fûe
->
pos
 = 0;

43 
fûe
->
cou¡
 = 1;

44 
fûe
->
Êags
 = flags;

45 
fûe
->
d©a
 = 0;

46 
cuºít
->
fûes
->
fûï
[
fd
] = 
fûe
;

53 
fûe
->
mode
 = (
Êags
 + 1) & 3;

56  
fd
;

57 
	}
}

	@fs/pipe.cn

1 
	~<löux/fs.h
>

2 
	~<löux/pùe.h
>

4 
	$do_pùe
–
fd
[2]){

5 
fûe
 *
rfûe
, *
wfûe
;

6 
rfûe
 = 
kmem


7 
	}
}

	@fs/read_write.c

1 
	~<löux/fs.h
>

2 
	~<löux/î∫o.h
>

4 
	$do_l£ek
(
fûe
 *fûe, 
off£t
, 
‹igö
){

5 
‹igö
){

7 
off£t
 +
fûe
->
pos
;

10 
off£t
 +
fûe
->
díåy
->
öode
->
size
;

12 if(
off£t
 < 0Ë -
EINVAL
;

14 
fûe
->
pos
 = 
off£t
;

16  
off£t
;

17 
	}
}

22 
	$sys_l£ek
(
fd
, 
off£t
, 
‹igö
){

23 
fûe
 *fûê
	`fcheck
(
fd
);

24 
off£t
 = 
	`do_l£ek
(
fûe
, off£t, 
‹igö
);

25 if(
off£t
 < 0) {

29  
off£t
;

30 
	}
}

32 
	$do_˛o£
(
fûe
 *file){

34 
fûe_›î©i⁄s
 *
f›s
 = 
fûe
->
díåy
->
öode
->
fûe_›s
;

35 if(
f›s
->
⁄˛o£
Ëf›s->
	`⁄˛o£
(
fûe
);

37 if(--
fûe
->
cou¡
 == 0){

38 
	`k‰ì
(
fûe
);

41 
	}
}

46 
	$sys_˛o£
(
fd
){

47 
ªt
;

48 if(
cuºít
->
fûes
->
max_fds
 <
fd
Ë -
EINVAL
;

49 if–
cuºít
->
fûes
->
fûï
[
fd
] =0Ë -
EINVAL
;

52 
fûe
 *fûê
cuºít
->
fûes
->
fûï
[
fd
];

53 
ªt
 = 
	`do_˛o£
(
fûe
);

54 
cuºít
->
fûes
->
fûï
[
fd
] = 0;

55  
ªt
;

56 
	}
}

60 
	$do_ªad
(
fûe
 *fûe, *
buf
, 
size
){

61 if(!
fûe
Ë -
EBADF
;

62 if(!(
fûe
->
mode
 & 
FMODE_READ
)Ë -
EACCES
;

64 
fûesize
 = 
fûe
->
díåy
->
öode
->
size
;

65 if(
fûe
->
pos
 + 
size
 > 
fûesize
) size = filesize - file->pos;

66 
ªt
 = 
fûe
->
díåy
->
öode
->
fûe_›s
->
	`ªad
(fûe, 
buf
, 
size
, 0);

67  
ªt
;

68 
	}
}

69 
	$sys_ªad
(
fd
, *
buf
, 
size
){

70 
byãs_r
;

71 
fûe
 *fûê
	`fcheck
(
fd
);

72 
byãs_r
 = 
	`do_ªad
(
fûe
, 
buf
, 
size
);

73 if(
byãs_r
 < 0){

77  
byãs_r
;

78 
	}
}

83 
fûe
 * 
	$k_›í
(*
∑th
, 
ul⁄g
 
Êags
, ul⁄g 
mode
){

84 
fd
 = 
	`sys_›í
(
∑th
, 
Êags
, 
mode
);

85  
	`fgë
(
fd
);

86 
	}
}

88 
	$k_ªad
(
fûe
 *fûe, *
buf
, 
size
){

89  
	`do_ªad
(
fûe
, 
buf
, 
size
);

90 
	}
}

93 
	$k_£ek
(
fûe
 *fûe, 
off£t
, 
‹igö
){

94  
	`do_l£ek
(
fûe
, 
off£t
, 
‹igö
);

95 
	}
}

97 
	$k_˛o£
(
fûe
*file){

98  
	`do_˛o£
(
fûe
);

99 
	}
}

	@fs/super.c

1 
	~<löux/fs.h
>

2 
	~<utûs.h
>

3 
fûe_sy°em_ty≥
 *
	gfs_ty≥s
;

4 
	$öô_vfs
(){

5 
díåy_ˇche
 = 
	`kmem_ˇche_¸óã
("díåy_ˇche", (
díåy
), 0,

6 
SLAB_HWCACHE_ALIGN
, 0, 0);

7 
öode_ˇche
 = 
	`kmem_ˇche_¸óã
("öode_ˇche", (
öode
), 0,

8 
SLAB_HWCACHE_ALIGN
, 0, 0);

10 
öode_hashèbÀ
 = 
	`kmÆloc
((
li°_hód
Ë* 
I_HASHTABLE_LEN
);

11 
díåy_hashèbÀ
 = 
	`kmÆloc
((
li°_hód
Ë* 
D_HASHTABLE_LEN
);

12 
i
 = 0; i < 
I_HASHTABLE_LEN
 || i < 
D_HASHTABLE_LEN
; i++){

13 if(
i
 < 
I_HASHTABLE_LEN
Ë
	`INIT_LIST_HEAD
(
öode_hashèbÀ
 + i);

14 if(
i
 < 
D_HASHTABLE_LEN
Ë
	`INIT_LIST_HEAD
(
díåy_hashèbÀ
 + i);

16 
	}
}

18 
ªgi°î_fûesy°em
(*
«me
, (*
ªad_su≥r
)(
su≥r_block
 *)){

19 
fûe_sy°em_ty≥
 *
t
 = 
	`kmÆloc
((file_system_type));

20 
	`°r˝y
(
t
->
«me
,Çame);

21 
t
->
ªad_su≥r
 =Ñead_super;

22 
	`LL_INSERT
(
fs_ty≥s
, fs_ty≥s, 
t
);

23 
	}
}

34 
vfsmou¡
 * 
	$do_mou¡
(
u16
 
dev
, *
dú
, *
ty≥
){

35 
fûe_sy°em_ty≥
 *
cuº
 = 
fs_ty≥s
;

36 
cuº
){

37 if(
	`°rcmp
(
cuº
->
«me
, 
ty≥
) == 0) ;

38 
cuº
 = cuº->
√xt
;

40 if(!
cuº
)  0;

42 
ö_dú
 
ödú
;

45 if(
dú
[0] == '/' && dir[1] == 0){

46 
ödú
.
díåy
 = 
	`d_¸óã
(0, &(
q°r
){"/", 1, 0});

47 
ödú
.
m¡
 = 0;

50 
îr
 = 
	`∑thwÆk
(
dú
, &
ödú
, 0);

51 if(
îr
)  0;

54 
vfsmou¡
 *
vfsm¡
 = 
	`kmÆloc
( (vfsmount) );

55 
su≥r_block
 *
sb
 = 
	`kmÆloc
( (super_block) );

56 
sb
->
dev
 = dev;

57 
cuº
->
	`ªad_su≥r
(
sb
);

59 
vfsm¡
->
sb
 = sb;

60 
vfsm¡
->
smÆl_roŸ
 = 
sb
->
roŸ
;

61 
vfsm¡
->
mou¡poöt
 = 
ödú
.
díåy
;

62 
vfsm¡
->
∑ª¡
 = 
ödú
.
m¡
;

64 
	`li°_add
(&
vfsm¡
->
˛ash
, &
ödú
.
díåy
->
vfsmou¡
);

65  
vfsm¡
;

66 
	}
}

68 
	$sys_mou¡
(* 
dev_«me
, *
dú_«me
, *
ty≥
, 
Êags
, *
d©a
){

70 
	}
}

	@fs_cell.c

1 
	~"fs_˚Œ.h
"

3 
	$£¨ch_fûe
(*
«me
){

4 
i
 = 0;

5 
i
 < 
CELL_MAX
){

6 if(
	`°rcmp
(
˚Œmbr
 + 
i
*
NAME_LEN
, 
«me
) == 0)  i;

7 
i
++;

10 
	}
}

	@func_table.c

1 
	~<löux/NR_sysˇŒ.h
>

3 (*
sys_execve
)();

4 (*
sys_f‹k
)();

5 (*
sys_¥ötf
)();

6 (*
sys_exô
)();

7 (*
sys_waô4
)();

9 
	#ENTRY
(
«me
Ë[
NR_
 ##Çame] = ()&
sys_
 ## 
	)
«me

12 
func_èbÀ
[255] =

14 
	`ENTRY
(
f‹k
),

15 
	`ENTRY
(
execve
),

16 
	`ENTRY
(
¥ötf
),

17 
	`ENTRY
(
exô
),

18 
	`ENTRY
(
waô4
),

19 
	}
};

	@garbage.c

2 
	#gpgdú
 ((
u32
*)0xc0100000)

	)

3 
	#gpgtbl
 ((
u32
*)0xc0101000)

	)

7 
	#buûd_equÆ_m≠
(
∑ddr
,
tbœddr
) \

9 
u32
 
dú_ít
 = 
∑ddr
/0x400000;\

10 
gpgdú
[
dú_ít
] = 
tbœddr
|
PG_P
|
PG_RWW
|
PG_USS
; \

11 
u32
 
tbl_ít
 = (
∑ddr
%0x400000)>>12;\

12 ((
u32
*)
	`KV
(
tbœddr
))[
tbl_ít
] = 
∑ddr
|
PG_P
|
PG_RWW
|
PG_USS
;\

13 } 0)

	)

18 
	gmem_ítôy
[0]='G';

19 
	gmem_ítôy
[1]='M';

20 
	gmem_ítôy
[2]='K';

21 
	gmem_ítôy
[3]='B';

	@i8259.c

1 
	~<i8259.h
>

2 
	~<úq.h
>

3 
	~<utûs.h
>

4 
	~<asm/bô.h
>

6 
	#PIC1
 0x20

	)

7 
	#PIC2
 0xA0

	)

8 
	#PIC1_CMD
 
PIC1


	)

9 
	#PIC1_DATA
 (
PIC1
+1)

	)

10 
	#PIC2_CMD
 
PIC2


	)

11 
	#PIC2_DATA
 (
PIC2
+1)

	)

16 
	#ICW1_ICW4
 0x01

	)

17 
	#ICW1_SINGLE
 0x02

	)

18 
	#ICW1_INTERVAL4
 0x04

	)

19 
	#ICW1_LEVEL
 0x08

	)

20 
	#ICW1_INIT
 0x10

	)

22 
	#ICW4_8086
 0x01

	)

23 
	#ICW4_AUTO
 0x02

	)

24 
	#ICW4_BUF_SLAVE
 0x08

	)

25 
	#ICW4_BUF_MASTER
 0x0C

	)

26 
	#ICW4_SFNM
 0x10

	)

28 
	$i8259_mask
(
IRQlöe
) {

29 
u16
 
p‹t
;

30 
u8
 
vÆue
;

32 if(
IRQlöe
 < 8) {

33 
p‹t
 = 
PIC1_DATA
;

35 
p‹t
 = 
PIC2_DATA
;

36 
IRQlöe
 -= 8;

38 
vÆue
 = 
	`ö_byã
(
p‹t
Ë| (1 << 
IRQlöe
);

39 
	`out_byã
(
p‹t
, 
vÆue
);

40 
	}
}

42 
	$i8259_unmask
(
IRQlöe
) {

43 
u16
 
p‹t
;

44 
u8
 
vÆue
;

46 if(
IRQlöe
 < 8) {

47 
p‹t
 = 
PIC1_DATA
;

49 
p‹t
 = 
PIC2_DATA
;

50 
IRQlöe
 -= 8;

52 
vÆue
 = 
	`ö_byã
(
p‹t
Ë& ~(1 << 
IRQlöe
);

53 
	`out_byã
(
p‹t
, 
vÆue
);

54 
	}
}

56 
	#PIC_READ_IRR
 0x0®

	)

57 
	#PIC_READ_ISR
 0x0b

	)

60 
u16
 
	$__pic_gë_úq_ªg
(
ocw3
)

64 
	`out_byã
(
PIC1_CMD
, 
ocw3
);

65 
	`out_byã
(
PIC2_CMD
, 
ocw3
);

66  (
	`ö_byã
(
PIC2_CMD
Ë<< 8Ë| in_byã(
PIC1_CMD
);

67 
	}
}

70 
u16
 
	$pic_gë_úr
()

72  
	`__pic_gë_úq_ªg
(
PIC_READ_IRR
);

73 
	}
}

76 
u16
 
	$pic_gë_i§
()

78  
	`__pic_gë_úq_ªg
(
PIC_READ_ISR
);

79 
	}
}

80 
	$íd_8259A
(
u32
 
úq
){

82 
	}
}

90 
	$mask_™d_ack_8259A
(
u32
 
úq
){

91 if(
úq
 >8Ë
	`out_byã
(0xa0, 0x20);

92 
	`out_byã
(0x20, 0x20);

93 
	}
}

95 
	$wrôe_imr_bô
(
boﬁ
 
ma°î
, 
bô_off£t
, 
vÆue
){

96 
p‹t
 = 
ma°î
 ? 0x21 :0xa1;

97 
mask
 = 
	`ö_byã
(
p‹t
);

98 if(
vÆue
Ë
	`__bt
(&
mask
, 
bô_off£t
);

99 
	`__bå
(&
mask
, 
bô_off£t
);

100 
	`out_byã
(
p‹t
, 
mask
);

101 
	}
}

103 
	$wrôe_imr_by_úq
(
úq
, 
vÆue
){

104 
	`as£π
(
úq
 !2 && irq >0 && irq < 
NR_IRQS
);

106 if(
úq
 >= 8){

107 
úq
 -= 8;

108 
	`wrôe_imr_bô
(
Ál£
, 
úq
, 
vÆue
);

110 
	`wrôe_imr_bô
(
åue
, 
úq
, 
vÆue
);

111 
	}
}

113 
	$íabÀ_8259A_úq
(
u32
 
úq
){

114 
	`wrôe_imr_by_úq
(
úq
, 0);

115 
	}
}

117 
	$dißbÀ_8259A_úq
(
u32
 
úq
){

118 
	`wrôe_imr_by_úq
(
úq
, 1);

119 
	}
}

121 
	$öô_8259A
(
x
){

123 
	}
}

125 
hw_úq_c⁄åﬁÀr
 
	gi8259A_úq_ty≥
 = {

126 
íabÀ_8259A_úq
,

127 
dißbÀ_8259A_úq
,

128 
mask_™d_ack_8259A
,

129 
íd_8259A


132 
	$öô_ISA_úqs
(){

133 
	`öô_8259A
(0);

135 
i
 = 0; i < 
NR_IRQS
; i++){

136 
úq_desc
[
i
].
°©us
 = 
IRQ_DISABLED
;

137 
úq_desc
[
i
].
°©us
 += (1<<31);

138 
úq_desc
[
i
].
a˘i⁄
 = 0;

139 if(
i
 < 16Ë
úq_desc
[i].
hw_h™dÀr
 = &
i8259A_úq_ty≥
;

140 
	`•ö
("irq channelÇumber > 16 !");

142 
	}
}

	@include/asm-generic/errno-base.h

1 #i‚de‡
ERRNO_BASE_H


2 
	#ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@include/asm-generic/errno.h

1 #i‚de‡
ERRNO_H


2 
	#ERRNO_H


	)

3 
	~<asm-gíîic/î∫o-ba£.h
>

	@include/asm-generic/fcntl.h

1 #i‚de‡
ASM_GENERIC_FCNTL_H


2 
	#ASM_GENERIC_FCNTL_H


	)

3 
	#O_ACCMODE
 3

	)

4 
	#O_RDONLY
 0

	)

5 
	#O_WRONLY
 1

	)

6 
	#O_RDWR
 2

	)

	@include/asm-generic/io.h

	@include/asm/resource.h

1 #i‚de‡
RESOURCE_H


2 
	#RESOURCE_H


	)

4 
	mRLIMIT_CPU
 ,

5 
	mRLIMIT_FSIZE
 ,

6 
	mRLIMIT_NOFILE
 ,

9 
	mRLIMIT_MAX


12 
	sæimô
{

13 
	mcur
;

14 
	mmax
;

	@include/linux/NR_syscall.h

1 #i‚de‡
NR_SYSCALL_H


2 
	#NR_SYSCALL_H


	)

3 
	#NR_bad
 0

	)

4 
	#NR_exô
 1

	)

5 
	#NR_f‹k
 2

	)

6 
	#NR_ªad
 3

	)

7 
	#NR_wrôe
 4

	)

8 
	#NR_›í
 5

	)

9 
	#NR_˛o£
 6

	)

10 
	#NR_waôpid
 7

	)

11 
	#NR_¸ót
 8

	)

12 
	#NR_lök
 9

	)

14 
	#NR_¥ötf
 10

	)

15 
	#NR_execve
 11

	)

16 
	#NR_chdú
 12

	)

17 
	#NR_time
 13

	)

18 
	#NR_mknod
 14

	)

19 
	#NR_chmod
 15

	)

20 
	#NR_lchown
 16

	)

21 
	#NR_bªak
 17

	)

22 
	#NR_ﬁd°©
 18

	)

23 
	#NR_l£ek
 19

	)

24 
	#NR_gëpid
 20

	)

25 
	#NR_mou¡
 21

	)

26 
	#NR_umou¡
 22

	)

27 
	#NR_£tuid
 23

	)

28 
	#NR_gëuid
 24

	)

29 
	#NR_°ime
 25

	)

30 
	#NR_±ø˚
 26

	)

31 
	#NR_Æ¨m
 27

	)

32 
	#NR_ﬁdf°©
 28

	)

33 
	#NR_∑u£
 29

	)

34 
	#NR_utime
 30

	)

35 
	#NR_°ty
 31

	)

36 
	#NR_gây
 32

	)

37 
	#NR_ac˚ss
 33

	)

38 
	#NR_ni˚
 34

	)

39 
	#NR_·ime
 35

	)

40 
	#NR_sync
 36

	)

41 
	#NR_kûl
 37

	)

42 
	#NR_ª«me
 38

	)

43 
	#NR_mkdú
 39

	)

44 
	#NR_rmdú
 40

	)

45 
	#NR_dup
 41

	)

46 
	#NR_pùe
 42

	)

47 
	#NR_times
 43

	)

48 
	#NR_¥of
 44

	)

49 
	#NR_brk
 45

	)

50 
	#NR_£tgid
 46

	)

51 
	#NR_gëgid
 47

	)

52 
	#NR_sig«l
 48

	)

53 
	#NR_gëeuid
 49

	)

54 
	#NR_gëegid
 50

	)

55 
	#NR_ac˘
 51

	)

56 
	#NR_umou¡2
 52

	)

57 
	#NR_lock
 53

	)

58 
	#NR_io˘l
 54

	)

59 
	#NR_f˙é
 55

	)

60 
	#NR_mpx
 56

	)

61 
	#NR_£çgid
 57

	)

62 
	#NR_ulimô
 58

	)

63 
	#NR_ﬁdﬁdu«me
 59

	)

64 
	#NR_umask
 60

	)

65 
	#NR_chroŸ
 61

	)

66 
	#NR_u°©
 62

	)

67 
	#NR_dup2
 63

	)

68 
	#NR_gëµid
 64

	)

69 
	#NR_gëpgΩ
 65

	)

70 
	#NR_£tsid
 66

	)

71 
	#NR_siga˘i⁄
 67

	)

72 
	#NR_sgëmask
 68

	)

73 
	#NR_s£tmask
 69

	)

74 
	#NR_£åeuid
 70

	)

75 
	#NR_£åegid
 71

	)

76 
	#NR_sigsu•íd
 72

	)

77 
	#NR_sig≥ndög
 73

	)

78 
	#NR_£tho°«me
 74

	)

79 
	#NR_£ålimô
 75

	)

80 
	#NR_gëæimô
 76

	)

81 
	#NR_gërußge
 77

	)

82 
	#NR_gëtimeofday
 78

	)

83 
	#NR_£âimeofday
 79

	)

84 
	#NR_gëgroups
 80

	)

85 
	#NR_£tgroups
 81

	)

86 
	#NR_£À˘
 82

	)

87 
	#NR_symlök
 83

	)

88 
	#NR_ﬁdl°©
 84

	)

89 
	#NR_ªadlök
 85

	)

90 
	#NR_u£lib
 86

	)

91 
	#NR_sw≠⁄
 87

	)

92 
	#NR_ªboŸ
 88

	)

93 
	#NR_ªaddú
 89

	)

94 
	#NR_mm≠
 90

	)

95 
	#NR_munm≠
 91

	)

96 
	#NR_åunˇã
 92

	)

97 
	#NR_·runˇã
 93

	)

98 
	#NR_fchmod
 94

	)

99 
	#NR_fchown
 95

	)

100 
	#NR_gë¥i‹ôy
 96

	)

101 
	#NR_£çri‹ôy
 97

	)

102 
	#NR_¥ofû
 98

	)

103 
	#NR_°©fs
 99

	)

104 
	#NR_f°©fs
 100

	)

105 
	#NR_i›îm
 101

	)

106 
	#NR_sockëˇŒ
 102

	)

107 
	#NR_sy¶og
 103

	)

108 
	#NR_£tôimî
 104

	)

109 
	#NR_gëôimî
 105

	)

110 
	#NR_°©
 106

	)

111 
	#NR_l°©
 107

	)

112 
	#NR_f°©
 108

	)

113 
	#NR_ﬁdu«me
 109

	)

114 
	#NR_i›l
 110

	)

115 
	#NR_vh™gup
 111

	)

116 
	#NR_idÀ
 112

	)

117 
	#NR_vm86ﬁd
 113

	)

118 
	#NR_waô4
 114

	)

119 
	#NR_sw≠off
 115

	)

120 
	#NR_sysöfo
 116

	)

121 
	#NR_ùc
 117

	)

122 
	#NR_fsync
 118

	)

123 
	#NR_sigªtu∫
 119

	)

124 
	#NR_˛⁄e
 120

	)

125 
	#NR_£tdomaö«me
 121

	)

126 
	#NR_u«me
 122

	)

127 
	#NR_modify_ldt
 123

	)

128 
	#NR_adjtimex
 124

	)

129 
	#NR_m¥Ÿe˘
 125

	)

130 
	#NR_sig¥ocmask
 126

	)

131 
	#NR_¸óã_moduÀ
 127

	)

132 
	#NR_öô_moduÀ
 128

	)

133 
	#NR_dñëe_moduÀ
 129

	)

134 
	#NR_gë_kî√l_syms
 130

	)

135 
	#NR_quŸa˘l
 131

	)

136 
	#NR_gëpgid
 132

	)

137 
	#NR_fchdú
 133

	)

138 
	#NR_bdÊush
 134

	)

139 
	#NR_sysfs
 135

	)

140 
	#NR_≥rs⁄Æôy
 136

	)

141 
	#NR_afs_sysˇŒ
 137

	)

142 
	#NR_£tfsuid
 138

	)

143 
	#NR_£tfsgid
 139

	)

144 
	#NR__Œ£ek
 140

	)

145 
	#NR_gëdíts
 141

	)

146 
	#NR__√w£À˘
 142

	)

147 
	#NR_Êock
 143

	)

148 
	#NR_msync
 144

	)

149 
	#NR_ªadv
 145

	)

150 
	#NR_wrôev
 146

	)

151 
	#NR_gësid
 147

	)

152 
	#NR_fd©async
 148

	)

153 
	#NR__sys˘l
 149

	)

154 
	#NR_mlock
 150

	)

155 
	#NR_mu∆ock
 151

	)

156 
	#NR_mlockÆl
 152

	)

157 
	#NR_mu∆ockÆl
 153

	)

158 
	#NR_sched_£ç¨am
 154

	)

159 
	#NR_sched_gë∑øm
 155

	)

160 
	#NR_sched_£tscheduÀr
 156

	)

161 
	#NR_sched_gëscheduÀr
 157

	)

162 
	#NR_sched_yõld
 158

	)

163 
	#NR_sched_gë_¥i‹ôy_max
 159

	)

164 
	#NR_sched_gë_¥i‹ôy_mö
 160

	)

165 
	#NR_sched_º_gë_öãrvÆ
 161

	)

166 
	#NR_«no¶ìp
 162

	)

167 
	#NR_mªm≠
 163

	)

168 
	#NR_£åesuid
 164

	)

169 
	#NR_gëªsuid
 165

	)

170 
	#NR_vm86
 166

	)

171 
	#NR_quîy_moduÀ
 167

	)

172 
	#NR_pﬁl
 168

	)

173 
	#NR_nfs£rv˘l
 169

	)

174 
	#NR_£åesgid
 170

	)

175 
	#NR_gëªsgid
 171

	)

176 
	#NR_¥˘l
 172

	)

177 
	#NR_π_sigªtu∫
 173

	)

178 
	#NR_π_siga˘i⁄
 174

	)

179 
	#NR_π_sig¥ocmask
 175

	)

180 
	#NR_π_sig≥ndög
 176

	)

181 
	#NR_π_sigtimedwaô
 177

	)

182 
	#NR_π_sigqueueöfo
 178

	)

183 
	#NR_π_sigsu•íd
 179

	)

184 
	#NR_¥ód
 180

	)

185 
	#NR_pwrôe
 181

	)

186 
	#NR_chown
 182

	)

187 
	#NR_gëcwd
 183

	)

188 
	#NR_ˇpgë
 184

	)

189 
	#NR_ˇp£t
 185

	)

190 
	#NR_sigÆt°ack
 186

	)

191 
	#NR_£ndfûe
 187

	)

192 
	#NR_gëpmsg
 188

	)

193 
	#NR_puçmsg
 189

	)

194 
	#NR_vf‹k
 190

	)

195 
	#NR_ugëæimô
 191

	)

196 
	#NR_mm≠2
 192

	)

197 
	#NR_åunˇã64
 193

	)

198 
	#NR_·runˇã64
 194

	)

199 
	#NR_°©64
 195

	)

200 
	#NR_l°©64
 196

	)

201 
	#NR_f°©64
 197

	)

202 
	#NR_lchown32
 198

	)

203 
	#NR_gëuid32
 199

	)

204 
	#NR_gëgid32
 200

	)

205 
	#NR_gëeuid32
 201

	)

206 
	#NR_gëegid32
 202

	)

207 
	#NR_£åeuid32
 203

	)

208 
	#NR_£åegid32
 204

	)

209 
	#NR_gëgroups32
 205

	)

210 
	#NR_£tgroups32
 206

	)

211 
	#NR_fchown32
 207

	)

212 
	#NR_£åesuid32
 208

	)

213 
	#NR_gëªsuid32
 209

	)

214 
	#NR_£åesgid32
 210

	)

215 
	#NR_gëªsgid32
 211

	)

216 
	#NR_chown32
 212

	)

217 
	#NR_£tuid32
 213

	)

218 
	#NR_£tgid32
 214

	)

219 
	#NR_£tfsuid32
 215

	)

220 
	#NR_£tfsgid32
 216

	)

221 
	#NR_pivŸ_roŸ
 217

	)

222 
	#NR_möc‹e
 218

	)

223 
	#NR_madvi£
 219

	)

224 
	#NR_madvi£1
 219

	)

225 
	#NR_gëdíts64
 220

	)

226 
	#NR_f˙é64
 221

	)

	@include/linux/arp.h

1 #i‚de‡
LINUX_ARP_H


2 
	#LINUX_ARP_H


	)

3 
	~<√t/¨p.h
>

	@include/linux/assert.h

1 #i‚de‡
ASSERT_H


2 
	#ASSERT_H


	)

4 
as£π_func
(*
exp
,*
fûe
,*
ba£_fûe
,
löe
);

6 
	#as£π
(
exp
) \

8 if(!(
exp
)Ë
	`as£π_func
(#exp,
__FILE__
,
__BASE_FILE__
,
__LINE__
); \

9 } 0)

	)

12 
	#a§t
 
as£π


	)

	@include/linux/bh.h

1 #i‚de‡
BH_H


2 
	#BH_H


	)

4 (*
	tbh_‚
)(*
	td©a
) ;

5 
	#BH_FLAG_DISABLE
 1

	)

6 
bh_Êags
;

7 
ölöe
 
	$bh_íabÀ
(){

8 
bh_Êags
 &~ 
BH_FLAG_DISABLE
;

9 
	}
}

11 
ölöe
 
	$bh_dißbÀ
(){

12 
bh_Êags
 |
BH_FLAG_DISABLE
;

13 
	}
}

15 
Æloc_bh
(
bh_‚
 
routöe
, *
d©a
);

16 
‰ì_bh
(
bhid
);

17 
m¨k_bh
(
bhid
);

18 
do_bh
();

	@include/linux/binfmts.h

1 #i‚de‡
BINFMTS_H


2 
	#BINFMTS_H


	)

3 
	~<vÆTy≥.h
>

4 
	g±_ªgs
;

6 
	slöux_bö¥m
{

7 *
	mfûï©h
;

8 **
	m¨gv
;

9 **
	mívp
;

11 
fûe
 *
	mfûe
;

12 
	mbuf
[128];

15 
	slöux_böfmt
{

16 (*
	mlﬂd_bö¨y
)(
	mlöux_bö¥m
 *, 
	m±_ªgs
 *);

17 
löux_böfmt
 *
	m√xt
, *
	m¥ev
;

20 
boﬁ
 
ªgi°î_böfmt
(
löux_böfmt
* 
böfmt
);

	@include/linux/blkdev.h

1 #i‚de‡
BLKDEV_H


2 
	#BLKDEV_H


	)

3 
	~<vÆTy≥.h
>

4 
	~<li°.h
>

5 
	~<¥oc.h
>

6 
	~<löux/buf„r_hód.h
>

7 
	#READ
 0

	)

8 
	#WRITE
 1

	)

9 
	#MAJOR
(
dev_id
Ë((dev_idË>> 8)

	)

10 
	#MINOR
(
dev_id
Ë((dev_idË& 0xff)

	)

12 
	#MKDEV
(
maj‹
, 
mö‹
Ë–((maj‹Ë<< 8Ë+ mö‹ )

	)

15 
	#BLK_UNIT
(
dev_id
Ë(
blk_devs
[ 
	`MAJOR
(dev_idË].
unôs
[
	`MINOR
(dev_id)])

	)

17 
	#MAX_BLKDEV
 200

	)

18 
	#MAX_REQUEST
 32

	)

19 
	#BLOCK_SIZE
 4096

	)

27 
	#SYSID_EXTEND
 0X5

	)

28 
	#SYSID_LINUX
 0X83

	)

29 
	#SYSID_FAT16
 0X6

	)

30 
	#SYSID_FAT32
 1

	)

31 
	#SYSID_NTFS
 0x7

	)

32 
	#SYSID_CELL
 0x20

	)

33 
	s∑πôi⁄
{

34 
	mboŸ
;

35 
	m°¨t_hód
;

36 
	m_°¨t_£˘‹
;

37 
	m°¨t_cyÀndî
;

39 
	msys_id
;

40 
	míd_hód
;

41 
	míd_£˘‹
;

42 
	míd_cyÀndî
;

44 
	m°¨t_£˘‹
;

45 
	mtŸÆ_£˘‹s
;

48 
	sªque°
{

49 
li°_hód
 
	mã¡a˛e
;

50 
u16
 
	mdev_id
;

51 
	mcmd
;

52 
	m°¨t
;

53 
	mcou¡
;

54 *
	mbuf
;

55 
pcb
 *
	maskî
;

56 
buf„r_hód
 *
	mbh
;

62 
	sblk_unô
 {

67 
	m°¨t_£˘‹
;

68 
	mtŸÆ_£˘‹s
;

69 
li°_hód
 *
	mhŸabÀ
;

70 
	mhŸabÀ_Àn
;

73 
	#HOTABLE_LEN2
 64

	)

76 
u32
 
	mdev_id
;

77 
boﬁ
 
	mh™zi
;

83 
	sblk_dev
{

87 (*
	mdo_ªque°
)(
u32
 
	mdev_id
);

88 (*
	madd_ªque°
)(
ªque°
 *
	mrq
);

89 (*
	mglobÆ2loˇl
)(
u32
 *
	mdev
, 
ul⁄g
 *
	mblock
);

98 
blk_unô
 **
	munôs
;

99 
	munômax
;

100 
	munôcy˛e
;

102 
blk_dev
 
	gblk_devs
[
MAX_BLKDEV
];

103 
	sªque°_queue
{

104 
li°_hód
 
	mqueue_hód
;

116 
	mru¬ög
;

125 
	gªque°_queue
 * (
	tgë_queue_‚
)(
	tu16
 
	tdev_id
);

126 
	squeue_gëãr
{

127 
ªque°_queue
 
	mªque°_queue
;

128 
gë_queue_‚
 * 
	mgë_queue
;

129 *
	md©a
;

134 
ªque°_queue
 * 
blk_gë_queue
(
u16
 
dev_id
);

136 
Œ_rw_blocks
(
u32
 
dev_id
, 
rw
, 
ul⁄g
 
°¨t
, ul⁄g 
cou¡
, *
buf
);

138 
Œ_rw_block
(
rw
, 
buf„r_hód
 *
buf„rhód
);

139 
ªgi°î_queue_gëãr
(
maj‹
, 
gë_queue_‚
 *
gë_queue
, *
d©a
);

141 
ªgi°î_blkunô
(
blk_unô
 *
unô
, 
u32
 
dev
);

142 
ªgi°î_blkdev
(
maj‹
);

143 
buf„r_hód
 *
mm≠_disk
(
u32
 
dev
, 
ul⁄g
 
block
);

144 
munm≠_disk
(
buf„r_hód
 *
block
);

146 
öô_blkœyî_basic
();

147 
öô_blkœyî
();

150 
gíîic_mk_ªque°
(
rw
, 
buf„r_hód
 *
bh
);

153 
	#BLOCK_SECTORS
 (
BLOCK_SIZE
 / 512)

	)

154 
	#block2£˘‹s
(
blocknum
Ë–(blocknum )* 
BLOCK_SECTORS
)

	)

155 
	#block2lba
 
block2£˘‹s


	)

156 
	#lba2block
(
lba
Ë–÷baË/ 
BLOCK_SECTORS
)

	)

	@include/linux/buffer_head.h

1 #i‚de‡
BUFFER_HEAAD_H


2 
	#BUFFER_HEAAD_H


	)

3 
	~<vÆTy≥.h
>

4 
	~<li°.h
>

7 
	sbuf„r_hód
{

8 
u32
 
	mdev_id
;

9 
ul⁄g
 
	mblock
;

10 *
	md©a
;

12 
boﬁ
 
	mio
;

13 
boﬁ
 
	mlock
;

14 
boﬁ
 
	mdúty
;

17 
	mcou¡
;

18 
li°_hód
 
	mhash
;

19 
li°_hód
 
	mÃu
;

20 
li°_hód
 
	mwaô
;

	@include/linux/byteorder/generic.h

1 #i‚de‡
BYTEORDER_GENERIC_H


2 
	#BYTEORDER_GENERIC_H


	)

3 
	~<vÆTy≥.h
>

4 
ölöe
 
u16
 
	$ht⁄s
(
u16
 
ho°sh‹t
){

5 
__asm__
 
	`__vﬁ©ûe__
("xchg %%ah, %%al"

6 :"˜"(
ho°sh‹t
)

7 :"a"(
ho°sh‹t
)

9  
ho°sh‹t
;

10 
	}
}

12 
ölöe
 
u32
 
	$ht⁄l
(
u32
 
ho°l⁄g
){

13 
__asm__
 
	`__vﬁ©ûe__
("bswap %1"

14 :"Ù"(
ho°l⁄g
)

15 :"r"(
ho°l⁄g
)

17  
ho°l⁄g
;

18 
	}
}

19 
	#¡ohs
(
x
Ë
	`ht⁄s
(x)

	)

20 
	#¡ohl
(
x
Ë
	`ht⁄l
(x)

	)

22 
	#BYTE_ENDIAN_FLIP2
(
x
Ëx = 
	`ht⁄s
(x)

	)

23 
	#BYTE_ENDIAN_FLIP4
(
x
Ëx = 
	`ht⁄l
(x)

	)

	@include/linux/cell.h

1 #i‚de‡
CELL_H


2 
	#CELL_H


	)

3 
	~<löux/˚Œ_comm⁄.h
>

5 
	s˚Œ_sb_öfo
{

6 
	mroŸ˚Œ
;

7 
	m˚Œsize
;

8 
	m˚Œnum
;

9 *
	mbôm≠
;

13 
	s˚Œ_öode_öfo
{

16 
˚Œ_ªad_su≥r
(
su≥r_block
 *
sb
);

	@include/linux/cell_common.h

6 #i‚de‡
CELL_COMMON_H


7 
	#CELL_COMMON_H


	)

9 
	#ROOTCELL_DEFAULT
 4096

10 
	#CELL_SIZE
 (128 * 1024)

	)

11 
	#CELL_HEADER_SIZE
 ()(((
˚Œ
 *)0)->
d©a
)

	)

12 
	#CELL_DATA_MAX
 (
CELL_SIZE
 - 
CELL_HEADER_SIZE
)

	)

13 
	s˚Œ_díåy
{

14 
	mÀn
;

15 
	m˚Œid
;

16 
	m«me
[0];

18 
	s˚Œ
{

19 
	mmktime
;

20 
	mchgtime
;

21 
	msize
;

22 
	mty≥
;

24 
˚Œ_díåy
 
	míts
[0];

25 
	md©a
[0];

28 
	s˚Œ_su≥rblock
{

31 
	mÊags
[4];

32 
	m˚Œsize
;

33 
	m˚Œnum
;

34 
	mroŸ˚Œ
;

35 
	mbôm≠
[0];

38 
	mroom
[1024];

	@include/linux/ctype.h

1 #i‚de‡
CTYPE_H


2 
	#CTYPE_H


	)

3 
	~<vÆTy≥.h
>

5 
ölöe
 
boﬁ
 
	$isdigô
(
c
){

6  
c
 <= 9 && c >= 0;

7 
	}
}

	@include/linux/dcache.h

1 #i‚de‡
DCACHE_H


2 
	#DCACHE_H


	)

3 
	~<li°.h
>

4 
	~<löux/mou¡.h
>

6 
li°_hód
 *
	gdíåy_hashèbÀ
;

7 
	#D_HASHTABLE_LEN
 1024

	)

9 
	sq°r
{

10 c⁄° *
	m«me
;

11 
	mÀn
;

12 
	mhash
;

14 
	sdíåy_›î©i⁄s
{

15 (*
	mcom∑ª
Ë(
	mq°r
 *, qstr *);

17 
	sdíåy
{

18 
öode
 *
	möode
;

19 
díåy
 *
	m∑ª¡
;

20 
su≥r_block
 *
	msb
;

21 
q°r
 
	m«me
;

22 
díåy_›î©i⁄s
 *
	m›î©i⁄s
;

23 
li°_hód
 
	mvfsmou¡
;

24 
	mcou¡
;

26 
li°_hód
 
	mhash
;

60 
díåy
 *
	$dgë
(
díåy
 *
dú
){

61 
dú
->
cou¡
 ++;

62  
dú
;

63 
	}
}

97 
	$dput
(
díåy
 *dentry)

99 i‡(!
díåy
)

102 
ª≥©
:

103 i‡(
	`©omic_ªad
(&
díåy
->
d_cou¡
) == 1)

104 
	`might_¶ìp
();

105 i‡(!
	`©omic_dec_™d_lock
(&
díåy
->
d_cou¡
, &
dˇche_lock
))

108 
	`•ö_lock
(&
díåy
->
d_lock
);

109 i‡(
	`©omic_ªad
(&
díåy
->
d_cou¡
)) {

110 
	`•ö_u∆ock
(&
díåy
->
d_lock
);

111 
	`•ö_u∆ock
(&
dˇche_lock
);

118 i‡(
díåy
->
d_›
 && díåy->d_›->
d_dñëe
) {

119 i‡(
díåy
->
d_›
->
	`d_dñëe
(dentry))

120 
unhash_ô
;

123 i‡(
	`d_unhashed
(
díåy
))

124 
kûl_ô
;

125 i‡(
	`li°_em±y
(&
díåy
->
d_Ãu
)) {

126 
díåy
->
d_Êags
 |
DCACHE_REFERENCED
;

127 
	`díåy_Ãu_add
(
díåy
);

129 
	`•ö_u∆ock
(&
díåy
->
d_lock
);

130 
	`•ö_u∆ock
(&
dˇche_lock
);

133 
unhash_ô
:

134 
	`__d_dr›
(
díåy
);

135 
kûl_ô
:

137 
	`díåy_Ãu_dñ
(
díåy
);

138 
díåy
 = 
	`d_kûl
(dentry);

139 i‡(
díåy
)

140 
ª≥©
;

141 
	}
}

154 
díåy
 *
d_¸óã
(díåy *
∑ª¡
, 
q°r
 *qstr);

155 
díåy
 *
d_lookup
(díåy *
dú
, 
q°r
 *
«me
);

157 
	~<löux/¶ab.h
>

158 
¶ab_hód
 *
	gdíåy_ˇche
;

160 
d_ªhash
(
díåy
 *
dú
, 
hash
);

161 
ölöe
 
díåy
 * 
	$dgë
(
díåy
 *dentry){

162 
díåy
->
cou¡
++;

163  
díåy
;

164 
	}
}

166 
ölöe
 
	$dput
(
díåy
 *dentry){

167 
díåy
->
cou¡
--;

168 
	}
}

	@include/linux/errno.h

10 #i‚de‡
LINUX_ERRNO_H


11 
	#LINUX_ERRNO_H


	)

12 
	~<asm/î∫o.h
>

	@include/linux/fs.h

1 #i‚de‡
FS_H


2 
	#FS_H


	)

3 
	~<löux/dˇche.h
>

4 
	~<¥oc.h
>

5 
	~<löux/¶ab.h
>

11 
	#FMODE_READ
 1

	)

13 
	#FMODE_WRITE
 2

	)

15 
	#FMODE_SEEK
 4

	)

17 
	söode_›î©i⁄s
{

26 (*
	mlookup
)(
öode
 *
	mdú
, 
díåy
 *
	mdíåy
);

30 
	gsu≥r_block
;

31 
	gfûe_›î©i⁄s
;

32 
	söode
{

33 
	möo
;

34 
u16
 
	mdev
;

35 
u16
 
	mrdev
;

36 
u32
 
	mmktime
;

37 
u32
 
	mchgtime
;

38 
u32
 
	msize
;

39 
su≥r_block
 *
	msb
;

40 
öode_›î©i⁄s
 *
	m›î©i⁄s
;

41 
fûe_›î©i⁄s
 *
	mfûe_›s
;

42 
li°_hód
 
	mhash
;

44 
	#INODE_COMMON_SIZE
 128

	)

45 
	mcomm⁄
[
INODE_COMMON_SIZE
];

48 
	ssu≥r_›î©i⁄s
{

49 (*
	mªad_öode
)(
öode
 *
	möode
);

51 
	ssu≥r_block
{

52 
su≥r_›î©i⁄s
 *
	m›î©i⁄s
;

53 
díåy
 *
	mroŸ
;

54 
u16
 
	mdev
;

55 
	mcomm⁄
[512];

58 
	sö_dú
{

59 
díåy
 *
	mdíåy
;

60 
vfsmou¡
 *
	mm¡
;

63 
	sfûe_sy°em_ty≥
{

64 
	m«me
[16];

65 (*
	mªad_su≥r
)(
	msu≥r_block
 *);

66 
fûe_sy°em_ty≥
 *
	m√xt
, *
	m¥ev
;

69 
li°_hód
 *
	göode_hashèbÀ
;

70 
	#I_HASHTABLE_LEN
 4096

	)

72 
	sfûe
{

73 
díåy
 *
	mdíåy
;

74 
	mpos
;

75 
	mÊags
;

76 
	mmode
;

78 
	mcou¡
;

79 *
	md©a
;

85 
	sfûe_›î©i⁄s
{

86 (*
	ml£ek
)(
	mfûe
 *, 
	moff£t
, 
	m‹igö
);

87 (*
	mªad
)(
	mfûe
 *, *
	m∑th
, 
	msize
,

88 *
	mµos
);

89 (*
	m›í
)(
	möode
 *, 
	mfûe
 *);

90 (*
	m⁄˛o£
)(
	mfûe
 *);

95 
ölöe
 
fûe
 *
	$fcheck
(
fd
){

96 if(
fd
 >
cuºít
->
fûes
->
max_fds
)  0;

97  
cuºít
->
fûes
->
fûï
[
fd
];

98 
	}
}

99 
ölöe
 
fûe
 *
	$fgë
(
fd
){

100 
fûe
 *fûê
	`fcheck
(
fd
);

101 if(
fûe
){

102 
fûe
->
cou¡
++;

104  
fûe
;

105 
	}
}

106 
ªgi°î_fûesy°em
(*
«me
, (*
ªad_su≥r
)(
su≥r_block
 *));

107 
vfsmou¡
 * 
	`do_mou¡
(
u16
 
dev
, *
dú
, *
ty≥
);

108 
	`öô_vfs
();

110 
	`∑thwÆk
(*
∑th
, 
ö_dú
 *
ödú
, 
Êags
);

111 
öode
 *
	`igë
(
su≥r_block
 *
sb
, 
öo
);

112 
	`sys_›í
(*, , );

113 
	`sys_ªad
(, *, );

115 
¶ab_hód
 *
öode_ˇche
;

116 
¶ab_hód
 *
fûe_ˇche
;

119 
fûe
 * 
	`k_›í
(*
∑th
, 
ul⁄g
 
Êags
, ul⁄g 
mode
);

120 
	`k_£ek
(
fûe
 *fûe, 
off£t
, 
‹igö
);

121 
	`k_ªad
(
fûe
 *fûe, *
buf
, 
size
);

122 
	`k_˛o£
(
fûe
*file);

123 
	#gë_fûe
(
fûe
Ë–(fûe)->
cou¡
++ )

	)

125 
¶ab_hód
 *

	@include/linux/fs_struct.h

1 #i‚de‡
FS_STRUCT_H


2 
	#FS_STRUCT_H


	)

3 
	sfs_°ru˘
{

4 
díåy
 *
	mroŸ
, *
	mpwd
;

5 
vfsmou¡
 *
	mroŸm¡
, *
	mpwdm¡
;

	@include/linux/icmp.h

1 #i‚de‡
LINUX_ICMP_H


2 
	#LINUX_ICMP_H


	)

3 
	~<√t/icmp.h
>

	@include/linux/ide.h

1 #i‚de‡
IDE_H


2 
	#IDE_H


	)

3 
	~<löux/blkdev.h
>

5 
	#WIN_READ
 0x20

	)

6 
	#WIN_WRITE
 0x30

	)

7 
	#WIN_IDENTIFY
 0xec

	)

9 
	#IDE_NR_PORTS
 255

	)

10 
	#MAX_DRIVES
 2

	)

13 
	#STATUS_ERR
 1

	)

14 
	#STATUS_INDEX
 2

	)

15 
	#STATUS_ECC
 4

	)

16 
	#STATUS_DRQ
 8

	)

17 
	#STATUS_SEEK
 16

	)

18 
	#STATUS_WRERR
 32

	)

19 
	#STATUS_READY
 64

	)

20 
	#STATUS_BUSY
 128

	)

22 
	#REG_DATA
 (0x1f0)

	)

24 
	#REG_ERROR
 (0X1F1)

	)

25 
	#REG_FEATURES
 (0X1F1)

	)

27 
	#REG_COUNT
 (0X1F2)

	)

28 
	#REG_LBA_LOW
 (0X1F3)

	)

29 
	#REG_LBA_MID
 (0X1F4)

	)

30 
	#REG_LBA_HIGH
 (0x1F5)

	)

31 
	#REG_DEVICE
 (0X1F6)

	)

33 
	#REG_STATUS
 (0x1F7)

	)

34 
	#REG_COMMAND
 (0x1F7)

	)

36 
	#REG_CONTROL
 (0X3F6)

	)

38 
	mSLOT_REG_DATA
,

39 
	mSLOT_REG_FEATURES
,

40 
	mSLOT_REG_COUNT
,

41 
	mSLOT_REG_LBA_LOW
,

42 
	mSLOT_REG_LBA_MID
,

43 
	mSLOT_REG_LBA_HIGH
,

44 
	mSLOT_REG_DEVICE
,

45 
	mSLOT_REG_COMMAND
,

47 
	mSLOT_REG_CONTROL
,

48 
	mSLOT_REG_STATUS
 = 
SLOT_REG_COMMAND
,

49 
	mSLOT_REG_ERROR
 = 
SLOT_REG_FEATURES
,

56 
	s£À˘
{

57 
u8
 
	mhód
: 4;

58 
u8
 
	mdrv
: 1;

59 
u8
 
	mbô5
: 1;

60 
u8
 
	mlba
: 1;

61 
u8
 
	mbô7
: 1;

63 
	slba
{

64 
u8
 
	mlow
;

65 
u8
 
	mmiddÀ
;

66 
u8
 
	mhigh
;

67 
£À˘
 
	m£À˘
;

71 
	side_drive
{

72 
ªque°_queue
 
	mqueue
;

73 
	m¥e£¡
: 1;

76 
	side_hwif
{

77 
	mio_p‹ts
[
IDE_NR_PORTS
];

78 
ide_drive
 
	mdrive
[
MAX_DRIVES
];

79 
ªque°
 *
	mcur_rq
;

80 (*
	mh™dÀr
)(
	mide_hwif
 *);

83 
ide_öô
();

84 
ide_ªad_∑π©i⁄
(
maj‹
, 
drive
);

	@include/linux/if_ether.h

1 #i‚de‡
IF_ETHER_H


2 
	#IF_ETHER_H


	)

3 
	~<vÆTy≥.h
>

5 #¥agm®
∑ck
(
push
)

6 #¥agm®
∑ck
(1)

7 
	sëhhdr
{

8 
	myourmac
[6];

9 
	mmymac
[6];

10 
u16
 
	m¥Ÿocﬁ
;

12 #¥agm®
∑ck
(
p›
)

14 
	#ETHHDR_LEN
 (–
ëhhdr
Ë)

	)

	@include/linux/ip.h

1 #i‚de‡
LINUX_IP_H


2 
	#LINUX_IP_H


	)

3 
	~<√t/ù.h
>

	@include/linux/kit.h

1 #i‚de‡
KIT_H


2 
	#KIT_H


	)

8 
ölöe
 
	$˚û2n
(
x
){

9 
highe°
;

10 
__asm__
 
	`__vﬁ©ûe__
("bsr %1, %0"

11 :"Ù"(
highe°
)

12 :"r"(
x
)

14 
mask
 = (1 << 
highe°
) - 1;

15  (
x
 + 
mask
) & ~mask;

16 
	}
}

22 
ölöe
 
	$pg‹dî_√eded
(
ƒ
){

23 
‹dî
;

24 
ƒ
 = 
	`˚û2n
(nr);

25 
__asm__
 
	`__vﬁ©ûe__
("bsr %1, %0"

26 :"Ù"(
‹dî
)

27 :"r"(
ƒ
)

29  
‹dî
;

30 
	}
}

33 
ölöe
 
	$˚û_div
(
a
, 
b
){

34 
quŸõ¡
;

35 
__asm__
 
	`__vﬁ©ûe__
("xor %%edx, %%edx\n\t"

39 :"˜"(
quŸõ¡
)

40 :"a"(
a
), "b"(
b
));

41  
quŸõ¡
;

42 
	}
}

44 
ölöe
 
ul⁄g
 
	$˚û_Æign
(
ul⁄g
 
x
, ul⁄g 
gønuœrôy
){

45 
ul⁄g
 
mask
 = 
gønuœrôy
 - 1;

46  (
x
 + 
mask
) & ~mask;

47 
	}
}

49 
ölöe
 
ul⁄g
 
	$Êo‹_Æign
(
ul⁄g
 
x
, ul⁄g 
Æign
){

50 
ul⁄g
 
mask
 = 
Æign
 - 1;

51  
x
 & ~
mask
;

52 
	}
}

55 
	#POINTER_SHIFT
(
±
,
ty≥
,
Àn
Ë—y≥*)((
u32
Ìt+Àn)

	)

56 
	#EXCHG_U32
(
a
,
b
Ëdo{
c
˜;a=b;b=c;} 0)

	)

57 
	#EXCHG_PTR
(
a
, 
b
Ëdÿ{ *
tmp
 =á;á = b; b =Åmp; } 0)

	)

58 
	#EXCHG_U16
(
a
,
b
Ëdo{ 
u16
 
tmp
 =á;á = b; b =Åmp; } 0)

	)

60 
	#±r_off£t
(
±r
, 
byãs
) \

61 ((*)–()
±r
 + ()(
byãs
ËË)

	)

	@include/linux/mm.h

1 #i‚de‡
LINUX_MM_H


2 
	#LINUX_MM_H


	)

4 
	~<vÆTy≥.h
>

5 
	~<utûs.h
>

6 
	~<li°.h
>

7 
	~<mmz⁄e.h
>

8 
	~<pmm.h
>

9 
	~<löux/sched.h
>

13 
	smem_£göfo
{

14 
u32
 
	mba£_low
, 
	mba£_high
;

15 
u32
 
	mÀn_low
, 
	mÀn_high
;

16 
u32
 
	mty≥
;

21 
mm_öô
();

22 
mm_öô2
();

23 
u32
 
gmemsize
;

26 
ölöe
 
	$size2∑ges
(
size
){

27 
Àa°_∑ges
 = (
size
 + (
PAGE_SIZE
 - 1)Ë>> 
PAGE_SHIFT
;

29  
	`˚û2n
(
Àa°_∑ges
);

30 
	}
}

33 #¥agm®
∑ck
(
push
)

34 #¥agm®
∑ck
(1)

35 
	uvm_Êags
{

37 
	mªadabÀ
: 1;

38 
	mwrôabÀ
: 1;

39 
	mexecuèbÀ
: 1;

40 
	msh¨ed
: 1;

42 
	mmayªad
: 1;

43 
	mmaywrôe
: 1;

44 
	mmayexec
: 1;

45 
	mmaysh¨e
: 1;

47 
	mgrowsdown
: 1;

48 
	mgrowsup
: 1;

49 
	mdíywrôe
: 1;

50 
	md⁄tc›y
: 1;

52 
	mvÆue
;

54 #¥agm®
∑ck
(
p›
)

57 
	mVM_READ
 = 1<<0,

58 
	mVM_WRITE
 = 1<<1,

59 
	mVM_EXEC
 = 1<<2,

60 
	mVM_SHARED
 = 1<<3,

62 
	mVM_MAYREAD
 = 1<<4,

63 
	mVM_MAYWRITE
 = 1<<5,

64 
	mVM_MAYEXEC
 = 1<<6,

65 
	mVM_MAYSHARE
 = 1<<7,

68 
	mVM_GROWSDOWN
= 1<<8,

69 
	mVM_GROWSUP
 = 1<<9,

70 
	mVM_DENYWRITE
= 1<<10,

71 
	mVM_DONTCOPY
 = 1<<11,

73 
	mVM_STACK
 = 
VM_READ
 | 
VM_WRITE
 | 
VM_GROWSDOWN
 | 
VM_MAYREAD
 | 
VM_MAYWRITE
,

77 
	mMAP_FIXED
 = 0,

80 
	gvm_¨ó
;

81 
	svm_›î©i⁄s
{

82 (*
	m›í
)(
vm_¨ó
 *
	m¨ó
);

83 (*
	m˛o£
)(
vm_¨ó
 *
	m¨ó
);

84 
	m∑ge
 *(*
	mn›age
)(
vm_¨ó
 *
	m¨ó
, 
u32
 
	maddªss
, 
pgîr_code
 
	mîrcode
);

87 
	svm_¨ó
{

88 
mm
 *
	mmm
;

89 
u32
 
	m°¨t
;

90 
u32
 
	míd
;

91 
±e
 
	mem±y_±e
;

95 
vm_Êags
 
	mÊags
;

97 
vm_¨ó
 *
	m¥ev
, *
	m√xt
;

98 
vm_›î©i⁄s
 *
	m›s
;

99 
fûe
 *
	mfûe
;

100 
u32
 
	mpgoff
;

103 
¶ab_hód
 *
vm_¨ó_ˇche
;

104 
¶ab_hód
 * 
mm_ˇche
;

105 
vm_upd©e_pg¥Ÿ
(
vm_¨ó
 *
vma
);

106 
u32
 
gë_unm≠≥d_¨ó
(u32 
addr
, u32 
Àn
);

107 
vm_¨ó
 *
föd_vma
(
mm
 *mm, 
addr
);

108 * 
mm≠
(
ul⁄g
 
addr
, 
u32
 
Àn
, 
vm_Êags
, 
m≠_Êags
, 
fûe
 *fûe, u32 
off£t
);

110 
∑ge
 *

111 
comm⁄_no_∑ge
(
vm_¨ó
 *
vma
, 
u32
 
îr_addr
, 
pgîr_code
 
îrcode
);

114 
ölöe
 
vm_¨ó
 *

115 
	$föd_vma_öãr£˘i⁄
(
mm
 *mm,

116 
°¨t_addr
, 
íd_addr
)

118 
vm_¨ó
 *
bíóth
 = 
	`föd_vma
(
mm
, 
°¨t_addr
);

119 if(
bíóth
 && bíóth->
°¨t
 < 
íd_addr
){

120  
bíóth
;

123 
	}
}

125 
boﬁ
 
__ªÀa£_addªss
(
±e
 *
pgdú
, 
vaddr
);

126 
∑ge
* 
__ªsﬁve_addªss
(
±e
 *
pgdú
, 
u32
 
vaddr
, u32 
pg¥Ÿ
);

127 
boﬁ
 
vm_¨ó_shrök
(
vm_¨ó
 *
vma
, 
√w_íd
);

128 
boﬁ
 
vm_¨ó_ex∑nd
(
vm_¨ó
 *
vma
, 
√w_íd
);

129 
k_brk
(
brk
);

131 
	#PGDIR_OF_MM
(
mm
Ë–(
±e
 *)
	`__va
(mm->
¸3
.
vÆue
 & 
PAGE_MASK
Ë)

	)

	@include/linux/mount.h

1 #i‚de‡
MOUNT_H


2 
	#MOUNT_H


	)

3 
	~<löux/dˇche.h
>

4 
	~<vÆTy≥.h
>

5 
	gsu≥r_block
;

6 
	svfsmou¡
{

7 
u16
 
	mdev
;

8 
su≥r_block
 *
	msb
;

9 
díåy
 *
	msmÆl_roŸ
;

10 
díåy
 *
	mmou¡poöt
;

11 
vfsmou¡
 *
	m∑ª¡
;

12 
li°_hód
 
	m˛ash
;

13 
	mcou¡
;

16 
ölöe
 
vfsmou¡
 *
	$m¡gë
(
vfsmou¡
 *
m¡
){

17 
m¡
->
cou¡
++;

18  
m¡
;

19 
	}
}

21 
ölöe
 
	$m¡put
(
vfsmou¡
 *
m¡
){

22 
m¡
->
cou¡
--;

23 
	}
}

	@include/linux/mylist.h

1 #i‚de‡
MYLIST_H


2 
	#MYLIST_H


	)

18 
	#LL2_POP
(
Œ2
) \

20 
	`as£π
–(
Œ2
 && (Œ2)->
roŸ
 && (Œ2)->
èû
)); \

21 
Œ2
->
roŸ
 =Ül2->roŸ->
√xt
; \

22 if(
Œ2
->
roŸ
ËŒ2->roŸ->
¥ev
 = 0; \

23 
Œ2
->
èû
 =Ül2->
roŸ
; \

24 }0)

	)

27 
	#LL2_A
(
Œ2
, 
node
) \

29 
	`as£π
–(
Œ2
Ë&& (
node
) ); \

30 
	`as£π
––(
Œ2
)->
roŸ
 =0 && (Œ2)->
èû
 == 0 ) || \

31 –(
Œ2
)->
roŸ
 !0 && (Œ2)->
èû
 != 0) \

33 (
node
)->
¥ev
 = (
Œ2
)->
èû
; \

34 if–(
Œ2
)->
èû
 ){ \

35 (
Œ2
)->
èû
->
√xt
 = 
node
; \

38 (
Œ2
)->
roŸ
 = 
node
; \

40 (
node
)->
√xt
 = 0; \

41 (
Œ2
)->
èû
 = 
node
; \

42 }0)

	)

44 
	#LL2_DEL
(
Œ2
, 
node
) \

46 
	`as£π
–(
Œ2
Ë&& (
node
Ë&& (Œ2)->
roŸ
 && (Œ2)->
èû
 ); \

47 if–(
node
)->
¥ev
 ){ \

48 (
node
)->
¥ev
->
√xt
 = (node)->next; \

51 
	`as£π
–(
Œ2
)->
roŸ
 =
node
 ); \

52 (
Œ2
)->
roŸ
 = (
node
)->
√xt
; \

55 if–(
node
)->
√xt
 ){ \

56 (
node
)->
√xt
->
¥ev
 = (node)->prev; \

59 
	`as£π
–(
Œ2
)->
èû
 =
node
 ); \

60 (
Œ2
)->
èû
 = (
node
)->
¥ev
; \

62 }0)

	)

74 
	#LL_APPEND
(
li°
, 
loˇti⁄
, 
√w
)\

76 
	`as£π
((
li°
Ë&& (
loˇti⁄
Ë&& (
√w
));\

77 
d


	)

88 
	#LL_INSERT
(
li°
,
loˇti⁄
,
√w
)\

90 
	`as£π
––(
li°
Ë=(
loˇti⁄
) ) || ( (list) && (location) ) );\

91 
	`as£π
((
√w
));\

92 if(!
li°
 && !
loˇti⁄
) {\

93 
li°
 = 
√w
;\

94 
√w
->
√xt
 =Çew->
¥ev
 = 0;\

97 
√w
->
√xt
=
loˇti⁄
;\

98 
√w
->
¥ev
=
loˇti⁄
->prev;\

99 if(
loˇti⁄
->
¥ev
Ëloˇti⁄->¥ev->
√xt
=
√w
;\

100 
loˇti⁄
->
¥ev
=
√w
;\

101 if(
li°
==
loˇti⁄
Ëli°=
√w
;\

102 } 0)

	)

104 
	#LL_I
(
roŸ
, 
√w
) \

106 if(
roŸ
){ \

107 
√w
->
¥ev
 = 
roŸ
; \

108 
√w
->
√xt
 = 
roŸ
->next; \

109 if(
roŸ
->
√xt
ËroŸ->√xt->
¥ev
 = 
√w
; \

110 
roŸ
->
√xt
 = 
√w
; \

113 
roŸ
 = 
√w
; \

114 
√w
->
¥ev
 =Çew->
√xt
 = 0; \

116 }0)

	)

118 
	#LL_I2
(
roŸ
, 
√w
) \

120 
	`as£π
(
roŸ
); \

121 if(
roŸ
->
√xt
ËroŸ->√xt->
¥ev
 = 
√w
; \

122 
√w
->
√xt
 = 
roŸ
->next; \

123 
√w
->
¥ev
 = 
roŸ
; \

124 
roŸ
->
√xt
 = 
√w
; \

125 }0)

	)

127 
	#LL_REPLACE
(
roŸ
, 
ﬁd
, 
√w
) \

129 
√w
->
¥ev
 = 
ﬁd
->prev; \

130 
√w
->
√xt
 = 
ﬁd
->next; \

131 if(
√w
->
¥ev
Ë√w->¥ev->
√xt
 =Çew; \

132 if(
√w
->
√xt
Ë√w->√xt->
¥ev
 =Çew; \

133 if(
roŸ
 =
ﬁd
ËroŸ = 
√w
; \

134 }0)

	)

148 
	#LL_I_INCRE
(
li°
,
√w
,
©å
)\

150 
	`as£π
(
√w
);\

151 if(!
li°
){\

152 
li°
=
√w
;\

153 
√w
->
¥ev
Úew->
√xt
=0;\

156 *
roŸ
=
li°
;\

157 
li°
->
√xt
 && 
√w
->
©å
 >Üist->attr)Üist=list->next;\

158 if(
√w
->
©å
 > 
li°
->attr){\

159 
√w
->
√xt
 = 0;\

160 
√w
->
¥ev
=
li°
;\

161 
li°
->
√xt
 = 
√w
;\

162 
li°
=
roŸ
;\

165 
√w
->
√xt
 = 
li°
;\

166 
√w
->
¥ev
 = 
li°
->prev;\

167 if(
li°
->
¥ev
Ëli°->¥ev->
√xt
 = 
√w
;\

168 
li°
->
¥ev
=
√w
;\

169 if(
roŸ
==
li°
Ëli°=
√w
;\

170 
li°
 = 
roŸ
;\

172 } 0)

	)

175 
	#LL_I_DECRE
(
li°
,
√w
,
©å
)\

177 
	`as£π
(
√w
);\

178 if(!
li°
){\

179 
li°
=
√w
;\

180 
√w
->
¥ev
Úew->
√xt
=0;\

183 *
roŸ
=
li°
;\

184 
li°
->
√xt
 && 
√w
->
©å
 <Üist->attr)Üist=list->next;\

185 if(
√w
->
©å
 < 
li°
->attr){\

186 
√w
->
√xt
 = 0;\

187 
li°
->
√xt
=
√w
;\

188 
√w
->
¥ev
=
li°
;\

189 
li°
=
roŸ
;\

192 
√w
->
√xt
=
li°
;\

193 
√w
->
¥ev
=
li°
->prev;\

194 if(
li°
->
¥ev
Ëli°->¥ev->
√xt
=
√w
;\

195 
li°
->
¥ev
=
√w
;\

196 if(
roŸ
==
li°
Ëli°=
√w
;\

198 } 0)

	)

200 
	#LL_DEL
(
li°
,
loˇti⁄
)\

202 
	`as£π
(
li°
&&
loˇti⁄
);\

203 
	`as£π
(!(!
loˇti⁄
->
√xt
 && !loˇti⁄->
¥ev
 && (
li°
!=location)));\

204 if(
loˇti⁄
->
¥ev
Ëloˇti⁄->¥ev->
√xt
=location->next;\

205 if(
loˇti⁄
->
√xt
Ëloˇti⁄->√xt->
¥ev
=location->prev;\

206 if(
li°
==
loˇti⁄
Ëli°ˆoˇti⁄->
√xt
;\

207 } 0)

	)

209 
	#LL_INFO
(
li°
,
©å
)\

211 *
roŸ
=
li°
;\

212 
li°
){\

213 
	`¥ötf
("%d ",
li°
->
©å
);\

214 
li°
ˆi°->
√xt
;\

216 
li°
=
roŸ
;\

217 } 0)

	)

219 
	#LL_ASSIGN
(
li°
,
©å
,
vÆue
)\

221 *
roŸ
 = 
li°
;\

222 
li°
){\

223 
li°
->
©å
=
vÆue
;\

224 
li°
ˆi°->
√xt
;\

226 
li°
 = 
roŸ
;\

227 } 0)

	)

229 
	#LL_SCAN_ON_KEY
(
roŸ
, 
key
, 
vÆue
, 
ªsu…
)\

231 
ªsu…
 = 
roŸ
;\

232 
ªsu…
){\

233 if–(
ªsu…
)->
key
 =(
vÆue
) ){\

236 
ªsu…
 = (ªsu…)->
√xt
; \

238 }0)

	)

242 
	#LL_SCAN_ON_kEY_B
(
roŸ
, 
key
, 
vÆue
) \

244 
	`ty≥of
(
roŸ
Ë
cuº
 =Ñoot; \

245 
cuº
 && cuº->
key
 <(
vÆue
ËËcuº = cuº->
√xt
; \

246 
cuº
; \

247 })

	)

251 
	#LL_SCAN_ON_KEY_S
(
roŸ
, 
key
, 
vÆue
) \

253 
	`ty≥of
(
roŸ
Ë
cuº
 =Ñoot; \

254 
cuº
 && cuº->
key
 >(
vÆue
ËËcuº = cuº->
√xt
; \

255 
cuº
; \

256 })

	)

259 
	#LL_CHECK
(
roŸ
, 
node
) \

261 *
backup
 = 
roŸ
; \

262 
roŸ
){ \

263 if(
roŸ
 =
node
) ; \

264 
roŸ
 =ÑoŸ->
√xt
; \

266 
	`as£π
(
roŸ
 && "canÇot findÇode inÅhatÜist"); \

267 
roŸ
 = 
backup
; \

268 }0)

	)

274 
	#LL_I_INCRE_ON
(
roŸ
, 
√w
, 
mb
) \

276 
√w
->
¥ev
 = 0; \

277 
√w
->
√xt
 = 
roŸ
; \

278 
√w
->
√xt
 &&Çew->√xt->
mb
 <Çew->mb){ \

279 
√w
->
¥ev
 =Çew->
√xt
; \

280 
√w
->
√xt
 =Çew->next->next; \

282 if(
√w
->
√xt
Ë√w->√xt->
¥ev
 =Çew; \

283 if(
√w
->
¥ev
Ë√w->¥ev->
√xt
 =Çew; \

284 
roŸ
 = 
√w
->
√xt
; \

285 })

	)

293 
	#O_INSERT_AFTER
(
_¥ev
, 
√w
) \

295 
√w
->
√xt
 = 
_¥ev
->next; \

296 
√w
->
¥ev
 = 
_¥ev
; \

297 
_¥ev
->
√xt
->
¥ev
 = 
√w
; \

298 
_¥ev
->
√xt
 = 
√w
; \

299 })

	)

301 
	#O_INSERT_BEFORE
(
Next
, 
√w
) \

303 
√w
->
√xt
 = 
Next
; \

304 
√w
->
¥ev
 = 
Next
->prev; \

305 
Next
->
¥ev
->
√xt
 = 
√w
; \

306 
Next
->
¥ev
 = 
√w
; \

307 })

	)

310 
	#OL_I_INCRE_ON
(
roŸ
, 
√w
, 
mb
)

	)

312 
as£π
(
roŸ
 && 
√w
);

313 
ty≥of
(
roŸ
Ë
	gright⁄e
 =Ñoot;

314 
	g√w
->
	gmb
 > 
	gright⁄e
->mb && 
	gright
->
	g√xt
 !
roŸ
){

315 
right⁄e
 =Ñight⁄e->
√xt
;

317 
OL_I_BEFORE
(
right⁄e
, 
√w
);

318 if(
	groŸ
->
	gmb
 > 
	g√w
->mbËroŸ = 
√w
;

324 
	#O_INSERT_INCRE_ON
(
roŸ
, 
√w
, 
mb
) \

326 
	`as£π
(
roŸ
 && 
√w
); \

327 
	`__ty≥of__
(
roŸ
Ë
À·⁄e
 =ÑoŸ->
¥ev
; \

328 
√w
->
mb
 > 
À·⁄e
->mb){ \

329 
À·⁄e
 =Üe·⁄e->
¥ev
; \

330 if(
À·⁄e
 =
roŸ
->
¥ev
){ \

331 
roŸ
 = 
√w
; \

335 
	`O_INSERT_AFTER
(
À·⁄e
, 
√w
); \

336 })

	)

341 
	#O_SCAN_UNTIL_MEET_LARGER
(
roŸ
, 
mb
, 
vÆue
) \

343 
	`as£π
–(
roŸ
) ); \

344 
	`__ty≥of__
(
roŸ
Ë
node
 =Ñoot; \

346 if–(
node
)->
mb
 > 
vÆue
) ; \

347 
node
 =Çode->
√xt
; \

348 if(
node
 !
roŸ
) ; \

349 
node
 = 0; \

352 
node
; \

353 })

	)

355 
	#O_APPEND
(
roŸ
, 
√w
) \

357 (
√w
)->
√xt
 = 
roŸ
; \

358 (
√w
)->
¥ev
 = 
roŸ
->prev; \

359 (
roŸ
)->
¥ev
->
√xt
 = 
√w
; \

360 (
roŸ
)->
¥ev
 = 
√w
; \

361 })

	)

364 
	#O_APPEND_SAFE
(
roŸ
, 
√w
) \

366 if(!
roŸ
){ \

367 
roŸ
 = 
√w
; \

368 
√w
->
¥ev
 =Çew->
√xt
 =Çew; \

370 
	`O_APPEND
(
roŸ
, 
√w
); \

371 })

	)

	@include/linux/netdevice.h

1 #i‚de‡
NETDEVICE_H


2 
	#NETDEVICE_H


	)

3 
	~<löux/skbuff.h
>

4 
	~<vÆTy≥.h
>

7 
	sskb_queue
{

8 
sk_buff
 *
	mroŸ
;

9 
sk_buff
 *
	mèû
;

12 
	gpci_dev
;

13 
	s√t_devi˚
{

14 (*
	m›í
)(
√t_devi˚
 *
	mdev
);

15 (*
	m°›
)(
√t_devi˚
 *
	mdev
);

16 (*
	m°¨t_xmô
Ë(
sk_buff
 *
	mskb
, 
√t_devi˚
 *
	mdev
);

17 
boﬁ
 (*
tx_busy
Ë(
√t_devi˚
 *
	mdev
);

18 
u8
 
	mmac
[7];

20 
	mba£_addr
;

21 
	múq
;

22 
	mÊags
;

23 *
	m¥iv©e
;

24 
skb_queue
 
	mtx_queue
;

25 
skb_queue
 
	mrx_queue
;

26 
	m⁄_tx_bh
;

27 
	m⁄_rx_bh
;

29 
u32
 
	mùmask
;

30 
u32
 
	mù
;

31 
u32
 
	mg©eway_ù
;

32 
u32
 
	mtx_cou¡
;

33 
u32
 
	mrx_cou¡
;

35 
u32
 
	mquick_ö£π
;

36 
u32
 
	mcou¡_dr›_tok
;

37 }
	mdebug
;

38 
pci_dev
 *
	mpcidev
;

39 
u32
 
	mù_idítifõr
;

51 
nic_wake_queue
(
√t_devi˚
 *
√tdev
);

52 
√t_devi˚
 *
pick_nic
(
u32
 
de°_ù
, u32 
§c_ù
);

53 
ªgi°î_nic
(
√t_devi˚
 *
√tdev
);

54 
li°_nic
();

55 
√t_devi˚
 * 
who_am_i
(
u8
 *
mac
);

	@include/linux/pci.h

1 #i‚de‡
PCI_H


2 
	#PCI_H


	)

3 
	~<löux/pci_ªgs.h
>

4 
	~<löux/pci_víd‹.h
>

5 
	~<li°.h
>

7 
	spci_devi˚_id
{

8 
u16
 
	mvíd‹
, 
	mdevi˚
;

9 
u16
 
	msubvíd‹
, 
	msubdevi˚
;

52 #¥agm®
∑ck
(
push
)

53 #¥agm®
∑ck
(1)

54 
	spci_c⁄fig_addr
{

55 
	mÆways
:2 ;

56 
	mªg
: 6;

59 
	mfunc
: 3;

60 
	mdev
: 5;

61 
	mbus
: 8;

63 
u16
 
	mvÆue
;

65 
	mª£rved
: 7;

66 
	míabÀd
: 1;

68 #¥agm®
∑ck
 (
p›
)

70 #¥agm®
∑ck
 (
push
)

71 #¥agm®
∑ck
 (1)

72 
	spci_dev
{

73 
u16
 
	mvíd‹
;

74 
u16
 
	mdevi˚
;

75 
u16
 
	mcomm™d
;

76 
u16
 
	m°©us
;

77 
	mªvisi⁄
;

78 
	m˛ass
: 24;

79 
u8
 
	mˇchñöe
;

80 
u8
 
	mtimî
;

81 
u8
 
	mhódty≥
;

82 
u8
 
	mbi°
;

83 
	maddªss
[6];

84 
	mcis
;

85 
u16
 
	msub_víd‹
;

86 
u16
 
	msub_devi˚
;

87 
	mromaddr
;

88 
	mª£rved1
;

89 
	mª£rved2
;

90 
	múqlöe
;

91 
	múqpö
;

92 
	mmög¡
;

93 
	mmaxœt
;

96 
li°_hód
 
	mnode
;

97 
pci_drivî
 *
	mdrivî
;

98 
	mvaddªss
[6];

99 
u8
 
	mbus
;

100 
	mdev
: 5;

101 
	mfunc
: 3;

103 *
	mc‹e
;

105 #¥agm®
∑ck
 (
p›
)

107 
	spci_drivî
{

108 
li°_hód
 
	mnode
;

109 *
	m«me
;

110 
pci_devi˚_id
 *
	mid_èbÀ
;

113 (*
	m¥obe
)(
pci_dev
 *
	mdev
, c⁄° 
pci_devi˚_id
 *
	mid
);

121 
ölöe
 
	$MK_PCI_CFG_ADDR
(
bus
, 
dev
, 
func
, 
ªg
){

122 
pci_c⁄fig_addr
 
addr_°ru
 = {

123 
Æways
: 0,

124 
ªg
:Ñeg,

125 
func
: func,

126 
dev
: dev,

127 
bus
: bus,

128 
ª£rved
: 0,

129 
íabÀd
: 1

131  *(*)&
addr_°ru
;

132 
	}
}

134 
ölöe
 
	$gë_pci_cfg_ªg
(
bus
, 
dev
, 
func
, 
ªg
){

135 
addr
 = 
	`MK_PCI_CFG_ADDR
(
bus
, 
dev
, 
func
, 
ªg
);

136 
p‹t0xcfc
 = 0;

137 
__asm__
 
	`__vﬁ©ûe__
 ("out %%eax, %%dx\n\t"

140 :"˜"(
p‹t0xcfc
)

141 :"a"(
addr
), "d"(
PCI_CONFIG_ADDR
)

143  
p‹t0xcfc
;

144 
	}
}

146 
ölöe
 
	$£t_pci_cfg_ªg
(
bus
, 
dev
, 
func
, 
ªg
, 
vÆue
){

147 
addr
 = 
	`MK_PCI_CFG_ADDR
(
bus
, 
dev
, 
func
, 
ªg
);

148 
__asm__
 
	`__vﬁ©ûe__
 ("out %%eax, %%dx\n\t"

153 :"a"(
addr
), "d"(
PCI_CONFIG_ADDR
), "b"(
vÆue
)

155 
	}
}

157 
ölöe
 
	$pci_ªad_c⁄fig_dw‹d
(
pci_dev
 *
pcidev
, 
off£t
){

158  
	`gë_pci_cfg_ªg
(
pcidev
->
bus
,Öcidev->
dev
,Öcidev->
func
, 
off£t
>>2);

159 
	}
}

161 
ölöe
 
	$pci_wrôe_c⁄fig_dw‹d
(
pci_dev
 *
pcidev
, 
off£t
, 
vÆue
){

162 
	`£t_pci_cfg_ªg
(
pcidev
->
bus
,Öcidev->
dev
,Öcidev->dev, 
off£t
>>2, 
vÆue
);

163 
	}
}

168 
ölöe
 
	$pci_fix_c⁄fig_dw‹d
(
pci_dev
 *
pcidev
, 
off£t
, 
vÆue
){

169 
‹igö
 = 
	`pci_ªad_c⁄fig_dw‹d
(
pcidev
, 
off£t
);

170 
‹igö
 |
vÆue
;

171 
	`pci_wrôe_c⁄fig_dw‹d
(
pcidev
, 
off£t
, 
‹igö
);

172 
	}
}

174 
pci_öô
();

175 
pci_ªgi°î_drivî
(
pci_drivî
 *
drivî
);

176 
pci_íabÀ_devi˚
(
pci_dev
 *
pcidev
);

177 
pci_£t_ma°î
(
pci_dev
 *
pcidev
);

	@include/linux/pci_ids.h

1 #i‚de‡
PCI_IDS_H


2 
	#PCI_IDS_H


	)

15 
	#PCI_CLASS_NOT_DEFINED
 0x0000

	)

16 
	#PCI_CLASS_NOT_DEFINED_VGA
 0x0001

	)

18 
	#PCI_BASE_CLASS_STORAGE
 0x01

	)

19 
	#PCI_CLASS_STORAGE_SCSI
 0x0100

	)

20 
	#PCI_CLASS_STORAGE_IDE
 0x0101

	)

21 
	#PCI_CLASS_STORAGE_FLOPPY
 0x0102

	)

22 
	#PCI_CLASS_STORAGE_IPI
 0x0103

	)

23 
	#PCI_CLASS_STORAGE_RAID
 0x0104

	)

24 
	#PCI_CLASS_STORAGE_SATA
 0x0106

	)

25 
	#PCI_CLASS_STORAGE_SATA_AHCI
 0x010601

	)

26 
	#PCI_CLASS_STORAGE_SAS
 0x0107

	)

27 
	#PCI_CLASS_STORAGE_OTHER
 0x0180

	)

29 
	#PCI_BASE_CLASS_NETWORK
 0x02

	)

30 
	#PCI_CLASS_NETWORK_ETHERNET
 0x0200

	)

31 
	#PCI_CLASS_NETWORK_TOKEN_RING
 0x0201

	)

32 
	#PCI_CLASS_NETWORK_FDDI
 0x0202

	)

33 
	#PCI_CLASS_NETWORK_ATM
 0x0203

	)

34 
	#PCI_CLASS_NETWORK_OTHER
 0x0280

	)

36 
	#PCI_BASE_CLASS_DISPLAY
 0x03

	)

37 
	#PCI_CLASS_DISPLAY_VGA
 0x0300

	)

38 
	#PCI_CLASS_DISPLAY_XGA
 0x0301

	)

39 
	#PCI_CLASS_DISPLAY_3D
 0x0302

	)

40 
	#PCI_CLASS_DISPLAY_OTHER
 0x0380

	)

42 
	#PCI_BASE_CLASS_MULTIMEDIA
 0x04

	)

43 
	#PCI_CLASS_MULTIMEDIA_VIDEO
 0x0400

	)

44 
	#PCI_CLASS_MULTIMEDIA_AUDIO
 0x0401

	)

45 
	#PCI_CLASS_MULTIMEDIA_PHONE
 0x0402

	)

46 
	#PCI_CLASS_MULTIMEDIA_OTHER
 0x0480

	)

48 
	#PCI_BASE_CLASS_MEMORY
 0x05

	)

49 
	#PCI_CLASS_MEMORY_RAM
 0x0500

	)

50 
	#PCI_CLASS_MEMORY_FLASH
 0x0501

	)

51 
	#PCI_CLASS_MEMORY_OTHER
 0x0580

	)

53 
	#PCI_BASE_CLASS_BRIDGE
 0x06

	)

54 
	#PCI_CLASS_BRIDGE_HOST
 0x0600

	)

55 
	#PCI_CLASS_BRIDGE_ISA
 0x0601

	)

56 
	#PCI_CLASS_BRIDGE_EISA
 0x0602

	)

57 
	#PCI_CLASS_BRIDGE_MC
 0x0603

	)

58 
	#PCI_CLASS_BRIDGE_PCI
 0x0604

	)

59 
	#PCI_CLASS_BRIDGE_PCMCIA
 0x0605

	)

60 
	#PCI_CLASS_BRIDGE_NUBUS
 0x0606

	)

61 
	#PCI_CLASS_BRIDGE_CARDBUS
 0x0607

	)

62 
	#PCI_CLASS_BRIDGE_RACEWAY
 0x0608

	)

63 
	#PCI_CLASS_BRIDGE_OTHER
 0x0680

	)

65 
	#PCI_BASE_CLASS_COMMUNICATION
 0x07

	)

66 
	#PCI_CLASS_COMMUNICATION_SERIAL
 0x0700

	)

67 
	#PCI_CLASS_COMMUNICATION_PARALLEL
 0x0701

	)

68 
	#PCI_CLASS_COMMUNICATION_MULTISERIAL
 0x0702

	)

69 
	#PCI_CLASS_COMMUNICATION_MODEM
 0x0703

	)

70 
	#PCI_CLASS_COMMUNICATION_OTHER
 0x0780

	)

72 
	#PCI_BASE_CLASS_SYSTEM
 0x08

	)

73 
	#PCI_CLASS_SYSTEM_PIC
 0x0800

	)

74 
	#PCI_CLASS_SYSTEM_PIC_IOAPIC
 0x080010

	)

75 
	#PCI_CLASS_SYSTEM_PIC_IOXAPIC
 0x080020

	)

76 
	#PCI_CLASS_SYSTEM_DMA
 0x0801

	)

77 
	#PCI_CLASS_SYSTEM_TIMER
 0x0802

	)

78 
	#PCI_CLASS_SYSTEM_RTC
 0x0803

	)

79 
	#PCI_CLASS_SYSTEM_PCI_HOTPLUG
 0x0804

	)

80 
	#PCI_CLASS_SYSTEM_SDHCI
 0x0805

	)

81 
	#PCI_CLASS_SYSTEM_OTHER
 0x0880

	)

83 
	#PCI_BASE_CLASS_INPUT
 0x09

	)

84 
	#PCI_CLASS_INPUT_KEYBOARD
 0x0900

	)

85 
	#PCI_CLASS_INPUT_PEN
 0x0901

	)

86 
	#PCI_CLASS_INPUT_MOUSE
 0x0902

	)

87 
	#PCI_CLASS_INPUT_SCANNER
 0x0903

	)

88 
	#PCI_CLASS_INPUT_GAMEPORT
 0x0904

	)

89 
	#PCI_CLASS_INPUT_OTHER
 0x0980

	)

91 
	#PCI_BASE_CLASS_DOCKING
 0x0a

	)

92 
	#PCI_CLASS_DOCKING_GENERIC
 0x0a00

	)

93 
	#PCI_CLASS_DOCKING_OTHER
 0x0a80

	)

95 
	#PCI_BASE_CLASS_PROCESSOR
 0x0b

	)

96 
	#PCI_CLASS_PROCESSOR_386
 0x0b00

	)

97 
	#PCI_CLASS_PROCESSOR_486
 0x0b01

	)

98 
	#PCI_CLASS_PROCESSOR_PENTIUM
 0x0b02

	)

99 
	#PCI_CLASS_PROCESSOR_ALPHA
 0x0b10

	)

100 
	#PCI_CLASS_PROCESSOR_POWERPC
 0x0b20

	)

101 
	#PCI_CLASS_PROCESSOR_MIPS
 0x0b30

	)

102 
	#PCI_CLASS_PROCESSOR_CO
 0x0b40

	)

104 
	#PCI_BASE_CLASS_SERIAL
 0x0c

	)

105 
	#PCI_CLASS_SERIAL_FIREWIRE
 0x0c00

	)

106 
	#PCI_CLASS_SERIAL_FIREWIRE_OHCI
 0x0c0010

	)

107 
	#PCI_CLASS_SERIAL_ACCESS
 0x0c01

	)

108 
	#PCI_CLASS_SERIAL_SSA
 0x0c02

	)

109 
	#PCI_CLASS_SERIAL_USB
 0x0c03

	)

110 
	#PCI_CLASS_SERIAL_USB_UHCI
 0x0c0300

	)

111 
	#PCI_CLASS_SERIAL_USB_OHCI
 0x0c0310

	)

112 
	#PCI_CLASS_SERIAL_USB_EHCI
 0x0c0320

	)

113 
	#PCI_CLASS_SERIAL_USB_XHCI
 0x0c0330

	)

114 
	#PCI_CLASS_SERIAL_FIBER
 0x0c04

	)

115 
	#PCI_CLASS_SERIAL_SMBUS
 0x0c05

	)

117 
	#PCI_BASE_CLASS_WIRELESS
 0x0d

	)

118 
	#PCI_CLASS_WIRELESS_RF_CONTROLLER
 0x0d10

	)

119 
	#PCI_CLASS_WIRELESS_WHCI
 0x0d1010

	)

121 
	#PCI_BASE_CLASS_INTELLIGENT
 0x0e

	)

122 
	#PCI_CLASS_INTELLIGENT_I2O
 0x0e00

	)

124 
	#PCI_BASE_CLASS_SATELLITE
 0x0f

	)

125 
	#PCI_CLASS_SATELLITE_TV
 0x0f00

	)

126 
	#PCI_CLASS_SATELLITE_AUDIO
 0x0f01

	)

127 
	#PCI_CLASS_SATELLITE_VOICE
 0x0f03

	)

128 
	#PCI_CLASS_SATELLITE_DATA
 0x0f04

	)

130 
	#PCI_BASE_CLASS_CRYPT
 0x10

	)

131 
	#PCI_CLASS_CRYPT_NETWORK
 0x1000

	)

132 
	#PCI_CLASS_CRYPT_ENTERTAINMENT
 0x1001

	)

133 
	#PCI_CLASS_CRYPT_OTHER
 0x1080

	)

135 
	#PCI_BASE_CLASS_SIGNAL_PROCESSING
 0x11

	)

136 
	#PCI_CLASS_SP_DPIO
 0x1100

	)

137 
	#PCI_CLASS_SP_OTHER
 0x1180

	)

139 
	#PCI_CLASS_OTHERS
 0xff

	)

	@include/linux/pci_regs.h

22 #i‚de‡
PCI_REGS_H


23 
	#PCI_REGS_H


	)

29 
	#PCI_VENDOR_ID
 0x00

	)

30 
	#PCI_DEVICE_ID
 0x02

	)

31 
	#PCI_COMMAND
 0x04

	)

32 
	#PCI_COMMAND_IO
 0x1

	)

33 
	#PCI_COMMAND_MEMORY
 0x2

	)

34 
	#PCI_COMMAND_MASTER
 0x4

	)

35 
	#PCI_COMMAND_SPECIAL
 0x8

	)

36 
	#PCI_COMMAND_INVALIDATE
 0x10

	)

37 
	#PCI_COMMAND_VGA_PALETTE
 0x20

	)

38 
	#PCI_COMMAND_PARITY
 0x40

	)

39 
	#PCI_COMMAND_WAIT
 0x80

	)

40 
	#PCI_COMMAND_SERR
 0x100

	)

41 
	#PCI_COMMAND_FAST_BACK
 0x200

	)

42 
	#PCI_COMMAND_INTX_DISABLE
 0x400

	)

44 
	#PCI_STATUS
 0x06

	)

45 
	#PCI_STATUS_INTERRUPT
 0x08

	)

46 
	#PCI_STATUS_CAP_LIST
 0x10

	)

47 
	#PCI_STATUS_66MHZ
 0x20

	)

48 
	#PCI_STATUS_UDF
 0x40

	)

49 
	#PCI_STATUS_FAST_BACK
 0x80

	)

50 
	#PCI_STATUS_PARITY
 0x100

	)

51 
	#PCI_STATUS_DEVSEL_MASK
 0x600

	)

52 
	#PCI_STATUS_DEVSEL_FAST
 0x000

	)

53 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x200

	)

54 
	#PCI_STATUS_DEVSEL_SLOW
 0x400

	)

55 
	#PCI_STATUS_SIG_TARGET_ABORT
 0x800

	)

56 
	#PCI_STATUS_REC_TARGET_ABORT
 0x1000

	)

57 
	#PCI_STATUS_REC_MASTER_ABORT
 0x2000

	)

58 
	#PCI_STATUS_SIG_SYSTEM_ERROR
 0x4000

	)

59 
	#PCI_STATUS_DETECTED_PARITY
 0x8000

	)

61 
	#PCI_CLASS_REVISION
 0x08

	)

62 
	#PCI_REVISION_ID
 0x08

	)

63 
	#PCI_CLASS_PROG
 0x09

	)

64 
	#PCI_CLASS_DEVICE
 0x0®

	)

66 
	#PCI_CACHE_LINE_SIZE
 0x0¯

	)

67 
	#PCI_LATENCY_TIMER
 0x0d

	)

68 
	#PCI_HEADER_TYPE
 0x0ê

	)

69 
	#PCI_HEADER_TYPE_NORMAL
 0

	)

70 
	#PCI_HEADER_TYPE_BRIDGE
 1

	)

71 
	#PCI_HEADER_TYPE_CARDBUS
 2

	)

73 
	#PCI_BIST
 0x0‡

	)

74 
	#PCI_BIST_CODE_MASK
 0x0‡

	)

75 
	#PCI_BIST_START
 0x40

	)

76 
	#PCI_BIST_CAPABLE
 0x80

	)

84 
	#PCI_BASE_ADDRESS_0
 0x10

	)

85 
	#PCI_BASE_ADDRESS_1
 0x14

	)

86 
	#PCI_BASE_ADDRESS_2
 0x18

	)

87 
	#PCI_BASE_ADDRESS_3
 0x1¯

	)

88 
	#PCI_BASE_ADDRESS_4
 0x20

	)

89 
	#PCI_BASE_ADDRESS_5
 0x24

	)

90 
	#PCI_BASE_ADDRESS_SPACE
 0x01

	)

91 
	#PCI_BASE_ADDRESS_SPACE_IO
 0x01

	)

92 
	#PCI_BASE_ADDRESS_SPACE_MEMORY
 0x00

	)

93 
	#PCI_BASE_ADDRESS_MEM_TYPE_MASK
 0x06

	)

94 
	#PCI_BASE_ADDRESS_MEM_TYPE_32
 0x00

	)

95 
	#PCI_BASE_ADDRESS_MEM_TYPE_1M
 0x02

	)

96 
	#PCI_BASE_ADDRESS_MEM_TYPE_64
 0x04

	)

97 
	#PCI_BASE_ADDRESS_MEM_PREFETCH
 0x08

	)

98 
	#PCI_BASE_ADDRESS_MEM_MASK
 (~0x0fUL)

	)

99 
	#PCI_BASE_ADDRESS_IO_MASK
 (~0x03UL)

	)

103 
	#PCI_CARDBUS_CIS
 0x28

	)

104 
	#PCI_SUBSYSTEM_VENDOR_ID
 0x2c

	)

105 
	#PCI_SUBSYSTEM_ID
 0x2e

	)

106 
	#PCI_ROM_ADDRESS
 0x30

	)

107 
	#PCI_ROM_ADDRESS_ENABLE
 0x01

	)

108 
	#PCI_ROM_ADDRESS_MASK
 (~0x7ffUL)

	)

110 
	#PCI_CAPABILITY_LIST
 0x34

	)

113 
	#PCI_INTERRUPT_LINE
 0x3¯

	)

114 
	#PCI_INTERRUPT_PIN
 0x3d

	)

115 
	#PCI_MIN_GNT
 0x3ê

	)

116 
	#PCI_MAX_LAT
 0x3‡

	)

119 
	#PCI_PRIMARY_BUS
 0x18

	)

120 
	#PCI_SECONDARY_BUS
 0x19

	)

121 
	#PCI_SUBORDINATE_BUS
 0x1®

	)

122 
	#PCI_SEC_LATENCY_TIMER
 0x1b

	)

123 
	#PCI_IO_BASE
 0x1¯

	)

124 
	#PCI_IO_LIMIT
 0x1d

	)

125 
	#PCI_IO_RANGE_TYPE_MASK
 0x0fUL

	)

126 
	#PCI_IO_RANGE_TYPE_16
 0x00

	)

127 
	#PCI_IO_RANGE_TYPE_32
 0x01

	)

128 
	#PCI_IO_RANGE_MASK
 (~0x0fUL)

	)

129 
	#PCI_SEC_STATUS
 0x1ê

	)

130 
	#PCI_MEMORY_BASE
 0x20

	)

131 
	#PCI_MEMORY_LIMIT
 0x22

	)

132 
	#PCI_MEMORY_RANGE_TYPE_MASK
 0x0fUL

	)

133 
	#PCI_MEMORY_RANGE_MASK
 (~0x0fUL)

	)

134 
	#PCI_PREF_MEMORY_BASE
 0x24

	)

135 
	#PCI_PREF_MEMORY_LIMIT
 0x26

	)

136 
	#PCI_PREF_RANGE_TYPE_MASK
 0x0fUL

	)

137 
	#PCI_PREF_RANGE_TYPE_32
 0x00

	)

138 
	#PCI_PREF_RANGE_TYPE_64
 0x01

	)

139 
	#PCI_PREF_RANGE_MASK
 (~0x0fUL)

	)

140 
	#PCI_PREF_BASE_UPPER32
 0x28

	)

141 
	#PCI_PREF_LIMIT_UPPER32
 0x2c

	)

142 
	#PCI_IO_BASE_UPPER16
 0x30

	)

143 
	#PCI_IO_LIMIT_UPPER16
 0x32

	)

146 
	#PCI_ROM_ADDRESS1
 0x38

	)

148 
	#PCI_BRIDGE_CONTROL
 0x3e

	)

149 
	#PCI_BRIDGE_CTL_PARITY
 0x01

	)

150 
	#PCI_BRIDGE_CTL_SERR
 0x02

	)

151 
	#PCI_BRIDGE_CTL_ISA
 0x04

	)

152 
	#PCI_BRIDGE_CTL_VGA
 0x08

	)

153 
	#PCI_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

154 
	#PCI_BRIDGE_CTL_BUS_RESET
 0x40

	)

155 
	#PCI_BRIDGE_CTL_FAST_BACK
 0x80

	)

158 
	#PCI_CB_CAPABILITY_LIST
 0x14

	)

160 
	#PCI_CB_SEC_STATUS
 0x16

	)

161 
	#PCI_CB_PRIMARY_BUS
 0x18

	)

162 
	#PCI_CB_CARD_BUS
 0x19

	)

163 
	#PCI_CB_SUBORDINATE_BUS
 0x1®

	)

164 
	#PCI_CB_LATENCY_TIMER
 0x1b

	)

165 
	#PCI_CB_MEMORY_BASE_0
 0x1c

	)

166 
	#PCI_CB_MEMORY_LIMIT_0
 0x20

	)

167 
	#PCI_CB_MEMORY_BASE_1
 0x24

	)

168 
	#PCI_CB_MEMORY_LIMIT_1
 0x28

	)

169 
	#PCI_CB_IO_BASE_0
 0x2c

	)

170 
	#PCI_CB_IO_BASE_0_HI
 0x2e

	)

171 
	#PCI_CB_IO_LIMIT_0
 0x30

	)

172 
	#PCI_CB_IO_LIMIT_0_HI
 0x32

	)

173 
	#PCI_CB_IO_BASE_1
 0x34

	)

174 
	#PCI_CB_IO_BASE_1_HI
 0x36

	)

175 
	#PCI_CB_IO_LIMIT_1
 0x38

	)

176 
	#PCI_CB_IO_LIMIT_1_HI
 0x3a

	)

177 
	#PCI_CB_IO_RANGE_MASK
 (~0x03UL)

	)

179 
	#PCI_CB_BRIDGE_CONTROL
 0x3e

	)

180 
	#PCI_CB_BRIDGE_CTL_PARITY
 0x01

	)

181 
	#PCI_CB_BRIDGE_CTL_SERR
 0x02

	)

182 
	#PCI_CB_BRIDGE_CTL_ISA
 0x04

	)

183 
	#PCI_CB_BRIDGE_CTL_VGA
 0x08

	)

184 
	#PCI_CB_BRIDGE_CTL_MASTER_ABORT
 0x20

	)

185 
	#PCI_CB_BRIDGE_CTL_CB_RESET
 0x40

	)

186 
	#PCI_CB_BRIDGE_CTL_16BIT_INT
 0x80

	)

187 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM0
 0x100

	)

188 
	#PCI_CB_BRIDGE_CTL_PREFETCH_MEM1
 0x200

	)

189 
	#PCI_CB_BRIDGE_CTL_POST_WRITES
 0x400

	)

190 
	#PCI_CB_SUBSYSTEM_VENDOR_ID
 0x40

	)

191 
	#PCI_CB_SUBSYSTEM_ID
 0x42

	)

192 
	#PCI_CB_LEGACY_MODE_BASE
 0x44

	)

197 
	#PCI_CAP_LIST_ID
 0

	)

198 
	#PCI_CAP_ID_PM
 0x01

	)

199 
	#PCI_CAP_ID_AGP
 0x02

	)

200 
	#PCI_CAP_ID_VPD
 0x03

	)

201 
	#PCI_CAP_ID_SLOTID
 0x04

	)

202 
	#PCI_CAP_ID_MSI
 0x05

	)

203 
	#PCI_CAP_ID_CHSWP
 0x06

	)

204 
	#PCI_CAP_ID_PCIX
 0x07

	)

205 
	#PCI_CAP_ID_HT
 0x08

	)

206 
	#PCI_CAP_ID_VNDR
 0x09

	)

207 
	#PCI_CAP_ID_DBG
 0x0A

	)

208 
	#PCI_CAP_ID_CCRC
 0x0B

	)

209 
	#PCI_CAP_ID_SHPC
 0x0C

	)

210 
	#PCI_CAP_ID_SSVID
 0x0D

	)

211 
	#PCI_CAP_ID_AGP3
 0x0E

	)

212 
	#PCI_CAP_ID_EXP
 0x10

	)

213 
	#PCI_CAP_ID_MSIX
 0x11

	)

214 
	#PCI_CAP_ID_AF
 0x13

	)

215 
	#PCI_CAP_LIST_NEXT
 1

	)

216 
	#PCI_CAP_FLAGS
 2

	)

217 
	#PCI_CAP_SIZEOF
 4

	)

221 
	#PCI_PM_PMC
 2

	)

222 
	#PCI_PM_CAP_VER_MASK
 0x0007

	)

223 
	#PCI_PM_CAP_PME_CLOCK
 0x0008

	)

224 
	#PCI_PM_CAP_RESERVED
 0x0010

	)

225 
	#PCI_PM_CAP_DSI
 0x0020

	)

226 
	#PCI_PM_CAP_AUX_POWER
 0x01C0

	)

227 
	#PCI_PM_CAP_D1
 0x0200

	)

228 
	#PCI_PM_CAP_D2
 0x0400

	)

229 
	#PCI_PM_CAP_PME
 0x0800

	)

230 
	#PCI_PM_CAP_PME_MASK
 0xF800

	)

231 
	#PCI_PM_CAP_PME_D0
 0x0800

	)

232 
	#PCI_PM_CAP_PME_D1
 0x1000

	)

233 
	#PCI_PM_CAP_PME_D2
 0x2000

	)

234 
	#PCI_PM_CAP_PME_D3
 0x4000

	)

235 
	#PCI_PM_CAP_PME_D3cﬁd
 0x8000

	)

236 
	#PCI_PM_CAP_PME_SHIFT
 11

	)

237 
	#PCI_PM_CTRL
 4

	)

238 
	#PCI_PM_CTRL_STATE_MASK
 0x0003

	)

239 
	#PCI_PM_CTRL_NO_SOFT_RESET
 0x0008

	)

240 
	#PCI_PM_CTRL_PME_ENABLE
 0x0100

	)

241 
	#PCI_PM_CTRL_DATA_SEL_MASK
 0x1e00

	)

242 
	#PCI_PM_CTRL_DATA_SCALE_MASK
 0x6000

	)

243 
	#PCI_PM_CTRL_PME_STATUS
 0x8000

	)

244 
	#PCI_PM_PPB_EXTENSIONS
 6

	)

245 
	#PCI_PM_PPB_B2_B3
 0x40

	)

246 
	#PCI_PM_BPCC_ENABLE
 0x80

	)

247 
	#PCI_PM_DATA_REGISTER
 7

	)

248 
	#PCI_PM_SIZEOF
 8

	)

252 
	#PCI_AGP_VERSION
 2

	)

253 
	#PCI_AGP_RFU
 3

	)

254 
	#PCI_AGP_STATUS
 4

	)

255 
	#PCI_AGP_STATUS_RQ_MASK
 0xff000000

	)

256 
	#PCI_AGP_STATUS_SBA
 0x0200

	)

257 
	#PCI_AGP_STATUS_64BIT
 0x0020

	)

258 
	#PCI_AGP_STATUS_FW
 0x0010

	)

259 
	#PCI_AGP_STATUS_RATE4
 0x0004

	)

260 
	#PCI_AGP_STATUS_RATE2
 0x0002

	)

261 
	#PCI_AGP_STATUS_RATE1
 0x0001

	)

262 
	#PCI_AGP_COMMAND
 8

	)

263 
	#PCI_AGP_COMMAND_RQ_MASK
 0xff000000

	)

264 
	#PCI_AGP_COMMAND_SBA
 0x0200

	)

265 
	#PCI_AGP_COMMAND_AGP
 0x0100

	)

266 
	#PCI_AGP_COMMAND_64BIT
 0x0020

	)

267 
	#PCI_AGP_COMMAND_FW
 0x0010

	)

268 
	#PCI_AGP_COMMAND_RATE4
 0x0004

	)

269 
	#PCI_AGP_COMMAND_RATE2
 0x0002

	)

270 
	#PCI_AGP_COMMAND_RATE1
 0x0001

	)

271 
	#PCI_AGP_SIZEOF
 12

	)

275 
	#PCI_VPD_ADDR
 2

	)

276 
	#PCI_VPD_ADDR_MASK
 0x7ff‡

	)

277 
	#PCI_VPD_ADDR_F
 0x8000

	)

278 
	#PCI_VPD_DATA
 4

	)

282 
	#PCI_SID_ESR
 2

	)

283 
	#PCI_SID_ESR_NSLOTS
 0x1‡

	)

284 
	#PCI_SID_ESR_FIC
 0x20

	)

285 
	#PCI_SID_CHASSIS_NR
 3

	)

289 
	#PCI_MSI_FLAGS
 2

	)

290 
	#PCI_MSI_FLAGS_64BIT
 0x80

	)

291 
	#PCI_MSI_FLAGS_QSIZE
 0x70

	)

292 
	#PCI_MSI_FLAGS_QMASK
 0x0ê

	)

293 
	#PCI_MSI_FLAGS_ENABLE
 0x01

	)

294 
	#PCI_MSI_FLAGS_MASKBIT
 0x100

	)

295 
	#PCI_MSI_RFU
 3

	)

296 
	#PCI_MSI_ADDRESS_LO
 4

	)

297 
	#PCI_MSI_ADDRESS_HI
 8

	)

298 
	#PCI_MSI_DATA_32
 8

	)

299 
	#PCI_MSI_MASK_32
 12

	)

300 
	#PCI_MSI_DATA_64
 12

	)

301 
	#PCI_MSI_MASK_64
 16

	)

304 
	#PCI_MSIX_FLAGS
 2

	)

305 
	#PCI_MSIX_FLAGS_QSIZE
 0x7FF

	)

306 
	#PCI_MSIX_FLAGS_ENABLE
 (1 << 15)

	)

307 
	#PCI_MSIX_FLAGS_MASKALL
 (1 << 14)

	)

308 
	#PCI_MSIX_FLAGS_BIRMASK
 (7 << 0)

	)

312 
	#PCI_CHSWP_CSR
 2

	)

313 
	#PCI_CHSWP_DHA
 0x01

	)

314 
	#PCI_CHSWP_EIM
 0x02

	)

315 
	#PCI_CHSWP_PIE
 0x04

	)

316 
	#PCI_CHSWP_LOO
 0x08

	)

317 
	#PCI_CHSWP_PI
 0x30

	)

318 
	#PCI_CHSWP_EXT
 0x40

	)

319 
	#PCI_CHSWP_INS
 0x80

	)

323 
	#PCI_AF_LENGTH
 2

	)

324 
	#PCI_AF_CAP
 3

	)

325 
	#PCI_AF_CAP_TP
 0x01

	)

326 
	#PCI_AF_CAP_FLR
 0x02

	)

327 
	#PCI_AF_CTRL
 4

	)

328 
	#PCI_AF_CTRL_FLR
 0x01

	)

329 
	#PCI_AF_STATUS
 5

	)

330 
	#PCI_AF_STATUS_TP
 0x01

	)

334 
	#PCI_X_CMD
 2

	)

335 
	#PCI_X_CMD_DPERR_E
 0x0001

	)

336 
	#PCI_X_CMD_ERO
 0x0002

	)

337 
	#PCI_X_CMD_READ_512
 0x0000

	)

338 
	#PCI_X_CMD_READ_1K
 0x0004

	)

339 
	#PCI_X_CMD_READ_2K
 0x0008

	)

340 
	#PCI_X_CMD_READ_4K
 0x000¯

	)

341 
	#PCI_X_CMD_MAX_READ
 0x000¯

	)

343 
	#PCI_X_CMD_SPLIT_1
 0x0000

	)

344 
	#PCI_X_CMD_SPLIT_2
 0x0010

	)

345 
	#PCI_X_CMD_SPLIT_3
 0x0020

	)

346 
	#PCI_X_CMD_SPLIT_4
 0x0030

	)

347 
	#PCI_X_CMD_SPLIT_8
 0x0040

	)

348 
	#PCI_X_CMD_SPLIT_12
 0x0050

	)

349 
	#PCI_X_CMD_SPLIT_16
 0x0060

	)

350 
	#PCI_X_CMD_SPLIT_32
 0x0070

	)

351 
	#PCI_X_CMD_MAX_SPLIT
 0x0070

	)

352 
	#PCI_X_CMD_VERSION
(
x
Ë(((xË>> 12Ë& 3Ë

	)

353 
	#PCI_X_STATUS
 4

	)

354 
	#PCI_X_STATUS_DEVFN
 0x000000f‡

	)

355 
	#PCI_X_STATUS_BUS
 0x0000ff00

	)

356 
	#PCI_X_STATUS_64BIT
 0x00010000

	)

357 
	#PCI_X_STATUS_133MHZ
 0x00020000

	)

358 
	#PCI_X_STATUS_SPL_DISC
 0x00040000

	)

359 
	#PCI_X_STATUS_UNX_SPL
 0x00080000

	)

360 
	#PCI_X_STATUS_COMPLEX
 0x00100000

	)

361 
	#PCI_X_STATUS_MAX_READ
 0x00600000

	)

362 
	#PCI_X_STATUS_MAX_SPLIT
 0x03800000

	)

363 
	#PCI_X_STATUS_MAX_CUM
 0x1c000000

	)

364 
	#PCI_X_STATUS_SPL_ERR
 0x20000000

	)

365 
	#PCI_X_STATUS_266MHZ
 0x40000000

	)

366 
	#PCI_X_STATUS_533MHZ
 0x80000000

	)

370 
	#PCI_EXP_FLAGS
 2

	)

371 
	#PCI_EXP_FLAGS_VERS
 0x000‡

	)

372 
	#PCI_EXP_FLAGS_TYPE
 0x00f0

	)

373 
	#PCI_EXP_TYPE_ENDPOINT
 0x0

	)

374 
	#PCI_EXP_TYPE_LEG_END
 0x1

	)

375 
	#PCI_EXP_TYPE_ROOT_PORT
 0x4

	)

376 
	#PCI_EXP_TYPE_UPSTREAM
 0x5

	)

377 
	#PCI_EXP_TYPE_DOWNSTREAM
 0x6

	)

378 
	#PCI_EXP_TYPE_PCI_BRIDGE
 0x7

	)

379 
	#PCI_EXP_TYPE_RC_END
 0x9

	)

380 
	#PCI_EXP_TYPE_RC_EC
 0x10

	)

381 
	#PCI_EXP_FLAGS_SLOT
 0x0100

	)

382 
	#PCI_EXP_FLAGS_IRQ
 0x3e00

	)

383 
	#PCI_EXP_DEVCAP
 4

	)

384 
	#PCI_EXP_DEVCAP_PAYLOAD
 0x07

	)

385 
	#PCI_EXP_DEVCAP_PHANTOM
 0x18

	)

386 
	#PCI_EXP_DEVCAP_EXT_TAG
 0x20

	)

387 
	#PCI_EXP_DEVCAP_L0S
 0x1c0

	)

388 
	#PCI_EXP_DEVCAP_L1
 0xe00

	)

389 
	#PCI_EXP_DEVCAP_ATN_BUT
 0x1000

	)

390 
	#PCI_EXP_DEVCAP_ATN_IND
 0x2000

	)

391 
	#PCI_EXP_DEVCAP_PWR_IND
 0x4000

	)

392 
	#PCI_EXP_DEVCAP_RBER
 0x8000

	)

393 
	#PCI_EXP_DEVCAP_PWR_VAL
 0x3fc0000

	)

394 
	#PCI_EXP_DEVCAP_PWR_SCL
 0xc000000

	)

395 
	#PCI_EXP_DEVCAP_FLR
 0x10000000

	)

396 
	#PCI_EXP_DEVCTL
 8

	)

397 
	#PCI_EXP_DEVCTL_CERE
 0x0001

	)

398 
	#PCI_EXP_DEVCTL_NFERE
 0x0002

	)

399 
	#PCI_EXP_DEVCTL_FERE
 0x0004

	)

400 
	#PCI_EXP_DEVCTL_URRE
 0x0008

	)

401 
	#PCI_EXP_DEVCTL_RELAX_EN
 0x0010

	)

402 
	#PCI_EXP_DEVCTL_PAYLOAD
 0x00e0

	)

403 
	#PCI_EXP_DEVCTL_EXT_TAG
 0x0100

	)

404 
	#PCI_EXP_DEVCTL_PHANTOM
 0x0200

	)

405 
	#PCI_EXP_DEVCTL_AUX_PME
 0x0400

	)

406 
	#PCI_EXP_DEVCTL_NOSNOOP_EN
 0x0800

	)

407 
	#PCI_EXP_DEVCTL_READRQ
 0x7000

	)

408 
	#PCI_EXP_DEVCTL_BCR_FLR
 0x8000

	)

409 
	#PCI_EXP_DEVSTA
 10

	)

410 
	#PCI_EXP_DEVSTA_CED
 0x01

	)

411 
	#PCI_EXP_DEVSTA_NFED
 0x02

	)

412 
	#PCI_EXP_DEVSTA_FED
 0x04

	)

413 
	#PCI_EXP_DEVSTA_URD
 0x08

	)

414 
	#PCI_EXP_DEVSTA_AUXPD
 0x10

	)

415 
	#PCI_EXP_DEVSTA_TRPND
 0x20

	)

416 
	#PCI_EXP_LNKCAP
 12

	)

417 
	#PCI_EXP_LNKCAP_SLS
 0x0000000‡

	)

418 
	#PCI_EXP_LNKCAP_MLW
 0x000003f0

	)

419 
	#PCI_EXP_LNKCAP_ASPMS
 0x00000c00

	)

420 
	#PCI_EXP_LNKCAP_L0SEL
 0x00007000

	)

421 
	#PCI_EXP_LNKCAP_L1EL
 0x00038000

	)

422 
	#PCI_EXP_LNKCAP_CLKPM
 0x00040000

	)

423 
	#PCI_EXP_LNKCAP_SDERC
 0x00080000

	)

424 
	#PCI_EXP_LNKCAP_DLLLARC
 0x00100000

	)

425 
	#PCI_EXP_LNKCAP_LBNC
 0x00200000

	)

426 
	#PCI_EXP_LNKCAP_PN
 0xff000000

	)

427 
	#PCI_EXP_LNKCTL
 16

	)

428 
	#PCI_EXP_LNKCTL_ASPMC
 0x0003

	)

429 
	#PCI_EXP_LNKCTL_RCB
 0x0008

	)

430 
	#PCI_EXP_LNKCTL_LD
 0x0010

	)

431 
	#PCI_EXP_LNKCTL_RL
 0x0020

	)

432 
	#PCI_EXP_LNKCTL_CCC
 0x0040

	)

433 
	#PCI_EXP_LNKCTL_ES
 0x0080

	)

434 
	#PCI_EXP_LNKCTL_CLKREQ_EN
 0x100

	)

435 
	#PCI_EXP_LNKCTL_HAWD
 0x0200

	)

436 
	#PCI_EXP_LNKCTL_LBMIE
 0x0400

	)

437 
	#PCI_EXP_LNKCTL_LABIE
 0x0800

	)

438 
	#PCI_EXP_LNKSTA
 18

	)

439 
	#PCI_EXP_LNKSTA_CLS
 0x000‡

	)

440 
	#PCI_EXP_LNKSTA_NLW
 0x03f0

	)

441 
	#PCI_EXP_LNKSTA_LT
 0x0800

	)

442 
	#PCI_EXP_LNKSTA_SLC
 0x1000

	)

443 
	#PCI_EXP_LNKSTA_DLLLA
 0x2000

	)

444 
	#PCI_EXP_LNKSTA_LBMS
 0x4000

	)

445 
	#PCI_EXP_LNKSTA_LABS
 0x8000

	)

446 
	#PCI_EXP_SLTCAP
 20

	)

447 
	#PCI_EXP_SLTCAP_ABP
 0x00000001

	)

448 
	#PCI_EXP_SLTCAP_PCP
 0x00000002

	)

449 
	#PCI_EXP_SLTCAP_MRLSP
 0x00000004

	)

450 
	#PCI_EXP_SLTCAP_AIP
 0x00000008

	)

451 
	#PCI_EXP_SLTCAP_PIP
 0x00000010

	)

452 
	#PCI_EXP_SLTCAP_HPS
 0x00000020

	)

453 
	#PCI_EXP_SLTCAP_HPC
 0x00000040

	)

454 
	#PCI_EXP_SLTCAP_SPLV
 0x00007f80

	)

455 
	#PCI_EXP_SLTCAP_SPLS
 0x00018000

	)

456 
	#PCI_EXP_SLTCAP_EIP
 0x00020000

	)

457 
	#PCI_EXP_SLTCAP_NCCS
 0x00040000

	)

458 
	#PCI_EXP_SLTCAP_PSN
 0xfff80000

	)

459 
	#PCI_EXP_SLTCTL
 24

	)

460 
	#PCI_EXP_SLTCTL_ABPE
 0x0001

	)

461 
	#PCI_EXP_SLTCTL_PFDE
 0x0002

	)

462 
	#PCI_EXP_SLTCTL_MRLSCE
 0x0004

	)

463 
	#PCI_EXP_SLTCTL_PDCE
 0x0008

	)

464 
	#PCI_EXP_SLTCTL_CCIE
 0x0010

	)

465 
	#PCI_EXP_SLTCTL_HPIE
 0x0020

	)

466 
	#PCI_EXP_SLTCTL_AIC
 0x00c0

	)

467 
	#PCI_EXP_SLTCTL_PIC
 0x0300

	)

468 
	#PCI_EXP_SLTCTL_PCC
 0x0400

	)

469 
	#PCI_EXP_SLTCTL_EIC
 0x0800

	)

470 
	#PCI_EXP_SLTCTL_DLLSCE
 0x1000

	)

471 
	#PCI_EXP_SLTSTA
 26

	)

472 
	#PCI_EXP_SLTSTA_ABP
 0x0001

	)

473 
	#PCI_EXP_SLTSTA_PFD
 0x0002

	)

474 
	#PCI_EXP_SLTSTA_MRLSC
 0x0004

	)

475 
	#PCI_EXP_SLTSTA_PDC
 0x0008

	)

476 
	#PCI_EXP_SLTSTA_CC
 0x0010

	)

477 
	#PCI_EXP_SLTSTA_MRLSS
 0x0020

	)

478 
	#PCI_EXP_SLTSTA_PDS
 0x0040

	)

479 
	#PCI_EXP_SLTSTA_EIS
 0x0080

	)

480 
	#PCI_EXP_SLTSTA_DLLSC
 0x0100

	)

481 
	#PCI_EXP_RTCTL
 28

	)

482 
	#PCI_EXP_RTCTL_SECEE
 0x01

	)

483 
	#PCI_EXP_RTCTL_SENFEE
 0x02

	)

484 
	#PCI_EXP_RTCTL_SEFEE
 0x04

	)

485 
	#PCI_EXP_RTCTL_PMEIE
 0x08

	)

486 
	#PCI_EXP_RTCTL_CRSSVE
 0x10

	)

487 
	#PCI_EXP_RTCAP
 30

	)

488 
	#PCI_EXP_RTSTA
 32

	)

489 
	#PCI_EXP_DEVCAP2
 36

	)

490 
	#PCI_EXP_DEVCAP2_ARI
 0x20

	)

491 
	#PCI_EXP_DEVCTL2
 40

	)

492 
	#PCI_EXP_DEVCTL2_ARI
 0x20

	)

493 
	#PCI_EXP_LNKCTL2
 48

	)

494 
	#PCI_EXP_SLTCTL2
 56

	)

497 
	#PCI_EXT_CAP_ID
(
hódî
Ë(hódî & 0x0000ffff)

	)

498 
	#PCI_EXT_CAP_VER
(
hódî
Ë((hódî >> 16Ë& 0xf)

	)

499 
	#PCI_EXT_CAP_NEXT
(
hódî
Ë((hódî >> 20Ë& 0xffc)

	)

501 
	#PCI_EXT_CAP_ID_ERR
 1

	)

502 
	#PCI_EXT_CAP_ID_VC
 2

	)

503 
	#PCI_EXT_CAP_ID_DSN
 3

	)

504 
	#PCI_EXT_CAP_ID_PWR
 4

	)

505 
	#PCI_EXT_CAP_ID_ARI
 14

	)

506 
	#PCI_EXT_CAP_ID_ATS
 15

	)

507 
	#PCI_EXT_CAP_ID_SRIOV
 16

	)

510 
	#PCI_ERR_UNCOR_STATUS
 4

	)

511 
	#PCI_ERR_UNC_TRAIN
 0x00000001

	)

512 
	#PCI_ERR_UNC_DLP
 0x00000010

	)

513 
	#PCI_ERR_UNC_POISON_TLP
 0x00001000

	)

514 
	#PCI_ERR_UNC_FCP
 0x00002000

	)

515 
	#PCI_ERR_UNC_COMP_TIME
 0x00004000

	)

516 
	#PCI_ERR_UNC_COMP_ABORT
 0x00008000

	)

517 
	#PCI_ERR_UNC_UNX_COMP
 0x00010000

	)

518 
	#PCI_ERR_UNC_RX_OVER
 0x00020000

	)

519 
	#PCI_ERR_UNC_MALF_TLP
 0x00040000

	)

520 
	#PCI_ERR_UNC_ECRC
 0x00080000

	)

521 
	#PCI_ERR_UNC_UNSUP
 0x00100000

	)

522 
	#PCI_ERR_UNCOR_MASK
 8

	)

524 
	#PCI_ERR_UNCOR_SEVER
 12

	)

526 
	#PCI_ERR_COR_STATUS
 16

	)

527 
	#PCI_ERR_COR_RCVR
 0x00000001

	)

528 
	#PCI_ERR_COR_BAD_TLP
 0x00000040

	)

529 
	#PCI_ERR_COR_BAD_DLLP
 0x00000080

	)

530 
	#PCI_ERR_COR_REP_ROLL
 0x00000100

	)

531 
	#PCI_ERR_COR_REP_TIMER
 0x00001000

	)

532 
	#PCI_ERR_COR_MASK
 20

	)

534 
	#PCI_ERR_CAP
 24

	)

535 
	#PCI_ERR_CAP_FEP
(
x
Ë((xË& 31Ë

	)

536 
	#PCI_ERR_CAP_ECRC_GENC
 0x00000020

	)

537 
	#PCI_ERR_CAP_ECRC_GENE
 0x00000040

	)

538 
	#PCI_ERR_CAP_ECRC_CHKC
 0x00000080

	)

539 
	#PCI_ERR_CAP_ECRC_CHKE
 0x00000100

	)

540 
	#PCI_ERR_HEADER_LOG
 28

	)

541 
	#PCI_ERR_ROOT_COMMAND
 44

	)

543 
	#PCI_ERR_ROOT_CMD_COR_EN
 0x00000001

	)

545 
	#PCI_ERR_ROOT_CMD_NONFATAL_EN
 0x00000002

	)

547 
	#PCI_ERR_ROOT_CMD_FATAL_EN
 0x00000004

	)

548 
	#PCI_ERR_ROOT_STATUS
 48

	)

549 
	#PCI_ERR_ROOT_COR_RCV
 0x00000001

	)

551 
	#PCI_ERR_ROOT_MULTI_COR_RCV
 0x00000002

	)

553 
	#PCI_ERR_ROOT_UNCOR_RCV
 0x00000004

	)

555 
	#PCI_ERR_ROOT_MULTI_UNCOR_RCV
 0x00000008

	)

556 
	#PCI_ERR_ROOT_FIRST_FATAL
 0x00000010

	)

557 
	#PCI_ERR_ROOT_NONFATAL_RCV
 0x00000020

	)

558 
	#PCI_ERR_ROOT_FATAL_RCV
 0x00000040

	)

559 
	#PCI_ERR_ROOT_COR_SRC
 52

	)

560 
	#PCI_ERR_ROOT_SRC
 54

	)

563 
	#PCI_VC_PORT_REG1
 4

	)

564 
	#PCI_VC_PORT_REG2
 8

	)

565 
	#PCI_VC_PORT_CTRL
 12

	)

566 
	#PCI_VC_PORT_STATUS
 14

	)

567 
	#PCI_VC_RES_CAP
 16

	)

568 
	#PCI_VC_RES_CTRL
 20

	)

569 
	#PCI_VC_RES_STATUS
 26

	)

572 
	#PCI_PWR_DSR
 4

	)

573 
	#PCI_PWR_DATA
 8

	)

574 
	#PCI_PWR_DATA_BASE
(
x
Ë((xË& 0xffË

	)

575 
	#PCI_PWR_DATA_SCALE
(
x
Ë(((xË>> 8Ë& 3Ë

	)

576 
	#PCI_PWR_DATA_PM_SUB
(
x
Ë(((xË>> 10Ë& 7Ë

	)

577 
	#PCI_PWR_DATA_PM_STATE
(
x
Ë(((xË>> 13Ë& 3Ë

	)

578 
	#PCI_PWR_DATA_TYPE
(
x
Ë(((xË>> 15Ë& 7Ë

	)

579 
	#PCI_PWR_DATA_RAIL
(
x
Ë(((xË>> 18Ë& 7Ë

	)

580 
	#PCI_PWR_CAP
 12

	)

581 
	#PCI_PWR_CAP_BUDGET
(
x
Ë((xË& 1Ë

	)

591 
	#HT_3BIT_CAP_MASK
 0xE0

	)

592 
	#HT_CAPTYPE_SLAVE
 0x00

	)

593 
	#HT_CAPTYPE_HOST
 0x20

	)

595 
	#HT_5BIT_CAP_MASK
 0xF8

	)

596 
	#HT_CAPTYPE_IRQ
 0x80

	)

597 
	#HT_CAPTYPE_REMAPPING_40
 0xA0

	)

598 
	#HT_CAPTYPE_REMAPPING_64
 0xA2

	)

599 
	#HT_CAPTYPE_UNITID_CLUMP
 0x90

	)

600 
	#HT_CAPTYPE_EXTCONF
 0x98

	)

601 
	#HT_CAPTYPE_MSI_MAPPING
 0xA8

	)

602 
	#HT_MSI_FLAGS
 0x02

	)

603 
	#HT_MSI_FLAGS_ENABLE
 0x1

	)

604 
	#HT_MSI_FLAGS_FIXED
 0x2

	)

605 
	#HT_MSI_FIXED_ADDR
 0x00000000FEE00000ULL

	)

606 
	#HT_MSI_ADDR_LO
 0x04

	)

607 
	#HT_MSI_ADDR_LO_MASK
 0xFFF00000

	)

608 
	#HT_MSI_ADDR_HI
 0x08

	)

609 
	#HT_CAPTYPE_DIRECT_ROUTE
 0xB0

	)

610 
	#HT_CAPTYPE_VCSET
 0xB8

	)

611 
	#HT_CAPTYPE_ERROR_RETRY
 0xC0

	)

612 
	#HT_CAPTYPE_GEN3
 0xD0

	)

613 
	#HT_CAPTYPE_PM
 0xE0

	)

616 
	#PCI_ARI_CAP
 0x04

	)

617 
	#PCI_ARI_CAP_MFVC
 0x0001

	)

618 
	#PCI_ARI_CAP_ACS
 0x0002

	)

619 
	#PCI_ARI_CAP_NFN
(
x
Ë(((xË>> 8Ë& 0xffË

	)

620 
	#PCI_ARI_CTRL
 0x06

	)

621 
	#PCI_ARI_CTRL_MFVC
 0x0001

	)

622 
	#PCI_ARI_CTRL_ACS
 0x0002

	)

623 
	#PCI_ARI_CTRL_FG
(
x
Ë(((xË>> 4Ë& 7Ë

	)

626 
	#PCI_ATS_CAP
 0x04

	)

627 
	#PCI_ATS_CAP_QDEP
(
x
Ë((xË& 0x1fË

	)

628 
	#PCI_ATS_MAX_QDEP
 32

	)

629 
	#PCI_ATS_CTRL
 0x06

	)

630 
	#PCI_ATS_CTRL_ENABLE
 0x8000

	)

631 
	#PCI_ATS_CTRL_STU
(
x
Ë((xË& 0x1fË

	)

632 
	#PCI_ATS_MIN_STU
 12

	)

635 
	#PCI_SRIOV_CAP
 0x04

	)

636 
	#PCI_SRIOV_CAP_VFM
 0x01

	)

637 
	#PCI_SRIOV_CAP_INTR
(
x
Ë((xË>> 21Ë

	)

638 
	#PCI_SRIOV_CTRL
 0x08

	)

639 
	#PCI_SRIOV_CTRL_VFE
 0x01

	)

640 
	#PCI_SRIOV_CTRL_VFM
 0x02

	)

641 
	#PCI_SRIOV_CTRL_INTR
 0x04

	)

642 
	#PCI_SRIOV_CTRL_MSE
 0x08

	)

643 
	#PCI_SRIOV_CTRL_ARI
 0x10

	)

644 
	#PCI_SRIOV_STATUS
 0x0®

	)

645 
	#PCI_SRIOV_STATUS_VFM
 0x01

	)

646 
	#PCI_SRIOV_INITIAL_VF
 0x0¯

	)

647 
	#PCI_SRIOV_TOTAL_VF
 0x0ê

	)

648 
	#PCI_SRIOV_NUM_VF
 0x10

	)

649 
	#PCI_SRIOV_FUNC_LINK
 0x12

	)

650 
	#PCI_SRIOV_VF_OFFSET
 0x14

	)

651 
	#PCI_SRIOV_VF_STRIDE
 0x16

	)

652 
	#PCI_SRIOV_VF_DID
 0x1®

	)

653 
	#PCI_SRIOV_SUP_PGSIZE
 0x1¯

	)

654 
	#PCI_SRIOV_SYS_PGSIZE
 0x20

	)

655 
	#PCI_SRIOV_BAR
 0x24

	)

656 
	#PCI_SRIOV_NUM_BARS
 6

	)

657 
	#PCI_SRIOV_VFM
 0x3¯

	)

658 
	#PCI_SRIOV_VFM_BIR
(
x
Ë((xË& 7Ë

	)

659 
	#PCI_SRIOV_VFM_OFFSET
(
x
Ë((xË& ~7Ë

	)

660 
	#PCI_SRIOV_VFM_UA
 0x0

	)

661 
	#PCI_SRIOV_VFM_MI
 0x1

	)

662 
	#PCI_SRIOV_VFM_MO
 0x2

	)

663 
	#PCI_SRIOV_VFM_AV
 0x3

	)

666 
	#PCI_CONFIG_ADDR
 0xCF8

	)

676 
	#PCI_CONFIG_DATA
 0xCFC

	)

	@include/linux/pci_vendor.h

1 #i‚de‡
PCI_VENDOR_H


2 
	#PCI_VENDOR_H


	)

3 
	~<vÆTy≥.h
>

10 
	spci_víd‹_íåy


12 
	mVíId
 ;

13 * 
	mVíSh‹t
 ;

14 * 
	mVíFuŒ
 ;

15 } 
	tPCI_VENTABLE
, *
	tPPCI_VENTABLE
 ;

20 
	spci_öfo_íåy


22 
	mVíId
 ;

23 
	mDevId
 ;

24 * 
	mChù
 ;

25 * 
	mChùDesc
 ;

26 } 
	tPCI_DEVTABLE
 ;

31 
	spci_˛ass_íåy


33 
	mBa£Cœss
 ;

34 
	mSubCœss
 ;

35 
	mProgIf
 ;

36 * 
	mBa£Desc
 ;

37 * 
	mSubDesc
 ;

38 * 
	mProgDesc
 ;

39 } 
	tPCI_CLASSCODETABLE
, *
	tPPCI_CLASSCODETABLE
 ;

42 #¥agm®
∑ck
 (
push
)

43 #¥agm®
∑ck
 (1)

44 
	spci_˛asscode
{

47 
u8
 
	mªvisi⁄
;

48 
u8
 
	m¥og
;

49 
u8
 
	msub
;

50 
u8
 
	mba£
;

53 
	m_ªvisi⁄
: 8;

54 
	mvÆue
: 24;

58 #¥agm®
∑ck
 (
p›
)

60 
pci_öfo_íåy
 * 
PciTabÀ_Gë
(
víd‹
, 
devi˚
);

61 
pci_víd‹_íåy
 *
PciVíd‹Tbl_Gë
(
u16
 
víd‹
);

62 
PciDevTabÀ_Mk_Fa°_Ac˚ss
();

63 
pci_˛ass_íåy
 *
PciCœssTbl_Gë
(
u8
 
˛ass
, u8 
sub
, u8 
¥og
);

	@include/linux/pci_vendor_full.h

5 
	gPCIHDR
.
	gH
: 
PCI
 
Víd‹s
, 
	gDevi˚s
, 
™d
 
Cœss
 
Ty≥
 
öf‹m©i⁄


7 
Cª©ed
 
autom©iˇŒy
 
‰om
 
the
 
web
 
usög
Åhê
fﬁlowög
 
	gURL
:

8 
hâp
:

9 
So·w¨e
 
to
 
¸óã
 
™d
 
maöèö
 
the
 
PCICODE
 
Li°
 
wrôãn
 
by
:

10 
Jim
 
B€mÀr
 (
jb€mÀr
@
hÆcy⁄
.
com
)

12 
This
 
hódî
 
¸óãd
 
⁄
 
Tue
 
Jun
 7 01:52:41 
EDT
 2016

14 
Too
 
m™y
 
≥›À
 
have
 
c⁄åibuãd
 
to
 
this
 
li°
Åÿ
acknowÀdge
 
them
 
Æl
, 
but


15 
a
 
„w
 
have
 
¥ovided
 
the
 
maj‹ôy
 
of
Åhê
öput
 
™d
 
de£rve
 
•ecül
 
	gmíti⁄
:

16 
Fªdîic
 
PŸãr
, 
who
 
maöèös
 
a
 
li°
 
	gLöux
.

17 
Chris
 
A°⁄
 
©
 
Madge
 
	gNëw‹ks
.

18 
Thomas
 
Dùp⁄
 
of
 
	gHewÀâ
-
Pack¨d
 
	gGmbH
.

19 
Jurgí
 ("Josh"Ë
Thñí


20 
Wûlüm
 
	gH
. 
Avîy
 
III
 
©
 
A…ôech


21 
Sîgei
 
Shtylyov
 
of
 
	gBøö
-
dód
 
So·w¨e
 
ö
 
	gRussü


29 
	spci_víd‹_íåy


31 
	mVíId
 ;

32 * 
	mVíSh‹t
 ;

33 * 
	mVíFuŒ
 ;

34 } 
	tPCI_VENTABLE
, *
	tPPCI_VENTABLE
 ;

36 
PCI_VENTABLE
 
	gPciVíTabÀ
 [] =

1611 
	#PCI_VENTABLE_LEN
 ((
PciVíTabÀ
)/(
PCI_VENTABLE
))

	)

1613 
	spci_öfo_íåy


1615 
	mVíId
 ;

1616 
	mDevId
 ;

1617 * 
	mChù
 ;

1618 * 
	mChùDesc
 ;

1619 } 
	tPCI_DEVTABLE
 ;

1621 
PCI_DEVTABLE
 
	gPciDevTabÀ
 [] =

1631 { 0x11DE, 0x6
O57
, "ZR36057PQC", "ZORAN PCI Bridge (interface forÅransferring videoácrossÅhe PCI bus)" } ,

2480 { 0x8086, 0x1c02
_
, "8086&dev_1c02", "Intel(R) Desktop/Workstation/Server Express Chipset SATA AHCI Controller" } ,

2513 { 0x8086, 0x1E3A
_
, "C216", "8555555555555999999999999999999999999999999999999999999999999999999900000000000000000001222222222222" } ,

2514 { 0x8086, 0x1E3A
__
, "Z77", "C216 Chipset - Platform controller hub" } ,

2582 { 0x8086, 0x24C5&
SUBSYS_041111
, "2200bg", "PCI Simple Communications Controller" } ,

2584 { 0x8086, 0x24c5
j
, "SUBSYS_21179", "Soundmax Integrated Digital Audio" } ,

2585 { 0x8086, 0x24C5
n
, "82801DBM SoundMAXController (ICH4-M B0 step)", "Intel 82801 DB DBM/DA AC 97 Audio Controller" } ,

2642 { 0x8086, 0x2562@
cc
, "82801FR", "SATA RAID CONTROLLER" } ,

2689 { 0x8086, 0x2652&
CC_0101
, "82801FR/FRW", "SATA Controller" } ,

2690 { 0x8086, 0x2652&
CC_0104
, "82801FR/FRW", "SATA Raid Controller" } ,

2691 { 0x8086, 0x2652&
CC_0106
, "82801FR/FRW", "AHCI Controller" } ,

2693 { 0x8086, 0x2653&
CC_0101
, "82801FBM", "SATA IDE Controller" } ,

2694 { 0x8086, 0x2653&
CC_0106
, "82801FBM", "AHCI Controller" } ,

2751 { 0x8086, 0x27d8x
zx
, "PCI\\VEN_8086&DEV_2485&SUBSYS_AD021458&REV_02", "Microsoft UAA Bus HD Audio" } ,

2758 { 0x8086, 0x27
RR
, "ALC850", "no" } ,

2839 { 0x8086, 0x29B4&
subys
, "4F4A8086&rev_02", "Management Engine Driver" } ,

2843 { 0x8086, 0x29C2
_
, "Intel G33", "Intel(R) G33 chipset GMA3100 video Driver" } ,

2878 { 0x8086, 0x2E24&
CC
, "PCI\\VEN_8086", "Intel Management Engine Interface" } ,

2884 { 0x8086, 0x2E33
_
, "G41 EXPRESS CHIPSET", "ghaphics chipset g41 ghaphics chipset g41 " } ,

3001 { 0x8086, 0x3B64&
subsys
, "REV_06", "Intel Management Engine Interface" } ,

3002 { 0x8086, 0x3B64&
SUBSYS_048210
, "Intel 3B09", "Management Engine Driver" } ,

3003 { 0x8086, 0x3B64&
subsys_048710
, "REV_06", "Intel Management Engine Interface" } ,

3004 { 0x8086, 0x3B64&
SUBSYS_116817
, "REV_06", "Intel Management Engine Interface" } ,

3005 { 0x8086, 0x3B64
SUBSYS_FF1E117
, "REV_06", "intel" } ,

3006 { 0x8086, 0x3b64
_
&
subsys_fd3c1
, "ven_8086&dev_3b64&subsys_fd3c1179&rev_06", "ven_8086&dev_3b64&subsys_fd3c1179&rev_06 [Toshiba C660-1CN]" } ,

3046 { 0x8086, 0x6741
_
, "0x8086", "Intel USB 3.0" } ,

3096 { 0x8086, 0x8086&
DEV
, "9.3.0.1019", "intel" } ,

3097 { 0x8086, 0x8086&
DEV
-24C5, "VIA vynil v700b", "VIA vynil v700b" } ,

3098 { 0x8086, 0x8086&
DEV_1040
, "SUBSYS_148A103C", "REV_00\\3&61AAA01&0&50 " } ,

3099 { 0x8086, 0x8086&
DEV_24C5
, "82801DBM SoundMax Controller", "VIA vynil v700b" } ,

3100 { 0x8086, 0x8086&
DEV_3B64
, "SUBSYS_03701025", "pci simple communications controller" } ,

3101 { 0x8086, 0x8086&
DEV_3B64
&
SUBS
, "SUBSYS_144A103C", "pci simple communications controller" } ,

3102 { 0x8086, 0x8086&
DEV_7191
&
SUBS
, "Intel 3B69Management Engine Driver", "Management Engine Driver" } ,

3155 { 0x8086, 0x9c3®
Subsys_05eb1
, "9c3a Subsys_05eb1028 &Ñev_04\\3 & 11583659", "PCI Simple Communication Controller" } ,

3156 { 0x8086, 0x9c3®
Subsys_05eb1
, "12", "PCI Simple Communication Controller" } ,

3163 { 0x8086, 0xA
O11
, "02\\3", "3&33FD14CA&0&10" } ,

3164 { 0x8086, 0xA
O12
, "0x0283E", "Intel(R) ICH8 Family SMBus Controller" } ,

3171 { 0x8086, 0x
PCI
\
VEN_8086
&
DEV_2
, "11583659", "PCI\\VEN_8086&DEV_27DA&SUBSYS_31031565" } ,

3172 { 0x8086, 0x
PCI
\
VEN_8086
&
DEV_2
, "11583659", "PCI\\VEN_8086&DEV_8C22&SUBSYS_FA301179&REV_04\\3&11583659&0&FB" } ,

3173 { 0x8086, 0x
PCI
\
VEN_8086
&
DEV_3
, "11583658", "PCI\\VEN_8086&DEV_3B64&SUBSYS_04821025&REV_06" } ,

3177 { 0x8086, 0x
_1c3a
, "REV_04", "REV-04" } ,

3178 { 0x8086, 0x
_1E3A
, "0c05", "i5-3210" } ,

3179 { 0x8086, 0x
_3B64
, "3b69", "Chip Description:Management Engine Driver" } ,

3180 { 0x8086, 0x
__1c3a
, "SUBYS_308C17AA", "REV-04 3&11583659" } ,

3181 { 0x8086, 0x
___1C3A
, "8086", "Intel(R) Management Engine Interface" } ,

3401 { 0x15D7, 
RS56
, "hcf cx11252-41z", "hcf 56" } ,

3675 { 0x14F1, 0x5051
_
, "DG31PR", "Conexant HD-Audio SmartAudio 221" } ,

3676 { 0x14F1, 0x5051
__
, "CX20561", "Conexant HD-Audio SmartAudio 221" } ,

3718 { 0x1969, 0x
R091
, "Killer E2200", "Killer E2200 Network Card" } ,

3749 { 0x0c45, 0x6128
_
, "USB\\VID_0C45&PID_6148&REV_0101", "USB PC Camera Plus" } ,

3758 { 0x0c45, 0x6270
_
, "usb\\vid_oc45&pid_627b\\5&138897&#1044;1&0&5", "webcam" } ,

3857 { 0x197B, 0x
JMB38
, "JMB38X", "JMB38X SD/MMC Host Controller" } ,

4026 { 0x10EC, 0x5289
Ró…ek
 , "RTL8411", " PCIE Card Reader" } ,

4082 { 0x0cf3, 0x3002
_
, "unknown", "unknown" } ,

4105 { 0x1912, 0x0015
_
, "EC01-P", "Renesas Electronics USB 3.0 Host Controller" } ,

4134 { 0x168C, 0x001C 
Ÿhî
, "AR5BXB63", "Atheros AR5BXB63 WWAN Chip" } ,

4135 { 0x168C, 0x001c
_agaö
, "AR5BXB61", "AR5006EX AR5423a" } ,

4418 { 0x1002, 0x1ab8 
hex
, "2", "atiÑadeon " } ,

4486 { 0x1002, 0x4380&
CC_0101
, "ATI SB600", "SATA2" } ,

4487 { 0x1002, 0x4380&
CC_0104
, "ATI SB600", "RAID/AHCI Controller" } ,

4488 { 0x1002, 0x4380&
CC_0106
, "ATI RS690m", "AHCI Controller" } ,

4504 { 0x1002, 0x4391&
CC_0106
, "AMD SB850", "AMD Southbridge incorporating AHCI 1.2 with SATA FIS‚Äìbased switching support" } ,

4507 { 0x1002, 0x4394&
CC_0106
, "5100", "AMD SP5100 South Bridge" } ,

4727 { 0x1002, 0x5960 
AGP
, "A051400005470", "PN 1024-RC26-1F-SA" } ,

4733 { 0x1002, 0x5974&
SUBSYS_022A10
, "RS482", "ATI Radeon Xpress 200M (Mobile)" } ,

4739 { 0x1002, 0x5A41 
ATI
 
RADEON
 
Xp
, "0x5A41 ATI RADEON Xpress 1200 Series 0x1002", "0x5A41 ATI RADEON Xpress 1200 Series 0x1002" } ,

4753 { 0x1002, 0x5B6
O
, "RV370", "ATI RADEON X300/X550/X1050 Series" } ,

4797 { 0x1002, 0x6741
_
, "AMD Radeon HD 7450M (6470M)&#12289;6630M&#12289;In", "PCI\\VEN_1002&DEV_6741&SUBSYS_21E317AA&REV_00" } ,

4913 { 0x1002, 0x71C5 
PCIE
, "M56", "ATI MOBILITY /ATI RADEON X1600" } ,

4995 { 0x1002, 0x791
Z
, "SUBSYS_826D1043", "REV_00" } ,

5150 { 0x1002, 0x
o876
, "", "" } ,

5185 { 0x100B, 0x0020
h
, "DP83815", "10/100 MacPhyter3v PCI Adapter" } ,

5341 { 0x1014, 0x
IBM37C0
, "Unknown", "IBM Netfinity Advanced System Management Processor" } ,

5342 { 0x1014, 0x
IBM37D0
, "n/a", "n/a" } ,

5444 { 0x1022, 0x7801
_
, "amd_sata", "AMD SATA Controller" } ,

5580 { 0x1028, 0x1f
oc
, "n4050", "pci simple communication controller" } ,

5835 { 0x1039, 0x
	g_7012
, "HDAUDIO\\FUNC_01&VEN_&DEV_504514F1&SUBSYS_1631C106&", "PCI Audio Accelerator" } ,

5983 { 0x104A, 0x
	gSMO8800
, "Unknown", "ST Microelectronics Free Fall Sensor" } ,

5984 { 0x104A, 0x
	gSMO8810
, "Unknown", "STMicroelectronics Freefall Sensor" } ,

6625 { 0x1393, 0x104
	gh
, "C104H/PCI", "Smartio" } ,

6951 { 0x109E, 0x0350&
	gSUBSYS_000000
, "Bt848h", "tvÅuner driverhj" } ,

6956 { 0x109E, 0x036E&
	gSUBSYS_000000
, "Conextant Fucion 878A 25878-123", "Video Capture" } ,

6957 { 0x109E, 0x036E&
	gSUBSYS_000000
, "Conextant Fucion 878A 25878-123", "Video Capture" } ,

6970 { 0x109E, 0x36E&
	gSUBSYS_0000000
, "Bt360 MediaStream &#1050;&#1086;&#1085;&#1090;&#10", "Brooktree Corp" } ,

6971 { 0x109E, 0x36E&
	gSUBSYS_0000000
, "CONEXANT FUSION 878A 25878-13 E153498.1", "conexant 878a" } ,

7178 { 0x10B9, 0x5229&
	gREV_00
, "?", "Ali EIDE" } ,

7179 { 0x10B9, 0x5229&
	gREV_20
, "?", "PATA 33" } ,

7180 { 0x10B9, 0x5229&
	gREV_C2
, "?", "PATA 66" } ,

7181 { 0x10B9, 0x5229&
	gREV_C4
, "?", "PATA 100" } ,

7182 { 0x10B9, 0x5229&
	gREV_C5
, "chipset", "PATA 133" } ,

7298 { 0x10DE, 0x0028 
	gNV05
, "0DF4 ", "MCP67 " } ,

7409 { 0x10DE, 0x0112
	gh
, "???", "Nvidia GeForce2 Go/MX Ultra Video Adapter" } ,

7830 { 0x10DE, 0x06e
	go
, "G98", "NIVIDIA GEFORCE 9300GE" } ,

7841 { 0x10DE, 0x07D8 
	gnVIDIA
, "nForce 7100-630i ", "MCP73PV" } ,

7955 { 0x10DE, 0x10DEb
	gis
, "GFORCE 410", "GFORCE 410" } ,

7964 { 0x10DE, 0x11c
	go
, "0x354e145", "0xa1" } ,

7973 { 0x10DE, 0x135
	gm
, "220gt", "navidia quadroÇvs135m" } ,

7979 { 0x10DE, 0x247
	gPCI
, "know", "Geforce 6100 Go" } ,

7988 { 0x10DE, 0x9876 03F0&
	gSUBSYS_8
, "N/A", "PCI(Has compatible Ids)" } ,

7994 { 0x10DE, 0x
	gODE9
, "GT 630M", "Geforce GT 630M" } ,

7995 { 0x10DE, 0x
	g_026C
, "nVidia Geforce 6150 GPU ( Built-Into Controller )", "Nvidia MotherboardÇForce 430 ( MCP-51 ) with On-Board GeForce 6150 GPU" } ,

8257 { 0x1106, 0x10
	gjn
, "1106", "3108" } ,

8301 { 0x1106, 0x3068&
	gCC_0000
, "VT82C686A/B&VT8231", "APM(or ACPI?)" } ,

8302 { 0x1106, 0x3068&
	gCC_0780
, "VT82C686A/B&VT8231", "MC97 MODEM" } ,

8610 { 0x14E4, 0x1691
	g_
, "BCM57788A", "Broadcom NetLink (TM) Gigabit Ethernet" } ,

8780 { 0x14E4, 0xde
	gv_4311
, "1364103c", "subsys" } ,

8935 { 0x1131, 0x1131 
Phûùs
 
	gSemic
, "1131", "VerTV Hybrid Super 007 M135RA" } ,

9396 { 0x11BD, 0x11
	gPE
, "49", "Tunner Royal TS 2" } ,

9458 { 0x11C1, 
	gfsu
 00, "", "" } ,

9472 { 0x11D1, 
	gVXP520
, "tag4769", "Video card" } ,

9474 { 0x11D4, 0x11d4
	gnˇh6n
, "266e&subsys", "01791028" } ,

9499 
	#PCI_DEVTABLE_LEN
 ((
PciDevTabÀ
)/(
PCI_DEVTABLE
))

	)

9501 
	s_PCI_CLASSCODETABLE


9503 
	mBa£Cœss
 ;

9504 
	mSubCœss
 ;

9505 
	mProgIf
 ;

9506 * 
	mBa£Desc
 ;

9507 * 
	mSubDesc
 ;

9508 * 
	mProgDesc
 ;

9509 } 
	tPCI_CLASSCODETABLE
, *
	tPPCI_CLASSCODETABLE
 ;

9511 
PCI_CLASSCODETABLE
 
	gPciCœssCodeTabÀ
 [] =

9601 
	#PCI_CLASSCODETABLE_LEN
 ((
PciCœssCodeTabÀ
)/(
PCI_CLASSCODETABLE
))

	)

9603 * 
	gPciComm™dFœgs
 [] =

9624 
	#PCI_COMMANDFLAGS_LEN
 ((
PciComm™dFœgs
)/(*))

	)

9627 * 
	gPciSètusFœgs
 [] =

9648 
	#PCI_STATUSFLAGS_LEN
 ((
PciSètusFœgs
)/(*))

	)

9651 * 
	gPciDevSñFœgs
 [] =

9660 
	#PCI_DEVSELFLAGS_LEN
 ((
PciDevSñFœgs
)/(*))

	)

	@include/linux/pipe.h

1 #i‚de‡
PIPE_H


2 
	#PIPE_H


	)

	@include/linux/printf.h

1 #i‚de‡
PRINTF_H


2 
	#PRINTF_H


	)

3 
	~<vÆTy≥.h
>

5 
__•rötf
(*
buf
, *
f‹m©
, 
u32
 *
¨gs
);

6 
•rötf
(*
buf
, *
f‹m©
, ...);

7 
¥ötf
(*
f‹m©
, ...);

8 
wrôe_b¨
(
x
, 
y
, *
tôÀ
, *
c⁄ã¡
);

	@include/linux/resource.h

1 #i‚de‡
LINUX_RESOURCE_H


2 
	#LINUX_RESOURCE_H


	)

4 
	srußge
{

5 
	mk∫l_time
;

6 
	mu£r_time
;

	@include/linux/sched.h

1 #i‚de‡
LINUX_SCHED_H


2 
	#LINUX_SCHED_H


	)

3 
	g±_ªgs
;

4 
	~<vÆTy≥.h
>

5 
	~<asm/∑ge.h
>

7 
	#TASK_RUNNING
 0

	)

8 
	#TASK_INTERRUPTIBLE
 1

	)

9 
	#TASK_UNINTERRUPTIBLE
 2

	)

10 
	#TASK_STOPPED
 4

	)

11 
	#TASK_TRACED
 8

	)

12 
	#TASK_ZOMBIE
 16

	)

17 
	#CSIGNAL
 0xf‡

	)

18 
	#CLONE_VM
 0x100

	)

19 
	#CLONE_FS
 0x200

	)

20 
	#CLONE_FD
 0x400

	)

23 
	smm
{

24 
¸3
 
	m¸3
;

25 
vm_¨ó
 *
	mvma
;

27 
	m°¨t_code
, 
	míd_code
;

28 
	m°¨t_d©a
, 
	míd_d©a
;

29 
	m°¨t_brk
, 
	mbrk
;

31 
	mu£rs
;

34 
kî√l_thªad
((*
‚
)(*), *
¨g
, 
Êags
);

37 
	`do_execve
(*
fûï©h
, *
¨gv
[], *
ívp
[], 
±_ªgs
 *
ªgs
);

38 
	`scheduÀ_timeout
(
m£c
);

39 
	`do_timî
(
±_ªgs
 *
¥egs
);

41 
	`do_f‹k
(
˛⁄e_Êags
, 
°ack_°¨t
,

42 
±_ªgs
 *
ªgs
, 
°ack_size
);

	@include/linux/skbuff.h

1 #i‚de‡
SKBUFF_H


2 
	#SKBUFF_H


	)

3 
	~<löux/¶ab.h
>

4 
	~<vÆTy≥.h
>

5 
	~<li°.h
>

6 
	#PROTOCOL_ARP
 0x0806

	)

7 
	#PROTOCOL_IP
 0x0800

	)

9 
	sp£udo_hdr
{

10 
u32
 
	mmyù
;

11 
u32
 
	myourù
;

12 
u8
 
	mzîo
;

13 
u8
 
	m¥Ÿocﬁ
;

14 
u16
 
	m∑ylﬂd_Àn
;

17 
	gëhhdr
;

18 
	g¨phdr
;

19 
	gùhdr
;

20 
	gicmphdr
;

21 
	gudphdr
;

22 
	gt˝hdr
;

23 
	g√t_devi˚
;

29 
	ssk_buff
{

30 
	mpkgsize
;

32 
	mgŸsize
;

33 
	mbufsize
;

36 *
	md©a
;

38 
sk_buff
 *
	m√xt
, *
	m¥ev
;

39 
√t_devi˚
 *
	mdev
;

41 
ëhhdr
 *
	mëhhdr
;

43 
ùhdr
 *
	mùhdr
;

44 
¨phdr
 *
	m¨phdr
;

45 *
	m£c⁄d_hdr
;

48 
icmphdr
 *
	micmphdr
;

49 
udphdr
 *
	mudphdr
;

50 
t˝hdr
 *
	mt˝hdr
;

51 *
	mthúd_hdr
;

53 
li°_hód
 
	mnode
;

55 
p£udo_hdr
 *
	mp£udo_hdr
;

58 
sk_buff
 *
	m‰ag_begö
, *
	m‰ag_íd
;

59 }
	mdebug
;

63 
dev_‰ì_skb
–
sk_buff
 *
skb
);

64 
sk_buff
 * 
dev_Æloc_skb
–
Àn
 );

65 
sk_buff
 *
dev_Æloc_skb2
(
u32
 
msgty≥
, 
size_t
 
Àn
);

66 
√t_öô
();

67 
skbuff_öô
();

	@include/linux/slab.h

1 #i‚de‡
SLAB_H


2 
	#SLAB_H


	)

4 
	g¶ab_hód
;

5 
	#SLAB_HWCACHE_ALIGN
 1

	)

6 
	#SLAB_CACHE_DMA
 2

	)

7 
	#SLAB_ZERO
 4

	)

9 
	#L1_CACHLINE_SIZE
 32

	)

10 
	#BYTES_PER_WORD
 4

	)

13 
¶ab_hód
 * 
ªgi°î_¶ab_ty≥
(*
«me
, 
objsize
,

14 
off£t
, 
Êags
,

15 (*
˘‹
)(*, 
¶ab_hód
 *, ),

16 (*
dt‹
)(*, 
¶ab_hód
 *, )

18 
	#kmem_ˇche_¸óã
 
ªgi°î_¶ab_ty≥


	)

19 *
	`kmÆloc2
(
size
, 
Êags
);

20 
	`k‰ì2
(*
obj
);

21 * 
	`kmem_ˇche_Æloc
(
¶ab_hód
 *
¶abhód
, 
Êags
);

22 
	`kmem_ˇche_‰ì
(
¶ab_hód
 *
¶abhód
, *
obj
);

23 
	`kmem_ˇche_öô
();

24 
	`kmem_ˇche_ã°
();

26 *
	`°©ic_Æloc
(
objsize
, 
objnum
);

28 
	#°©ic_curs‹_up


	)

	@include/linux/string.h

1 #i‚de‡
LINUX_STRING_H


2 
	#LINUX_STRING_H


	)

5 
	~<vÆTy≥.h
>

7 
°æí
(*
°r
);

8 
°∫Àn
(*
°r
, 
ul⁄g
 
n
);

9 *
°r˝y
(*
de°
,*
§c
);

10 *
°∫˝y
(*
de°
, c⁄° *
§c
, 
n
);

11 
°rcmp
(c⁄° *
°r1
, c⁄° *
°r2
);

12 
°∫cmp
(c⁄° *
°r1
, c⁄° *
°r2
, 
n
);

13 
boﬁ
 
°rm©ch
(*
£g
,*
whﬁe
);

	@include/linux/timer.h

1 #i‚de‡
LINUX_TIMER_H


2 
	#LINUX_TIMER_H


	)

3 
	~<vÆTy≥.h
>

4 
	~<li°.h
>

6 
	mTIMER_STOPPED
,

7 
	mTIMER_RUNNING


9 
	stimî
{

10 
u32
 
	m‹igö
;

11 
u32
 
	mli„
;

12 (*
	ma˘
)(*
	md©a
);

13 * 
	md©a
;

14 
	m°©e
;

15 
li°_hód
 
	mnode
;

18 
my_timîli°_dida
();

19 
öô_mytimî
();

20 
timî
 *
¸óã_mytimî
(
u32
 
li„
, (*
a˘
)(* 
d©a
), *data);

21 
	`åiggî_mytimî
(
timî
 *timer);

22 
	`°¨t_mytimî
(
timî
 *timer);

	@include/linux/udp.h

1 #i‚de‡
LINUX_UDP_H


2 
	#LINUX_UDP_H


	)

3 
	~<√t/udp.h
>

	@include/linux/wait.h

1 #i‚de‡
LINUX_WAIT_H


2 
	#LINUX_WAIT_H


	)

4 
	#WNOHANG
 1

	)

5 
	#WUNTRACED
 2

	)

	@include/net/arp.h

1 #i‚de‡
ARP_H


2 
	#ARP_H


	)

3 
	~<vÆTy≥.h
>

4 
	~<löux/if_ëhî.h
>

5 
	~<löux/skbuff.h
>

7 #¥agm®
∑ck
(
push
)

8 #¥agm®
∑ck
(1)

10 
	s¨phdr
{

11 
u16
 
	mh¨dw¨e
;

12 
u16
 
	m¥Ÿocﬁ
;

13 
u8
 
	mhaddr_Àn
;

14 
u8
 
	m∑ddr_Àn
;

15 
u16
 
	m›î©i⁄
;

16 
u8
 
	mmymac
[6];

17 
u32
 
	mmyù
;

18 
u8
 
	myourmac
[6];

19 
u32
 
	myourù
;

22 
	s¨p_∑ckë
{

23 
ëhhdr
 
	mëhhdr
;

24 
¨phdr
 
	m¨phdr
;

27 #¥agm®
∑ck
(
p›
)

29 
	#ARP_PACK_SIZE
 ((
¨p_∑ckë
))

	)

31 
mk_¨p_∑ckë
(
¨p_∑ckë
 *
∑ckë
, 
u8
 *
mymac
, 
myù
, u8 *
yourmac
, 
u32
 
yourù
);

32 
¨p_öô
();

33 
¨p_œyî_ª˚ive
(
sk_buff
 *
skb
);

34 
¨p_down
(
sk_buff
 *
skb
);

35 
¨p_öquúe
(
u32
 
yourù
);

	@include/net/icmp.h

1 #i‚de‡
ICMP_H


2 
	#ICMP_H


	)

3 
	~<löux/if_ëhî.h
>

4 
	~<löux/udp.h
>

5 
	~<löux/ù.h
>

7 
	#ICMP_ECHOREPLY
 0

	)

8 
	#ICMP_DEST_UNREACH
 3

	)

9 
	#ICMP_SOURCE_QUENCH
 4

	)

10 
	#ICMP_REDIRECT
 5

	)

11 
	#ICMP_ECHO
 8

	)

12 
	#ICMP_TIME_EXCEEDED
 11

	)

13 
	#ICMP_PARAMETERPROB
 12

	)

14 
	#ICMP_TIMESTAMP
 13

	)

15 
	#ICMP_TIMESTAMPREPLY
 14

	)

16 
	#ICMP_INFO_REQUEST
 15

	)

17 
	#ICMP_INFO_REPLY
 16

	)

18 
	#ICMP_ADDRESS
 17

	)

19 
	#ICMP_ADDRESSREPLY
 18

	)

20 
	#NR_ICMP_TYPES
 18

	)

24 
	#ICMP_NET_UNREACH
 0

	)

25 
	#ICMP_HOST_UNREACH
 1

	)

26 
	#ICMP_PROT_UNREACH
 2

	)

27 
	#ICMP_PORT_UNREACH
 3

	)

28 
	#ICMP_FRAG_NEEDED
 4

	)

29 
	#ICMP_SR_FAILED
 5

	)

30 
	#ICMP_NET_UNKNOWN
 6

	)

31 
	#ICMP_HOST_UNKNOWN
 7

	)

32 
	#ICMP_HOST_ISOLATED
 8

	)

33 
	#ICMP_NET_ANO
 9

	)

34 
	#ICMP_HOST_ANO
 10

	)

35 
	#ICMP_NET_UNR_TOS
 11

	)

36 
	#ICMP_HOST_UNR_TOS
 12

	)

37 
	#ICMP_PKT_FILTERED
 13

	)

38 
	#ICMP_PREC_VIOLATION
 14

	)

39 
	#ICMP_PREC_CUTOFF
 15

	)

40 
	#NR_ICMP_UNREACH
 15

	)

43 
	#ICMP_REDIR_NET
 0

	)

44 
	#ICMP_REDIR_HOST
 1

	)

45 
	#ICMP_REDIR_NETTOS
 2

	)

46 
	#ICMP_REDIR_HOSTTOS
 3

	)

49 
	#ICMP_EXC_TTL
 0

	)

50 
	#ICMP_EXC_FRAGTIME
 1

	)

52 #¥agm®
∑ck
(
push
)

53 #¥agm®
∑ck
(1)

55 
	sicmphdr
{

56 
u8
 
	mty≥
;

57 
u8
 
	msubty≥
;

58 
u16
 
	mchecksum
;

60 
u32
 
	mign‹e
;

62 
u16
 
	mid
;

63 
u16
 
	m£quí˚
;

67 
u32
 
	mdw‹d
[0];

68 }
	md©a
;

71 
	sicmpmsg_un
{

72 
icmphdr
 
	mhódî
;

73 
ùhdr
 
	mûl_ùhdr
;

75 
udphdr
 
	mûl_udphdr
;

76 
	mûl_d©a
[8];

80 
	sicmpmsg_mask
{

81 
icmphdr
 
	mhódî
;

82 
	maddr_mask
;

85 
	sicmpmsg_t°amp
{

86 
icmphdr
 
	mhódî
;

87 
	mt_‹ig
;

88 
	mt_ªcv
;

89 
	mt_ªtu∫
;

91 #¥agm®
∑ck
(
p›
)

111 
icmp_ª˚ive
(
sk_buff
 *
comî
);

	@include/net/ip.h

1 #i‚de‡
IP_H


2 
	#IP_H


	)

3 
	~<vÆTy≥.h
>

4 
	#PROTOCOL_ICMP
 1

	)

5 
	#PROTOCOL_IGMP
 2

	)

6 
	#PROTOCOL_TCP
 6

	)

7 
	#PROTOCOL_UDP
 17

	)

8 #¥agm®
∑ck
(
push
)

9 #¥agm®
∑ck
(1)

30 
	sùhdr
{

31 
u32
 
	mÀn
: 4;

32 
	mvîsi⁄
: 4;

33 
u8
 
	mign‹e
;

34 
u16
 
	mtŸ_Àn
;

35 
u16
 
	mmsgid
;

38 
u16
 
	mme_off£t
: 13;

39 
	mÊag_mf
: 1;

40 
	mÊag_df
: 1;

41 
	mÊag_ª£rved
: 1;

43 
u16
 
	mÊag_off
;

45 
u8
 
	mâl
;

46 
u8
 
	m¥Ÿocﬁ
;

47 
u16
 
	mchksum
;

48 
u32
 
	mmyù
;

49 
u32
 
	myourù
;

52 #¥agm®
∑ck
(
p›
)

54 
	#IPHDR_LEN
 ( –
ùhdr
 ) )

	)

55 
	#IP_PAYLOAD_LEN
(
ùhdr
Ë(ùhdr->
tŸ_Àn
 - (ùhdr->
Àn
 * 4Ë)

	)

56 
ölöe
 
	$ùhash
(
ù
){

57 
u8
 *
byã
 = (u8 *)&
ù
;

58  (
byã
[0] + byte[1] + byte[2] + byte[3]);

59 
	}
}

61 
	gsk_buff
;

62 
ù_echo_down
(
sk_buff
 *
skb
, 
u8
 
me_¥Ÿocﬁ
, u8 
âl
);

63 
ù_down
(
sk_buff
 *
skb
, 
u8
 
me_¥Ÿocﬁ
,

64 
u32
 
de°_ù
, u32 
§c_ù
,

65 
u8
 
âl
);

66 
ù_œyî_öô
();

67 
ù_œyî_ª˚ive
(
sk_buff
 *
skb
);

	@include/net/tcp.h

1 #i‚de‡
NET_TCP_H


2 
	#NET_TCP_H


	)

3 
	~<vÆTy≥.h
>

4 
	~<löux/ù.h
>

6 
	#TCP_FLAG_FIN
 (1)

	)

7 
	#TCP_FLAG_SYN
 (1<<1)

	)

8 
	#TCP_FLAG_RST
 (1<<2)

	)

9 
	#TCP_FALG_PSH
 (1<<3)

	)

10 
	#TCP_FLAG_ACK
 (1<<4)

	)

11 
	#TCP_FALG_URG
 (1<<5)

	)

12 
	#TCP_FALG_ECE
 (1<<6)

	)

13 
	#TCP_FALG_CWR
 (1<<7)

	)

15 #¥agm®
∑ck
(
push
)

16 #¥agm®
∑ck
(1)

18 
	st˝_›t
{

19 
u8
 
	mköd
;

20 
u8
 
	mÀn
;

22 
u8
 
	mbyã
[0];

23 
u16
 
	mw‹d
[0];

24 
u32
 
	mdw‹d
[0];

25 }
	md©a
;

49 
	st˝hdr
{

50 
u16
 
	mmyp‹t
;

51 
u16
 
	myouΩ‹t
;

52 
u32
 
	m£q
;

53 
u32
 
	mack
;

54 
	mªsv
: 4;

55 
	mÀn
: 4;

58 
	mÊag_fö
: 1;

59 
	mÊag_syn
: 1;

60 
	mÊag_r°
: 1;

61 
	mÊag_psh
: 1;

62 
	mÊag_ack
: 1;

63 
	mÊag_urg
: 1;

64 
	mÊag_e˚
: 1;

65 
	mÊag_cwr
: 1;

67 
u8
 
	mÊags
;

69 
u16
 
	mwndsize
;

70 
u16
 
	mchksum
;

71 
u16
 
	murg±r
;

72 
t˝_›t
 
	m›t_¨ó
[0];

75 #¥agm®
∑ck
(
p›
)

77 
	#TCPHDR_LEN
 ((
t˝hdr
))

	)

78 
ölöe
 
u32
 
	$t˝hash
(
u32
 
hisù
, 
u16
 
hi•‹t
, u32 
myp‹t
){

79 
u32
 
hash
 = 
	`ùhash
(
hisù
Ë+ (
hi•‹t
 & 0xff) + (hisport >> 8)

80 + (
myp‹t
 & 0xff) + (myport >> 8);

81  
hash
;

82 
	}
}

83 
öô_t˝
();

84 
t˝_œyî_ªcv
(
sk_buff
 *
comî
);

	@include/net/udp.h

1 #i‚de‡
UDP_H


2 
	#UDP_H


	)

3 
	~<löux/skbuff.h
>

4 
	~<vÆTy≥.h
>

6 #¥agm®
∑ck
(
push
)

7 #¥agm®
∑ck
(1)

9 
	sudphdr
{

10 
u16
 
	mmyp‹t
;

11 
u16
 
	myouΩ‹t
;

12 
u16
 
	mtŸ_Àn
;

13 
u16
 
	mchksum
;

14 
	md©a
[0];

17 #¥agm®
∑ck
(
p›
)

20 
udp_œyî_ª˚ive
(
sk_buff
 *
comî
);

	@include/old/asm_lable.h

1 #i‚de‡
ASM_LABLE_H


2 
	#ASM_LABLE_H


	)

3 
ª°‹e_Æl
();

4 
ªt_‰om_öå
();

5 
ªt_‰om_sys_ˇŒ
();

6 
ªt_wôh_ªscheduÀ
();

7 
ªscheduÀ
();

8 
∑ge_Áu…
();

10 
RAMDISK_BASE
();

	@include/old/atomic.h

1 
	~<vÆTy≥.h
>

3 
	#ATOMIC_INIT
(
i
Ë{i}

	)

5 
ölöe
 
	$©omic_ªad
(
©omic_t
 *
v
){

6  
v
->
cou¡î
;

7 
	}
}

9 
ölöe
 
	$©omic_£t
(
i
, 
©omic_t
 *
v
){

10 
v
->
cou¡î
 = 
i
;

11 
	}
}

13 
ölöe
 
	$©omic_add
(
i
, 
©omic_t
 *
v
){

14 
asm
 volatile(

16 :"m"(
v
->
cou¡î
)

17 :"r"(
i
)

20 
	}
}

	@include/old/blk.h

1 #i‚de‡
BLK_H


2 
	#BLK_H


	)

7 
	sªque°
{

8 
	mdev
;

9 
	mcmd
;

10 
	mlba
;

11 
	mcou¡
;

12 *
	mbuf„r
;

	@include/old/bootinfo.h

1 #i‚de‡
BOOT_INFO_H


2 
	#BOOT_INFO_H


	)

5 #i‚de‡
ENV_NOT_KERNEL


6 
	~<mm.h
>

10 
	sªÆmod_öfo_°ru˘
{

11 
	mmem_£gnum
;

13 
mem_£göfo
 
	mmem_£göfo
[10];

14 
	m∑ddög
[256];

18 
ªÆmod_öfo_°ru˘
 
ªÆmod_öfo
;

19 
	#ªÆmod_öfo
 ((
ªÆmod_öfo_°ru˘
*)
	`KV
(&
ªÆmod_öfo
))

	)

22 
	#KV
(
physiˇl_addr
Ë((
u32
)’hysiˇl_addr)+
KROOM_ADDR
)

	)

25 
_kî√l_image_°¨t_£˘‹
;

26 
	#kî√l_image_°¨t_£˘‹
 (()&
_kî√l_image_°¨t_£˘‹
)

	)

27 
_fiximg_°¨t_£˘‹
;

28 
	#fiximg_°¨t_£˘‹
 (()&
_fiximg_°¨t_£˘‹
)

	)

30 
_mem£g_num
;

31 
	#g_mem£g_num
 (*(*)
	`KV
(&
_mem£g_num
))

	)

33 
_ba£_memöfo
;

34 
	#g_mem£g_öfo
 ( (
mem£g_öfo
 *)
	`KV
(&
_ba£_memöfo
Ë)

	)

	@include/old/disp.h

1 #i‚de‡
DISP_H


2 
	#DISP_H


	)

5 
k_s¸ìn_ª£t
();

6 
k_show_ch¨s
(*
±_hód
,
íd_Êag
);

7 
›rötf
(*
f‹m©
,...);

8 
k_s¸ﬁl
();

9 
k_checkbound
();

12 
k_show_v¨
(
x
,
vÆ_ty≥
);

13 
show_asciis_buf„r
();

14 
wrôe_asciis_buf„r
(
x
,
vÆ_ty≥
);

15 
öô_asciis_buf„r
();

	@include/old/elf.h

1 #i‚de‡
ELF_H


2 
	#ELF_H


	)

3 
	~<ﬁd/vÆTy≥.h
>

5 #¥agm®
∑ck
(
push
)

6 #¥agm®
∑ck
(1)

10 
	#ET_NONE
 0

	)

11 
	#ET_REL
 1

	)

12 
	#ET_EXEC
 2

	)

13 
	#ET_DYN
 3

	)

14 
	#ET_CORE
 4

	)

15 
	#ET_NUM
 5

	)

16 
	#ET_LOOS
 0x„00

	)

17 
	#ET_HIOS
 0x„f‡

	)

18 
	#ET_LOPROC
 0xff00

	)

19 
	#ET_HIPROC
 0xfff‡

	)

23 
	#SHT_NULL
 0

	)

24 
	#SHT_PROGBITS
 1

	)

25 
	#SHT_SYMTAB
 2

	)

26 
	#SHT_STRTAB
 3

	)

27 
	#SHT_RELA
 4

	)

28 
	#SHT_HASH
 5

	)

29 
	#SHT_DYNAMIC
 6

	)

30 
	#SHT_NOTE
 7

	)

31 
	#SHT_NOBITS
 8

	)

32 
	#SHT_REL
 9

	)

33 
	#SHT_SHLIB
 10

	)

34 
	#SHT_DYNSYM
 11

	)

35 
	#SHT_INIT_ARRAY
 14

	)

36 
	#SHT_FINI_ARRAY
 15

	)

37 
	#SHT_PREINIT_ARRAY
 16

	)

38 
	#SHT_GROUP
 17

	)

39 
	#SHT_SYMTAB_SHNDX
 18

	)

40 
	#SHT_NUM
 19

	)

41 
	#SHT_LOOS
 0x60000000

	)

42 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

43 
	#SHT_GNU_HASH
 0x6ffffff6

	)

44 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

45 
	#SHT_CHECKSUM
 0x6ffffff8

	)

46 
	#SHT_LOSUNW
 0x6fffffÁ

	)

47 
	#SHT_SUNW_move
 0x6fffffÁ

	)

48 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

49 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

50 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

51 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

52 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

53 
	#SHT_HISUNW
 0x6ffffff‡

	)

54 
	#SHT_HIOS
 0x6ffffff‡

	)

55 
	#SHT_LOPROC
 0x70000000

	)

56 
	#SHT_HIPROC
 0x7ffffff‡

	)

57 
	#SHT_LOUSER
 0x80000000

	)

58 
	#SHT_HIUSER
 0x8ffffff‡

	)

62 
	#AT_NULL
 0

	)

63 
	#AT_IGNORE
 1

	)

64 
	#AT_EXECFD
 2

	)

65 
	#AT_PHDR
 3

	)

66 
	#AT_PHENT
 4

	)

67 
	#AT_PHNUM
 5

	)

68 
	#AT_PAGESZ
 6

	)

69 
	#AT_BASE
 7

	)

70 
	#AT_FLAGS
 8

	)

71 
	#AT_ENTRY
 9

	)

72 
	#AT_NOTELF
 10

	)

73 
	#AT_UID
 11

	)

74 
	#AT_EUID
 12

	)

75 
	#AT_GID
 13

	)

76 
	#AT_EGID
 14

	)

77 
	#AT_CLKTCK
 17

	)

80 
	#AT_PLATFORM
 15

	)

81 
	#AT_HWCAP
 16

	)

86 
	#AT_FPUCW
 18

	)

89 
	#AT_DCACHEBSIZE
 19

	)

90 
	#AT_ICACHEBSIZE
 20

	)

91 
	#AT_UCACHEBSIZE
 21

	)

95 
	#AT_IGNOREPPC
 22

	)

97 
	#AT_SECURE
 23

	)

99 
	#AT_BASE_PLATFORM
 24

	)

101 
	#AT_RANDOM
 25

	)

103 
	#AT_EXECFN
 31

	)

107 
	#AT_SYSINFO
 32

	)

108 
	#AT_SYSINFO_EHDR
 33

	)

112 
	#AT_L1I_CACHESHAPE
 34

	)

113 
	#AT_L1D_CACHESHAPE
 35

	)

114 
	#AT_L2_CACHESHAPE
 36

	)

115 
	#AT_L3_CACHESHAPE
 37

	)

117 
u8
 
	me_idít
[16];

118 
Elf32_HÆf
 
	me_ty≥
;

119 
Elf32_HÆf
 
	me_machöe
;

120 
Elf32_W‹d
 
	me_vîsi⁄
;

121 
Elf32_Addr
 
	me_íåy
;

122 
Elf32_Off
 
	me_phoff
;

123 
Elf32_Off
 
	me_shoff
;

124 
Elf32_W‹d
 
	me_Êags
;

125 
Elf32_HÆf
 
	me_ehsize
;

126 
Elf32_HÆf
 
	me_phítsize
;

127 
Elf32_HÆf
 
	me_phnum
;

128 
Elf32_HÆf
 
	me_shítsize
;

129 
Elf32_HÆf
 
	me_shnum
;

130 
Elf32_HÆf
 
	me_sh°∫dx
;

131 } 
	tElf32_Ehdr
;

135 
Elf32_W‹d
 
	mp_ty≥
;

136 
Elf32_Off
 
	mp_off£t
;

137 
Elf32_Addr
 
	mp_vaddr
;

138 
Elf32_Addr
 
	mp_∑ddr
;

139 
Elf32_W‹d
 
	mp_fûesz
;

140 
Elf32_W‹d
 
	mp_memsz
;

141 
Elf32_W‹d
 
	mp_Êags
;

142 
Elf32_W‹d
 
	mp_Æign
;

143 } 
	tElf32_Phdr
;

147 
	#PF_R
 0x4

	)

148 
	#PF_W
 0x2

	)

149 
	#PF_X
 0x1

	)

152 
	#PT_NULL
 0

	)

153 
	#PT_LOAD
 1

	)

154 
	#PT_DYNAMIC
 2

	)

155 
	#PT_INTERP
 3

	)

156 
	#PT_NOTE
 4

	)

157 
	#PT_SHLIB
 5

	)

158 
	#PT_PHDR
 6

	)

159 
	#PT_TLS
 7

	)

160 
	#PT_LOOS
 0x60000000

	)

161 
	#PT_HIOS
 0x6ffffff‡

	)

162 
	#PT_LOPROC
 0x70000000

	)

163 
	#PT_HIPROC
 0x7fffffff

	)

164 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

166 
	#PT_GNU_STACK
 (
PT_LOOS
 + 0x474e551)

	)

169 
	#PH_SIZE
 ((
Elf32_Phdr
))

	)

173 
u32
 
	ma_ty≥
;

174 
u32
 
	ma_vÆ
;

175 } 
	tElf32_auxv_t
;

181 
Elf32_W‹d
 
	msh_«me
;

182 
Elf32_W‹d
 
	msh_ty≥
;

183 
Elf32_W‹d
 
	msh_Êags
;

184 
Elf32_Addr
 
	msh_addr
;

185 
Elf32_Off
 
	msh_off£t
;

186 
Elf32_W‹d
 
	msh_size
;

187 
Elf32_W‹d
 
	msh_lök
;

188 
Elf32_W‹d
 
	msh_öfo
;

189 
Elf32_W‹d
 
	msh_addølign
;

190 
Elf32_W‹d
 
	msh_ítsize
;

191 } 
	tElf32_Shdr
;

197 
Elf32_W‹d
 
	m°_«me
;

198 
Elf32_Addr
 
	m°_vÆue
;

199 
Elf32_W‹d
 
	m°_size
;

203 
	m°_ty≥
:4;

204 
	m°_böd
:4;

206 
	m°_öfo
;

208 
	m°_Ÿhî
;

209 
Elf32_HÆf
 
	m°_shndx
;

210 } 
	tElf32_Sym
;

213 
	#SHN_UNDEF
 0

	)

214 
	#SHN_LORESERVE
 0xff00

	)

215 
	#SHN_LOPROC
 0xff00

	)

216 
	#SHN_BEFORE
 0xff00

	)

218 
	#SHN_AFTER
 0xff01

	)

220 
	#SHN_HIPROC
 0xff1‡

	)

221 
	#SHN_LOOS
 0xff20

	)

222 
	#SHN_HIOS
 0xff3‡

	)

223 
	#SHN_ABS
 0xfff1

	)

224 
	#SHN_COMMON
 0xfff2

	)

225 
	#SHN_XINDEX
 0xfff‡

	)

226 
	#SHN_HIRESERVE
 0xfff‡

	)

230 
	#STB_LOCAL
 0

	)

231 
	#STB_GLOBAL
 1

	)

232 
	#STB_WEAK
 2

	)

233 
	#STB_NUM
 3

	)

234 
	#STB_LOOS
 10

	)

235 
	#STB_GNU_UNIQUE
 10

	)

236 
	#STB_HIOS
 12

	)

237 
	#STB_LOPROC
 13

	)

238 
	#STB_HIPROC
 15

	)

242 
	#STT_NOTYPE
 0

	)

243 
	#STT_OBJECT
 1

	)

244 
	#STT_FUNC
 2

	)

245 
	#STT_SECTION
 3

	)

246 
	#STT_FILE
 4

	)

247 
	#STT_COMMON
 5

	)

248 
	#STT_TLS
 6

	)

249 
	#STT_NUM
 7

	)

250 
	#STT_LOOS
 10

	)

251 
	#STT_GNU_IFUNC
 10

	)

252 
	#STT_HIOS
 12

	)

253 
	#STT_LOPROC
 13

	)

254 
	#STT_HIPROC
 15

	)

261 
Elf32_Addr
 
	mr_off£t
;

264 
	mr_ty≥
:8;

265 
	mr_symndx
:24;

267 
Elf32_W‹d
 
	mr_öfo
;

269 } 
	tElf32_Rñ
;

272 
	#R_386_NONE
 0

	)

273 
	#R_386_32
 1

	)

274 
	#R_386_PC32
 2

	)

275 
	#R_386_GOT32
 3

	)

276 
	#R_386_PLT32
 4

	)

277 
	#R_386_COPY
 5

	)

278 
	#R_386_GLOB_DAT
 6

	)

279 
	#R_386_JMP_SLOT
 7

	)

280 
	#R_386_RELATIVE
 8

	)

281 
	#R_386_GOTOFF
 9

	)

282 
	#R_386_GOTPC
 10

	)

283 
	#R_386_32PLT
 11

	)

284 
	#R_386_TLS_TPOFF
 14

	)

285 
	#R_386_TLS_IE
 15

	)

287 
	#R_386_TLS_GOTIE
 16

	)

289 
	#R_386_TLS_LE
 17

	)

291 
	#R_386_TLS_GD
 18

	)

293 
	#R_386_TLS_LDM
 19

	)

296 
	#R_386_16
 20

	)

297 
	#R_386_PC16
 21

	)

298 
	#R_386_8
 22

	)

299 
	#R_386_PC8
 23

	)

300 
	#R_386_TLS_GD_32
 24

	)

302 
	#R_386_TLS_GD_PUSH
 25

	)

303 
	#R_386_TLS_GD_CALL
 26

	)

305 
	#R_386_TLS_GD_POP
 27

	)

306 
	#R_386_TLS_LDM_32
 28

	)

308 
	#R_386_TLS_LDM_PUSH
 29

	)

309 
	#R_386_TLS_LDM_CALL
 30

	)

311 
	#R_386_TLS_LDM_POP
 31

	)

312 
	#R_386_TLS_LDO_32
 32

	)

313 
	#R_386_TLS_IE_32
 33

	)

315 
	#R_386_TLS_LE_32
 34

	)

317 
	#R_386_TLS_DTPMOD32
 35

	)

318 
	#R_386_TLS_DTPOFF32
 36

	)

319 
	#R_386_TLS_TPOFF32
 37

	)

321 
	#R_386_TLS_GOTDESC
 39

	)

322 
	#R_386_TLS_DESC_CALL
 40

	)

325 
	#R_386_TLS_DESC
 41

	)

329 
	#R_386_IRELATIVE
 42

	)

331 
	#R_386_NUM
 43

	)

338 
	md_èg
;

341 
Elf32_W‹d
 
	md_vÆ
;

342 
Elf32_Addr
 
	md_±r
;

344 } 
	tElf32_Dyn
;

348 
	#DT_NULL
 0

	)

349 
	#DT_NEEDED
 1

	)

350 
	#DT_PLTRELSZ
 2

	)

351 
	#DT_PLTGOT
 3

	)

352 
	#DT_HASH
 4

	)

353 
	#DT_STRTAB
 5

	)

354 
	#DT_SYMTAB
 6

	)

355 
	#DT_RELA
 7

	)

356 
	#DT_RELASZ
 8

	)

357 
	#DT_RELAENT
 9

	)

358 
	#DT_STRSZ
 10

	)

359 
	#DT_SYMENT
 11

	)

360 
	#DT_INIT
 12

	)

361 
	#DT_FINI
 13

	)

362 
	#DT_SONAME
 14

	)

363 
	#DT_RPATH
 15

	)

364 
	#DT_SYMBOLIC
 16

	)

365 
	#DT_REL
 17

	)

366 
	#DT_RELSZ
 18

	)

367 
	#DT_RELENT
 19

	)

368 
	#DT_PLTREL
 20

	)

369 
	#DT_DEBUG
 21

	)

370 
	#DT_TEXTREL
 22

	)

371 
	#DT_JMPREL
 23

	)

372 
	#DT_BIND_NOW
 24

	)

373 
	#DT_INIT_ARRAY
 25

	)

374 
	#DT_FINI_ARRAY
 26

	)

375 
	#DT_INIT_ARRAYSZ
 27

	)

376 
	#DT_FINI_ARRAYSZ
 28

	)

377 
	#DT_RUNPATH
 29

	)

378 
	#DT_FLAGS
 30

	)

379 
	#DT_ENCODING
 32

	)

380 
	#DT_PREINIT_ARRAY
 32

	)

381 
	#DT_PREINIT_ARRAYSZ
 33

	)

382 
	#DT_NUM
 34

	)

383 
	#DT_LOOS
 0x6000000d

	)

384 
	#DT_HIOS
 0x6ffff000

	)

385 
	#DT_LOPROC
 0x70000000

	)

386 
	#DT_HIPROC
 0x7ffffff‡

	)

387 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

400 #¥agm®
∑ck
(
p›
)

	@include/old/fork.h

1 #i‚de‡
FORK_H


2 
	#FORK_H


	)

4 
chgpg
(*
dú
,
vpg
,
rw
);

	@include/old/fs.h

1 #i‚de‡
FS_H


2 
	#FS_H


	)

	@include/old/fs_cell.h

1 #i‚de‡
FS_CELL_H


2 
	#FS_CELL_H


	)

4 
	#NAME_LEN
 16

	)

5 
	#CELL_SECTORS
 32

	)

6 
	#CELL_MAX
 8

	)

8 *
	g˚Œmbr
;

9 
£¨ch_fûe
(*
«me
);

	@include/old/fs_ext.h

1 #i‚de‡
FS_EXT__H


2 
	#FS_EXT__H


	)

3 
	~<vÆTy≥.h
>

4 
	~<fs.h
>

6 
	#INODE_FILE_DIR
 4

	)

8 
	#BLOCK_FILE_REGULAR
 1

	)

9 
	#BLOCK_FILE_DIR
 2

	)

11 
__À32
 
	ms_öodes_cou¡
;

12 
__À32
 
	ms_blocks_cou¡
;

13 
__À32
 
	ms_r_blocks_cou¡
;

14 
__À32
 
	ms_‰ì_blocks_cou¡
;

15 
__À32
 
	ms_‰ì_öodes_cou¡
;

16 
__À32
 
	ms_fú°_d©a_block
;

17 
__À32
 
	ms_log_block_size
;

18 
__À32
 
	ms_log_‰ag_size
;

19 
__À32
 
	ms_blocks_≥r_group
;

20 
__À32
 
	ms_‰ags_≥r_group
;

21 
__À32
 
	ms_öodes_≥r_group
;

22 
__À32
 
	ms_mtime
;

23 
__À32
 
	ms_wtime
;

24 
__À16
 
	ms_m¡_cou¡
;

25 
__À16
 
	ms_max_m¡_cou¡
;

26 
__À16
 
	ms_magic
;

27 
__À16
 
	ms_°©e
;

28 
__À16
 
	ms_îr‹s
;

29 
__À16
 
	ms_mö‹_ªv_Àvñ
;

30 
__À32
 
	ms_œ°check
;

31 
__À32
 
	ms_checköãrvÆ
;

32 
__À32
 
	ms_¸ót‹_os
;

33 
__À32
 
	ms_ªv_Àvñ
;

34 
__À16
 
	ms_def_ªsuid
;

35 
__À16
 
	ms_def_ªsgid
;

37 
__À32
 
	ms_fú°_öo
;

38 
__À16
 
	ms_öode_size
;

39 
__À16
 
	ms_block_group_ƒ
;

40 
__À32
 
	ms_„©uª_com∑t
;

41 
__À32
 
	ms_„©uª_öcom∑t
;

42 
__À32
 
	ms_„©uª_ro_com∑t
;

43 
__u8
 
	ms_uuid
[16] ;

44 
	ms_vﬁume_«me
[16] ;

45 
	ms_œ°_mou¡ed
[64] ;

46 
__À32
 
	ms_Æg‹ôhm_ußge_bôm≠
;

48 
__u8
 
	ms_¥óŒoc_blocks
;

49 
__u8
 
	ms_¥óŒoc_dú_blocks
;

50 
__u16
 
	ms_∑ddög1
;

52 
__u8
 
	ms_jou∫Æ_uuid
[16] ;

53 
__u32
 
	ms_jou∫Æ_öum
;

54 
__u32
 
	ms_jou∫Æ_dev
;

55 
__u32
 
	ms_œ°_‹ph™
;

56 
__u32
 
	ms_hash_£ed
[4] ;

57 
__u8
 
	ms_def_hash_vîsi⁄
;

58 
__u8
 
	ms_ª£rved_ch¨_∑d
;

59 
__u16
 
	ms_ª£rved_w‹d_∑d
;

60 
__À32
 
	ms_deÁu…_mou¡_›ts
;

61 
__À32
 
	ms_fú°_mëa_bg
;

62 
__u32
 
	ms_ª£rved
[190] ;

63 }
	tSUPER_BLOCK
;

70 
__À32
 
	mbg_block_bôm≠
;

71 
__À32
 
	mbg_öode_bôm≠
;

72 
__À32
 
	mbg_öode_èbÀ
;

73 
__À16
 
	mbg_‰ì_blocks_cou¡
;

74 
__À16
 
	mbg_‰ì_öodes_cou¡
;

75 
__À16
 
	mbg_u£d_dús_cou¡
;

76 
__À16
 
	mbg_∑d
;

77 
__À32
 
	mbg_ª£rved
[3];

78 }
	tGROUP_DESC
;

85 
__À16
 
	mi_mode
;

86 
__À16
 
	mi_uid
;

87 
__À32
 
	mi_size
;

88 
__À32
 
	mi_©ime
;

89 
__À32
 
	mi_˘ime
;

90 
__À32
 
	mi_mtime
;

91 
__À32
 
	mi_dtime
;

92 
__À16
 
	mi_gid
;

93 
__À16
 
	mi_löks_cou¡
;

94 
	mblock_cou¡
;

95 
__À32
 
	mi_Êags
;

96 
	mos_öf‹m©i⁄
;

97 
	mblocks
[12];

98 
	m£edblock1
;

99 
	m£edblock2
;

100 
	m£edblock3
;

101 
	m∑ddí1
[128/4-25];

102 }
	tINODE
;

105 
	möode
;

106 
u16
 
	mªc‹d_Àn
;

107 
u8
 
	m«me_Àn
;

108 
u8
 
	mfûe_ty≥
;

109 
	m«me
[128];

110 }
	tDIRENT
;

112 
fs_ext
();

	@include/old/func_table.h

1 #i‚de‡
FUNC_TABLE_H


2 
	#FUNC_TABLE_H


	)

4 
k_¶ìp
(
msg_ty≥
,
msg_böd
);

	@include/old/hd.h

1 #i‚de‡
HD_H


2 
	#HD_H


	)

4 
	#SIZE_SECTOR
 512

	)

6 
	#OFFSET2
 (0x0)

	)

7 
	#REG_DATA
 (0x1f0-
OFFSET2
)

	)

9 
	#REG_ERROR
 (0X1F1-
OSFSET2
)

	)

10 
	#REG_FEATURES
 (0X1F1-
OFFSET2
)

	)

12 
	#REG_COUNT
 (0X1F2-
OFFSET2
)

	)

13 
	#REG_LBA_LOW
 (0X1F3-
OFFSET2
)

	)

14 
	#REG_LBA_MID
 (0X1F4-
OFFSET2
)

	)

15 
	#REG_LBA_HIGH
 (0x1F5-
OFFSET2
)

	)

16 
	#REG_DEVICE
 (0X1F6-
OFFSET2
)

	)

18 
	#REG_STATUS
 (0x1F7-
OFFSET2
)

	)

19 
	#REG_COMMAND
 (0x1F7-
OFFSET2
)

	)

21 
	#REG_CONTROL
 (0X3F6-
OFFSET2
)

	)

23 
	#MASK_BSY
 0x80

	)

25 
	#COMMAND_IDENTIFY
 0xec

	)

26 
	#COMMAND_NULL
 0x0

	)

27 
	#COMMAND_READ
 0x20

	)

28 
	#COMMAND_WRITE
 0x30

	)

29 
	#COMMAND_CHECK
 0X90

	)

30 
	#COMMAND_OPEN
 0x1

	)

31 
	#COMMAND_CLOSE
 0x2

	)

32 
	#COMMAND_SEEK
 0x3

	)

33 
	#STATUS_BSY
 (
	`ö_byã
(
REG_STATUS
)&
MASK_BSY
)

	)

35 
	#MAKE_REG_DEVICE
(
lba
,
drv
,
lba_highe°
Ë(÷ba<<6)|(drv<<4)|÷ba_highe°)|0XA0)

	)

37 
	#SECTOR_THROUGHPUT
 256

	)

42 
	s£À˘
{

43 
u8
 
	mhód
: 4;

44 
u8
 
	mdrv
: 1;

45 
u8
 
	mbô5
: 1;

46 
u8
 
	mlba
: 1;

47 
u8
 
	mbô7
: 1;

49 
	slba
{

50 
u8
 
	mlow
;

51 
u8
 
	mmiddÀ
;

52 
u8
 
	mhigh
;

53 
£À˘
 
	m£À˘
;

55 
	sªquúe
{

58 
u8
 
	mlow
;

59 
u8
 
	mmid
;

60 
u8
 
	mhigh
;

61 
u8
 
	m∑ddí
;

62 }
	mlba_°ru
;

63 
u32
 
	mlba
;

65 
u8
 
	m„©uªs
;

66 
u32
 
	mªg_cou¡
;

67 
u8
 
	mdevi˚
;

68 
u8
 
	mcomm™d
;

71 *
	mbuf
;

72 
u32
 
	mcou¡
;

74 *
	m±_cuº
;

77 
	#STATUS_BSY
 (
	`ö_byã
(
REG_STATUS
)&0x80)

	)

78 
	#STATUS_DRQ
 (
	`ö_byã
(
REG_STATUS
)&0x8)

	)

	@include/old/hd_drv.h

1 #i‚de‡
HD_DRV_H


2 
	#HD_DRV_H


	)

3 
	~<utûs.h
>

4 
	~<vÆTy≥.h
>

	@include/old/heap.h

1 #i‚de‡
HEAP_H


2 
	#HEAP_H


	)

3 
	#CELL_FREE
 0

	)

4 
	#CELL_USED
 1

	)

5 
	#BASE_HEAP
 (0x400000+4096)

6 
	#SIZE_HEAP
 0x1000000

7 
	#SIZE_HEADER_HEAPCELL
 ((
HEADER_HEAPCELL
))

	)

8 
	shódî_hópCñl
{

9 
hódî_hópCñl
* 
	m±_¥ev
;

10 
hódî_hópCñl
* 
	m±_√xt
;

11 
	msize
;

12 
	mty≥
;

13 }
	tHEADER_HEAPCELL
;

15 
öôHóp
();

16 * 
omÆloc
(
num4
);

17 
o‰ì
(* 
±
);

	@include/old/hs.h

1 #i‚de‡
HS_H


2 
	#HS_H


	)

3 
	~<utûs.h
>

4 
	~<hd_drv.h
>

5 
	~<vÆTy≥.h
>

6 
	~<mm.h
>

7 
	#SIZE_SECTOR
 512

	)

9 
	#OFFSET2
 (0x0)

	)

10 
	#REG_DATA
 (0x1f0-
OFFSET2
)

	)

12 
	#REG_ERROR
 (0X1F1-
OSFSET2
)

	)

13 
	#REG_FEATURES
 (0X1F1-
OFFSET2
)

	)

15 
	#REG_COUNT
 (0X1F2-
OFFSET2
)

	)

16 
	#REG_LBA_LOW
 (0X1F3-
OFFSET2
)

	)

17 
	#REG_LBA_MID
 (0X1F4-
OFFSET2
)

	)

18 
	#REG_LBA_HIGH
 (0x1F5-
OFFSET2
)

	)

19 
	#REG_DEVICE
 (0X1F6-
OFFSET2
)

	)

21 
	#REG_STATUS
 (0x1F7-
OFFSET2
)

	)

22 
	#REG_COMMAND
 (0x1F7-
OFFSET2
)

	)

24 
	#REG_CONTROL
 (0X3F6-
OFFSET2
)

	)

26 
	#MASK_BSY
 0x80

	)

28 
	#COMMAND_IDENTIFY
 0xec

	)

29 
	#COMMAND_NULL
 0x0

	)

30 
	#COMMAND_READ
 0x20

	)

31 
	#COMMAND_WRITE
 0x30

	)

32 
	#COMMAND_CHECK
 0X90

	)

33 
	#COMMAND_OPEN
 0x1

	)

34 
	#COMMAND_CLOSE
 0x2

	)

35 
	#COMMAND_SEEK
 0x3

	)

36 
	#STATUS_BSY
 (
	`ö_byã
(
REG_STATUS
)&
MASK_BSY
)

	)

38 
	#MAKE_REG_DEVICE
(
lba
,
drv
,
lba_highe°
Ë(÷ba<<6)|(drv<<4)|÷ba_highe°)|0XA0)

	)

40 
	#SECTOR_THROUGHPUT
 256

	)

44 
u8
 
	mlow
;

45 
u8
 
	mmid
;

46 
u8
 
	mhigh
;

47 
u8
 
	m∑ddí
;

48 }
	mlba_°ru
;

49 
u32
 
	mlba
;

51 
u8
 
	m„©uªs
;

52 
u32
 
	mªg_cou¡
;

53 
u8
 
	mdevi˚
;

54 
u8
 
	mcomm™d
;

57 *
	mbuf
;

58 
u32
 
	mcou¡
;

60 *
	m±_cuº
;

61 
pcb
 * 
	maskî
;

62 }
	tHS_CMD
;

65 
hs_cmd_out
(
HS_CMD
*
cmd
);

66 
hs_cmd_öô
(
u32
 
lba
,u32 
cou¡
,
u8
 
comm™d
,*
buf
);

67 
hs
();

68 
idítify_öfo
();

69 
cmd_öfo
();

70 
askhs
(
comm™d
,
lba
,
cou¡
,*
buf
);

	@include/old/i8259.h

1 #i‚de‡
I8259_H


2 
	#I8259_H


	)

4 
	~<vÆTy≥.h
>

5 
öô_ISA_úqs
();

6 
u16
 
pic_gë_i§
();

	@include/old/irq.h

1 #i‚de‡
IRQ_H


2 
	#IRQ_H


	)

3 
	~<vÆTy≥.h
>

4 
	g±_ªgs
;

7 
	#NR_IRQS
 16

	)

9 
	#IRQ_PENDING
 1

	)

10 
	#IRQ_INPROCESS
 (1<<1)

	)

11 
	#IRQ_DISABLED
 (1<<2)

	)

13 (*
	míabÀ
)(
	múq
);

14 (*
	mdißbÀ
)(
	múq
);

15 (*
	mack
)(
	múq
);

16 (*
	míd
)(
	múq
);

17 }
	thw_úq_c⁄åﬁÀr
;

20 
	m°©us
;

21 
úqa˘i⁄
 *
	ma˘i⁄
;

22 
hw_úq_c⁄åﬁÀr
 *
	mhw_h™dÀr
;

23 }
	túq_desc_t
;

26 
	#SA_SHIRQ
 1

	)

27 
	#SA_INTERRUPT
 (1<<1Ë

	)

28 
	súqa˘i⁄
{

32 (*
	mfunc
Ë(
	múq
, *
	mdev
, 
±_ªgs
 *
	mªgs
);

33 
	mÊags
;

34 *
	mdev
;

36 
úqa˘i⁄
 *
	m√xt
;

39 
úq_desc_t
 
	gúq_desc
[
NR_IRQS
];

43 
ªque°_úq
(
úq
, (*
h™dÀr
)(, *, 
±_ªgs
 *), 
Êags
, *
dev
);

44 
boﬁ
 
	`ö_öãºu±
();

	@include/old/kbd_drv.h

1 #i‚de‡
_ORANGES_KEYMAP_H_


2 
	#_ORANGES_KEYMAP_H_


	)

5 
	#NR_SCAN_CODES
 0X40

	)

6 
	#MAP_COLS
 3

	)

8 
	#ESC
 0

	)

9 
	#BACKSPACE
 '\b'

	)

10 
	#TAB
 0

	)

11 
	#SHIFT_L
 0

	)

12 
	#SHIFT_R
 0

	)

13 
	#CTRL_L
 0

	)

14 
	#CTRL_R
 0

	)

15 
	#ALT_L
 0

	)

16 
	#ALT_R
 0

	)

17 
	#ENTER
 '\n'

	)

19 
	#MC_SHIFT_L
 0x2A

	)

20 
	#MC_SHIFT_R
 0x36

	)

21 
	#MC_CTRL_L
 0x1D

	)

23 
	#BC_SHIFT_L
 0xAA

	)

24 
	#BC_SHIFT_R
 0xB6

	)

25 
	#BC_CTRL_L
 0x9D

	)

	@include/old/ku_mm.h

1 #i‚de‡
KU_MM_H


2 
	#KU_MM_H


	)

3 
	~<pmm.h
>

5 
	#USR_PSP_LEN
 (64)

	)

6 
	#USR_PSP_BASE
 (
PAGE_OFFSET
-
USR_PSP_LEN
)

	)

7 
	#USR_STACK_BASE
 (
USR_PSP_BASE
 - 4)

	)

8 
	su§_p•_°ru˘
{

9 
	mpid
;

10 
	m_î∫o
;

13 
	#__u§_p•
 ((
u§_p•_°ru˘
 *)
USR_PSP_BASE
)

	)

	@include/old/ku_proc.h

2 #i‚de‡
KU_PROC_H


3 
	#KU_PROC_H


	)

5 
	#MSGTYPE_TIMER
 255

	)

6 
	#MSGTYPE_DEEP
 0

	)

7 
	#MSGTYPE_CHAR
 1

	)

8 
	#MSGTYPE_FS_ASK
 2

	)

9 
	#MSGTYPE_HD_DONE
 3

	)

10 
	#MSGTYPE_HS_READY
 4

	)

11 
	#MSGTYPE_HS_DONE
 5

	)

12 
	#MSGTYPE_FS_READY
 8

	)

13 
	#MSGTYPE_USR_ASK
 6

	)

14 
	#MSGTYPE_FS_DONE
 7

	)

	@include/old/ku_utils.h

1 #i‚de‡
KU_UTILS_H


2 
	#KU_UTILS_H


	)

3 
	~<vÆTy≥.h
>

4 
	#mö
(
x
,
y
Ë((x)<(y)?(x):(y))

	)

5 
	#MAX
(
x
, 
y
Ë((x)>(y)?(x):(y))

	)

8 
	#ót_hex
(
±
,
x
)\

9 *
__±
=(
±
);\

10 
x
=0;\

11 if(*
__±
!='0'||*(__pt+1)!='x'){\

12 
x
=-1;\

13 
d⁄Ÿhög
;\

15 
__±
+=2;\

16 if(!((*
__±
>='0'&&*__pt<='9')||(*__pt>='a'&&*__pt<='f'))){\

17 
x
=-1;\

18 
d⁄Ÿhög
;\

20 (*
__±
>='0'&&*__pt<='9')||(*__pt>='a'&&*__pt<='f')) __pt++;\

21 
__±
--;\

22 
__Àn
=
__±
-
±
+1-2;\

23 
__i
=0;__i<
__Àn
;__i++){\

24 
x
+=
	`hex_öt
(*
__±
)*
	`pow_öt
(16,
__i
);\

25 
__±
--;\

27 (
±
)+=(2+
__Àn
);\

28 
d⁄Ÿhög
:;

	)

31 
	#ót_dec
(
±
,
x
)\

32 if(*
±
<'0'||*±>'9'Ë
d⁄Ÿhög
;\

33 
x
=0;\

34 *
__±
=(
±
);\

35 *(
__±
+1)>='0'&&*(__pt+1)<='9') __pt++;\

36 
__Àn
=
__±
-(
±
)+1;\

37 
__i
=0;__i<
__Àn
;__i++){\

38 
x
+=(*
__±
-48)*
	`pow_öt
(10,
__i
);\

39 
__±
--;\

41 (
±
)+=
__Àn
;\

42 
d⁄Ÿhög
:;

	)

44 
	#ót_dec_wôh_Àn
(
±
,
x
,
x_Àn
) \

45 *
__±
=(
±
);\

46 *(
__±
+1)>='0'&&*(__pt+1)<='9') __pt++;\

47 
Àn
=
__±
-(
±
)+1;\

48 
__i
=0;__i<
x_Àn
;__i++){\

49 
x
+=(*
__±
-48)*
	`pow_öt
(10,
__i
);\

50 
__±
--;\

52 (
±
)+=
x_Àn
;

	)

53 
	gmem_ítôy
[4];

54 
mem£tw
(*
de°
,
w‹d
,
vÆue
);

55 
mem£t
(*
de°
,
vÆue
,
n
);

56 
ch¨s_to_°r
(*
°r
,*
ch¨s
);

57 
ch¨scmp
(*
±1
,*
±2
,
íd_Êag
);

58 
˚û_divide
(
a
,
b
);

59 
pow_öt
(
ba£
,
exp
);

60 
hum™_memsize_öto
(*
gmkb
,
size
,
öôül_sˇÀ_cou¡
);

61 *
hum™_memsize
(
size
,
öôül_sˇÀ_cou¡
);

62 
hex_öt
(
x
);

	@include/old/list.h

1 #i‚de‡
LIST_H


2 
	#LIST_H


	)

5 #i‚de‡
__USER


6 
	~<löux/as£π.h
>

8 
	~<as£π.h
>

10 
	sli°_hód
{

11 
li°_hód
 *
	m¥ev
;

12 
li°_hód
 *
	m√xt
;

13 }
	tli°_hód_t
;

15 
	#INIT_LIST_HEAD
(
l
)\

17 (
l
)->
¥ev
 = (l)->
√xt
 =Ü;\

18 } 0)

	)

20 
ölöe
 
	$__li°_add
(
li°_hód_t
 *
√w
,Üi°_hód_à*
¥ev
,

21 
li°_hód_t
 *
√xt
){

22 
	`as£π
–
√w
 && 
¥ev
 && 
√xt
\

23 && 
¥ev
->¥ev &&Öªv->
√xt
 &&Çext->prev &&Çext->next);

24 
√w
->
√xt
 =Çext;

25 
√xt
->
¥ev
 = 
√w
;

26 
√w
->
¥ev
 =Örev;

27 
¥ev
->
√xt
 = 
√w
;

28 
	}
}

35 
ölöe
 
	$li°_add
(
li°_hód_t
 *
√w
,Üi°_hód_à*
hód
){

36 
	`__li°_add
(
√w
, 
hód
, hód->
√xt
);

37 
	}
}

39 
ölöe
 
	$li°_add_èû
(
li°_hód_t
 *
√w
,Üi°_hód_à*
hód
){

40 
	`__li°_add
(
√w
, 
hód
->
¥ev
, head);

41 
	}
}

49 
ölöe
 
	$__li°_dñ
(
li°_hód_t
 *
¥ev
,Üi°_hód_à*
√xt
){

50 
	`as£π
(
¥ev
 && 
√xt
 &&Örev->next &&Örev->prev &&Çext->prev &&Çext->next);

51 
¥ev
->
√xt
 =Çext;

52 
√xt
->
¥ev
 =Örev;

53 
	}
}

56 
ölöe
 
	$li°_dñ
(
li°_hód_t
 *
íåy
){

57 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

58 
	}
}

60 
ölöe
 
	$li°_dñ_öô
(
li°_hód_t
 *
íåy
){

61 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

62 
	`INIT_LIST_HEAD
(
íåy
);

63 
	}
}

65 
ölöe
 
	$li°_em±y
(
li°_hód_t
 *
íåy
){

66  
íåy
->
√xt
 ==Éntry;

67 
	}
}

69 
ölöe
 
	$li°_mìt_èû
(
li°_hód_t
 *
fú°
,Üi°_hód_à*
íåy
){

70  
íåy
->
√xt
 =
fú°
;

71 
	}
}

74 
	#LIST_FIND2
(
°ru_t
, 
mb_t
, 
roŸ
, 
key
, 
vÆue
, 
ªsu…
) \

76 
li°_hód
 * 
node
 = 
roŸ
->
√xt
; \

77 
°ru_t
 *
obj
; \

78 
node
 !
roŸ
){ \

79 *
obj
 = 
	`MB2STRU
(
°ru_t
, 
node
, 
mb_t
); \

80 if–(
obj
)->
key
 =
vÆue
 ) ; \

81 
node
 =Çode->
√xt
; \

83 if(
node
 =
roŸ
Ë
ªsu…
 = 0; \

84 
ªsu…
 = 
obj
; \

85 } 0);

	)

87 
ölöe
 
	$hashèbÀ_add
(
li°_hód_t
 *
hashèbÀ
, 
hash
,Üi°_hód_à*
√w
){

88 
	`li°_add
(
√w
, 
hashèbÀ
 + 
hash
) ;

89 
	}
}

93 
	#MB2STRU
(
°ru_ty≥
, 
mb_addr
, 
mb_«me
)\

94 (
°ru_ty≥
 *)–()(
mb_addr
)- ()&((°ru_ty≥ *)0)->
mb_«me
 )

	)

98 
	#c⁄èöî_of
(
hód
, 
°ru
, 
membî
Ë
	`MB2STRU
(°ru, hód, membî)

	)

104 
	#li°_f‹_óch_ß„
(
roŸ
, 
c⁄èöî
, 
mb«me
) \

106 
li°_hód
 *
node
 = (
roŸ
)->
√xt
, *next =Çode->next; \

107 ((
c⁄èöî
 = 
	`c⁄èöî_of
(
node
, 
	`__ty≥of__
(*c⁄èöî), 
mb«me
)) || 1)\

108 && 
node
 !
roŸ
; \

109 
node
 = 
√xt
,Çext =Çext->next \

110 )

	)

	@include/old/mm.h

1 #i‚de‡
MM_H


2 
	#MM_H


	)

3 
	~<löux/mm.h
>

	@include/old/mmzone.h

1 #i‚de‡
MMZONE_H


2 
	#MMZONE_H


	)

3 
	~<li°.h
>

4 
	~<löux/mm.h
>

5 
	~<asm/∑ge.h
>

7 
	#G_PGNUM
 (
gmemsize
>>12)

	)

8 
	s∑ge
{

9 
li°_hód
 
	mÃu
;

10 
	m_cou¡
;

11 
	mcow_sh¨ed
;

16 
	m¥iv©e
;

17 
	mPG_highmem
:1;

18 
	mPG_¥iv©e
:1;

19 
	mPG_zid
:2;

20 
	mdebug
:8;

21 
	m∑ddí
:20;

22 }
	t∑ge_t
;

24 
	#∑ge_idx
(
∑ge_t
Ë(()(’age_tË- 
mem_m≠
))

	)

25 
	#±e_p‚
(
±e
Ë(’ã)>>
PAGE_SHIFT
)

	)

26 
	#p‚_∑ge
(
p‚
Ë(
mem_m≠
 + (p‚))

	)

27 
	#±e_∑ge
(
±e
Ë–
	`p‚_∑ge
–
	`±e_p‚
’ãËË)

	)

28 
	#∑ge_va
(
∑ge
Ë
	`__va
–’agê- 
mem_m≠
Ë<< 
PAGE_SHIFT
)

	)

29 
	#vút_to_∑ge
(
vaddr
Ë
	`p‚_∑ge
–
	`__∑
(vaddrË>> 
PAGE_SHIFT
)

	)

30 
∑ge
 *
	gmem_m≠
;

32 
	#MAX_ORDER
 10

	)

34 
	#__GFP_DEFAULT
 0

	)

35 
	#__GFP_ZERO
 (1<<0)

	)

36 
	#__GFP_DMA
 (1<<1)

	)

37 
	#__GFP_HIGHMEM
 (1<<2)

	)

38 
	#__GFP_NORMAL
 (1<<3)

	)

40 
	#ZONE_DMA
 0

	)

41 
	#ZONE_NORMAL
 1

	)

42 
	#ZONE_HIGHMEM
 2

	)

43 
	#ZONE_MAX
 3

	)

45 
	#ZONE_DMA_PA
 0

	)

46 
	#ZONE_NORMAL_PA
 0X1000000

	)

47 
	#ZONE_HIGHMEM_PA
 (896*0x100000)

	)

49 
	s‰ì_¨ó_°ru˘
{

50 
li°_hód
 
	m‰ì_li°
;

51 
	mƒ_‰ì
;

52 
	m‰ìs
,
	mÆlocs
;

53 }
	t‰ì_¨ó_t
;

55 
	sz⁄e_°ru˘
{

57 
	m‰ì_∑ges
;

58 
‰ì_¨ó_t
 
	m‰ì_¨ó
[
MAX_ORDER
+1];

59 
∑ge
 *
	mz⁄e_mem_m≠
;

60 
	m•™√d_∑ges
;

61 
	mÆlocs
,
	m‰ìs
;

62 }
	tz⁄e_t
;

64 
z⁄e_t
 
	gz⁄e_dma
;

65 
z⁄e_t
 
	gz⁄e_n‹mÆ
;

66 
z⁄e_t
 
	gz⁄e_highmem
;

67 
z⁄e_t
 *
	g__z⁄es
[3];

68 
	gsize_of_z⁄e
[3];

69 
öô_z⁄e
();

74 
‰ì_∑ges
(
∑ge
 *∑ge, 
‹dî
);

90 
ölöe
 
	$__‰ì_∑ges
(* 
‰ame_addr
, 
‹dî
){

91 
	`as£π
(
‰ame_addr
 >(*)
__3G
);

92 
µg
 = 
	`__∑
(
‰ame_addr
) >> 12;

93 
	`‰ì_∑ges
(
mem_m≠
 + 
µg
, 
‹dî
);

94 
	}
}

96 
ölöe
 
	$__‰ì_∑ge
(* 
‰ame_addr
){

97 
	`__‰ì_∑ges
(
‰ame_addr
, 0);

98 
	}
}

100 
ölöe
 
	$‰ì_∑ge
(
∑ge
 *Öage){

101 
	`‰ì_∑ges
(
∑ge
, 0);

102 
	}
}

109 
∑ge
 *
Æloc_∑ges
(
u32
 
gÂ_mask
, 
‹dî
);

110 
ölöe
 * 
	$__Æloc_∑ges
(
u32
 
gÂ_mask
, 
‹dî
){

111 
u32
 
µg
 = 
	`∑ge_idx
(
	`Æloc_∑ges
(
gÂ_mask
, 
‹dî
));

112  (*)
	`KV
(
µg
<<12);

113 
	}
}

115 
ölöe
 
∑ge
 *
	$Æloc_∑ge
(
u32
 
gÂ
)

117  
	`Æloc_∑ges
(
gÂ
, 0);

118 
	}
}

120 
ölöe
 * 
	$__Æloc_∑ge
(
u32
 
gÂ
)

122  
	`__Æloc_∑ges
(
gÂ
, 0);

123 
	}
}

128 
ölöe
 
∑ge
 *
	$__va2∑ge_t
(
vaddr
){

129 
	`as£π
(
vaddr
 > 
__3G
);

130  (
mem_m≠
 + ((
vaddr
 - 
PAGE_OFFSET
) >> 12));

131 
	}
}

135 
ölöe
 
∑ge
 *
	$gë_∑ge
(
∑ge
 *page){

136 
	`as£π
(
∑ge
->
_cou¡
 >= 1);

137 
∑ge
->
_cou¡
++;

138  
∑ge
;

139 
	}
}

141 
ölöe
 
	$put_∑ge
(
∑ge
 *page){

142 
	`as£π
(
∑ge
->
_cou¡
 >= 1);

143 if(
∑ge
->
_cou¡
 == 1){

144 
	`‰ì_∑ge
(
∑ge
);

146 
∑ge
->
_cou¡
--;

147 
	}
}

149 
ölöe
 
∑ge
 *
	$±e2∑ge_t
(
±e
Öte){

150 
	`as£π
(
±e
.
vÆue
 &&Öã.
¥e£¡
);

151  ( 
mem_m≠
 + (
±e
).
physiˇl
 );

152 
	}
}

	@include/old/ntfs.h

1 #i‚de‡
__NTFS_H__


2 
	#__NTFS_H__


	)

4 
	~<vÆTy≥.h
>

12 
u16
 
	tWCHAR
;

13 
	#MAX_PATH
 260

	)

15 #¥agm®
∑ck
(1)

16 
	sèg_NTFS_hódî
{

17 
byã
 
	mbJmp
[3];

18 
byã
 
	mbNTFœgs
[4];

19 
byã
 
	mbRe£rve1
[4];

20 
	mwByãPîSe˘‹
;

21 
byã
 
	mbSe˘‹PîClu°î
;

22 
	mwRe£rveSe˘‹s
;

23 
byã
 
	mbF©Num
;

24 
	mwRoŸDúNum
;

25 
	mwSe˘‹OfP¨ti
;

26 
byã
 
	mbMedium
;

27 
	mwSe˘‹PîF©
;

28 
	mwSe˘‹PîTøck
;

29 
	mwHódNum
;

30 
	mdwHideSe˘‹
;

31 
	mdwSe˘oOfP¨ti
;

32 
byã
 
	mbDevi˚Fœg
;

33 
byã
 
	mbRe£rve2
;

34 
	mwRe£rve3
;

35 
uöt64_t
 
	muŒSe˘‹sOfP¨ti
;

36 
uöt64_t
 
	muŒMFTAddr
;

37 
uöt64_t
 
	muŒMFTMúrAddr
;

38 
byã
 
	mbClu°îPîFûe
;

39 
byã
 
	mbRe£rve4
[3];

40 
	mdwClu°îPîINDX
;

41 
byã
 
	mbSîülID
[8];

42 } 
	t¡fs_hódî
, *
	t≤tfs_hódî
;

47 
	sèg_MFTHEAD
 {

48 
byã
 
	mbHódID
[4];

49 
u16
 
	musFixupOff£t
;

50 
u16
 
	musFixupNum
;

51 
byã
 
	mbRe£rve1
[8];

52 
u16
 
	mwUnknownSeqNum
;

53 
u16
 
	musLökNum
;

54 
u16
 
	musAârOff£t
;

55 
	mwResidít
;

56 
	mulMFTSize
;

57 
	mulMFTAŒocSize
;

58 
uöt64_t
 
	muŒMaöMFT
;

59 
u16
 
	mwNextFªeID
;

60 
u16
 
	mwFixup
[0x10];

61 } 
	tm·_hód
;

63 
	sèg_RESIDATTR
 {

64 
u32
 
	mulD©aSize
;

65 
u16
 
	musRD©aOff£t
;

66 
	mwUnknownAârIndexID
;

67 } 
	tRESIDATTR
, *
	tLPRESIDATTR
;

69 
	sèg_NONRESIDATTR
 {

70 
uöt64_t
 
	muŒVCNSèπ
;

71 
uöt64_t
 
	muŒVCNEnd
;

72 
u16
 
	musNrD©aOff£t
;

73 
	mwCom¥Engöe
;

74 
	mdeRe£rve2
;

75 
uöt64_t
 
	muŒAŒocSize
;

76 
uöt64_t
 
	muŒD©aSize
;

77 
uöt64_t
 
	muŒInôSize
;

78 
uöt64_t
 
	muŒCom¥Size
;

79 } 
	tNONRESIDATTR
, *
	tLPNONRESIDATTR
;

81 
	sèg_MFTATTR
 {

82 
	mdwAârTy≥
;

83 
u16
 
	musAârSize
;

84 
	mwRe£rve1
;

85 
byã
 
	mbISResidít
;

86 
byã
 
	mbLíName
;

87 
u16
 
	musD©aOff£t
;

88 
	mwISCom¥
;

89 
	mwAârID
;

90 
	uunAârib
{

91 
RESIDATTR
 
	mResidAâr
;

92 
NONRESIDATTR
 
	mN⁄ResidAâr
;

93 } 
	munAârib
;

94 } 
	tMFTATTR
, *
	tLPMFTATTR
;

98 
	sèg_FILE_NAME


100 
u32
 
	mdwMFTIndex
;

101 
	mwRe£rve1
;

102 
	mwRe£rve2
;

103 
uöt64_t
 
	muŒTime1
;

104 
uöt64_t
 
	muŒTime2
;

105 
uöt64_t
 
	muŒTime3
;

106 
uöt64_t
 
	muŒTime4
;

107 
uöt64_t
 
	muŒAŒocSize
;

108 
uöt64_t
 
	muŒFûeSize
;

109 
uöt64_t
 
	muŒFûeAâr
;

110 
byã
 
	mbNameLí
;

111 
byã
 
	mbNameTy≥
;

112 
WCHAR
 
	mpwCh¨
[
MAX_PATH
];

113 } 
	tFILE_NAME
, *
	tLPFILENAME
;

115 
	sèg_INDXENTRY


117 
u32
 
	mdwMFTIndx
;

118 
u32
 
	mdwRe£rve1
;

119 
	mwE¡rySize
;

120 
	mwRe£rve2
;

121 
byã
 
	mbISSubNode
;

122 
byã
 
	mbRe£rve3
[3];

123 
u32
 
	mdwAµór
;

124 
u32
 
	mdwRe£rve4
;

125 
uöt64_t
 
	muŒFûeTime
[4];

126 
uöt64_t
 
	muŒD©aAlcSize
;

127 
uöt64_t
 
	muŒD©aSize
;

128 
uöt64_t
 
	muŒRe£rve5
;

129 
byã
 
	mbNameLí
;

130 
byã
 
	mbNameTy≥
;

131 
WCHAR
 
	mwzFûeName
[
MAX_PATH
];

133 } 
	tINDXENTRY
, *
	tLPINDXENTRY
;

135 
	sèg_INDX


137 
byã
 
	mbDúID
[4];

138 
	mwFixupOff£t
;

139 
	mwFixupNum
;

140 
byã
 
	mwRe£rve1
[8];

141 
byã
 
	mbRe£rve2
[8];

142 
	mwHódSize
;

143 
	mwRe£rve3
;

144 
u32
 
	mdwU£Size
;

145 
u32
 
	mdwAŒocSize
;

146 
u32
 
	mdwRe£rve3
;

147 
byã
 
	mbFixup
[0x0A];

149 } 
	tINDX
, *
	tLPINDX
;

151 
	sèg_INDXATTR


153 
u32
 
	mdwMFTIndx
;

154 
	mwRe£rve1
;

155 
	mwRe£rve2
;

156 
	mwcbSize
;

157 
	mwNameAârLí
;

158 
	mwISSubNode
;

159 
byã
 
	mbRe£rve3
[2];

160 
u32
 
	mdwP¨ítMFTIndx
;

161 
u32
 
	mdwRe£rve4
;

162 
uöt64_t
 
	muŒCª©eTime
;

163 
uöt64_t
 
	muŒLa°ModTime
;

164 
uöt64_t
 
	muŒModRcdTime
;

165 
uöt64_t
 
	muŒLa°AccTime
;

166 
uöt64_t
 
	muŒAŒocSize
;

167 
uöt64_t
 
	muŒFûeSize
;

168 
uöt64_t
 
	muŒFûeFœgs
;

169 
byã
 
	mbFûeNameLí
;

170 
byã
 
	mbFûeNS∑˚
;

171 
WCHAR
 
	mwzFûeName
[
MAX_PATH
];

173 } 
	tINDXATTR
, *
	tLPINDXATTR
;

175 
	sèg_INDXROOT


177 
u32
 
	mdwAârTy≥
;

178 
u32
 
	mdwC⁄RuÀ
;

179 
u32
 
	mdwE¡rySize
;

180 
byã
 
	mbClu°îPîIndex
;

181 
byã
 
	mbPad
[3];

183 } 
	tINDXROOT
, *
	tLPINDXROOT
;

185 
	sèg_INDXHEAD
{

186 
u32
 
	mdw1IndxOff£t
;

187 
u32
 
	mdwIndxSize
;

188 
u32
 
	mdwInxAlcSize
;

189 
byã
 
	mbFœgs
;

190 
byã
 
	mbPad
[3];

191 } 
	tINDXHEAD
, *
	tLPINDXHEAD
;

193 #¥agm®
∑ck
()

198 
	mAâribuãSènd¨dInf‹m©i⁄
 = 0x10,

199 
	mAâribuãAâribuãLi°
 = 0x20,

200 
	mAâribuãFûeName
 = 0x30,

201 
	mAâribuãObje˘Id
 = 0x40,

202 
	mAâribuãSecurôyDes¸ùt‹
 = 0x50,

203 
	mAâribuãVﬁumeName
 = 0x60,

204 
	mAâribuãVﬁumeInf‹m©i⁄
 = 0x70,

205 
	mAâribuãD©a
 = 0x80,

206 
	mAâribuãIndexRoŸ
 = 0x90,

207 
	mAâribuãIndexAŒoˇti⁄
 = 0xA0,

208 
	mAâribuãBôm≠
 = 0xB0,

209 
	mAâribuãRï¨£Poöt
 = 0xC0,

210 
	mAâribuãEAInf‹m©i⁄
 = 0xD0,

211 
	mAâribuãEA
 = 0xE0,

212 
	mAâribuãPr›îtySë
 = 0xF0,

213 
	mAâribuãLoggedUtûôySåóm
 = 0x100

214 } 
	tATTRIBUTE_TYPE
, *
	tPATTRIBUTE_TYPE
;

216 
ã°_ªad_¡fs_hódî
();

	@include/old/pmm.h

1 #i‚de‡
PMM_H


2 
	#PMM_H


	)

3 
	~<vÆTy≥.h
>

4 
	~<asm/∑ge.h
>

8 
	#HEAP_BASE
 18*0x100000

	)

9 
	#HEAP_SIZE
 (64*0x100000)

	)

10 
	sem±y_blockk
{

11 
em±y_blockk
*
	m¥ev
;

12 
em±y_blockk
*
	m√xt
;

13 
	msize
;

14 }
	tEMPTY_BLOCK
;

15 
	#BLOCK_DATA_END
(
block
Ë(()((*)block+(
EMPTY_BLOCK
)+block->
size
-1))

	)

16 * 
kmÆloc0
(
byãs
);

17 *
kmÆloc
(
byã
);

18 
k‰ì
(*
±
);

19 
hóp_öô
();

20 
dñ_node
(
EMPTY_BLOCK
*
block
);

21 
ö£π_a·î
(
EMPTY_BLOCK
*
mŸhî
,EMPTY_BLOCK*
block
);

	@include/old/proc.h

1 #i‚de‡
PROC_H


2 
	#PROC_H


	)

3 
	~"vÆTy≥.h
"

4 
	~<utûs.h
>

5 
	~<ku_¥oc.h
>

6 
	~<mm.h
>

7 
	~<asm/ªsour˚.h
>

8 
	~<löux/mm.h
>

10 
	#P_NAME_MAX
 16

	)

12 
tss
 
ba£_tss
;

13 
	#g_tss
 (&
ba£_tss
)

	)

15 
pcb
 *
èsk0
, *
èsk1
;

18 
pcb
 *
	g__hs_pcb
;

19 
pcb
 *
	g__ext_pcb
;

24 
	#size_buf„r
 16

	)

26 
	mc
[
size_buf„r
];

27 
	mhód
;

28 
	mèû
;

29 
	mnum
;

30 }
	tOBUFFER
;

36 
£À˘‹_∂aö_c0
,
£À˘‹_∂aö_d0
,
£À˘‹_∂aö_c1
,
£À˘‹_∂aö_d1
,
£À˘‹_∂aö_c3
,
£À˘‹_∂aö_d3
;

38 
	gdíåy
; 
	gvfsmou¡
; 
	gfûe
;

39 
	sfs_°ru˘
{

40 
	mcou¡
;

41 
díåy
 *
	mroŸ
, *
	mpwd
;

42 
vfsmou¡
 *
	mroŸm¡
, *
	mpwdm¡
;

45 
	#NR_OPEN_DEFAULT
 32

	)

50 
	sfûes_°ru˘
{

55 
	mmax_fds
;

56 
fûe
 **
	mfûï
;

57 
fûe
 *
	m‹igö_fûï
[
NR_OPEN_DEFAULT
];

58 
	mcou¡
;

61 
	sthªad
{

62 
	me•
;

63 
	meù
;

67 
	s±_ªgs
{

68 
u32
 
	mebx
,
	mecx
,
	medx
,
	mesi
;

69 
u32
 
	medi
,
	mebp
,
	móx
;

70 
u32
 
	mds
,
	mes
,
	mgs
,
	mfs
;

71 
u32
 
	mîr_code
;

72 
u32
 
	meù
,
	mcs
,
	meÊags
,
	me•
,
	mss
;

73 }
	t°ack_‰ame
;

75 
	#EFLAGS_STACK_LEN
 7

	)

76 
	seÊags_°ack
{

77 
	mba£
[
EFLAGS_STACK_LEN
 + 1];

78 
	me•
;

80 
	#PCB_SIZE
 0x2000

	)

81 
	#THREAD_SIZE
 0x2000

	)

84 
	spcb
{

87 
	m√ed_ªsched
;

88 
	msig≥ndög
;

89 
	m°©e
;

90 
	mexô_°©us
;

91 
pcb
 *
	m¥ev
;

92 
pcb
 *
	m√xt
;

93 
u32
 
	mpid
;

94 
	mp_«me
[16];

95 
u32
 
	m¥io
;

96 
u32
 
	mtime_¶i˚
,
	mtime_¶i˚_fuŒ
;

97 
u32
 
	mmsg_ty≥
,
	mmsg_böd
;

98 
mm
 *
	mmm
;

99 
thªad
 
	mthªad
;

100 
fs_°ru˘
 *
	mfs
;

101 
fûes_°ru˘
 *
	mfûes
;

102 
æimô
 
	mæimôs
[
RLIMIT_MAX
];

103 
eÊags_°ack
 
	mf°ack
;

104 
u32
 
	mmagic
;

105 
li°_hód
 
	mchûdªn
;

106 
li°_hód
 
	msiblög
;

107 
pcb
 *
	mmŸhî
;

108 
pcb
 *
	mm⁄ô‹
;

109 
li°_hód
 
	m¶ìp
;

110 
u32
 
	m__èsk_°ru˘_íd
;

112 
	m∑ddí
[
PCB_SIZE
-(
°ack_‰ame
)];

114 
°ack_‰ame
 
	mªgs
;

118 
	#cuºít
 (
	`gë_cuºít
())

	)

119 
pcb
 *
gë_cuºít
();

121 
	~<löux/fs.h
>

122 
	stss
{

123 
	mback_lök
,
	m__blh
;

124 
	me•0
;

125 
	mss0
,
	m__ss0h
;

126 
	me•1
;

127 
	mss1
,
	m__ss1h
;

128 
	me•2
;

129 
	mss2
,
	m__ss2h
;

130 
	m¸3
;

131 
	meù
;

132 
	meÊags
;

133 
	móx
,
	mecx
,
	medx
,
	mebx
;

134 
	me•
;

135 
	mebp
;

136 
	mesi
;

137 
	medii
;

138 
	mes
, 
	m__esh
;

139 
	mcs
, 
	m__csh
;

140 
	mss
, 
	m__ssh
;

141 
	mds
, 
	m__dsh
;

142 
	mfs
, 
	m__fsh
;

143 
	mgs
, 
	m__gsh
;

144 
	mldt
, 
	m__ldth
;

145 
	måa˚
, 
	mbôm≠
;

146 
	m__ˇchñöe_fûÀr
[5] ;

150 
	#SET_PID_EAX
(
pid
,
ªtu∫_vÆ
Ë
pcb_èbÀ
[pid].
ªgs
.
óx
=
	)
ªtu∫_vÆ

152 
fúe
(
pcb
 *
p
);

153 
fúe_asm
(
u32
 
addr_pcb
);

154 
¥oc_öô
();

155 
pcb
 * 
¸óã_¥o˚ss
(
u32
 
addr
,
¥io
,
time_¶i˚
,*
p_«me
);

157 
obuf„r_öô
(
OBUFFER
* 
±_obuf„r
);

158 
obuf„r_push
(
OBUFFER
* 
±_obuf„r
,
c
);

159 
obuf„r_shi·
(
OBUFFER
* 
±_obuf„r
);

170 
	#__f°ack
 (
cuºít
->
f°ack
)

	)

171 
ölöe
 
	$˛i_push
(){

172 
__asm__
 
	`__vﬁ©ûe__
("pushfl\n\t"

175 :"Ù"(
__f°ack
.
ba£
[++__f°ack.
e•
])

177 if(
__f°ack
.
e•
 =
EFLAGS_STACK_LEN
Ë
	`•ö
("eflags stack overflow !");

178 
	}
}

180 
ölöe
 
	$°i_push
(){

181 
e•
 = 
__f°ack
.esp;

182 
__asm__
 
	`__vﬁ©ûe__
("pushfl\n\t"

185 :"Ù"(
__f°ack
.
ba£
[++
e•
])

187 if(
e•
 =
EFLAGS_STACK_LEN
Ë
	`•ö
("eflags stack overflow !");

188 
__f°ack
.
e•
 =Ésp;

189 
	}
}

191 
ölöe
 
	$Êagi_p›
(){

192 if(
__f°ack
.
e•
 =-1Ë
	`•ö
("eflags stack bottom boundary!");

193 
__asm__
 
	`__vﬁ©ûe__
("pushfl\n\t"

198 :"r"(
__f°ack
.
ba£
[__f°ack.
e•
--] & (1<<9) )

201 
	}
}

202 
öô_pcb
(
pcb
 *
baby
,
u32
 
addr
,
¥io
,
time_¶i˚
,*
p_«me
);

203 
fúe_thªad
(
pcb
 *
p
);

206 
Æloc_pid
(
pid
);

208 
ölöe


209 
fûes_°ru˘
 *
	$gë_fûes
(
fûes_°ru˘
 *
fûes
){

210 
fûes
->
cou¡
++;

211  
fûes
;

212 
	}
}

213 
put_fûes
(
fûes_°ru˘
 *
fûes
);

216 
put_fs
(
fs_°ru˘
 *
fs
);

217 
ölöe


218 
fs_°ru˘
 *
	$gë_fs
(
fs_°ru˘
 *
fs
){

219 
fs
->
cou¡
++;

220  
fs
;

221 
	}
}

223 
åy_ªÀa£_k∫l_ªsour˚
(
pcb
 *
p
);

224 
åy_ªÀa£_u£r_•a˚
(
mm
 *mm);

225 
__ªÀa£_mm
(
mm
 *mm);

234 
ölöe
 

235 
	$put_mm
(
mm
 *
th©
){

236 
th©
->
u£rs
--;

237 if(
th©
->
u£rs
 == 0){

238 
	`__ªÀa£_mm
(
th©
);

240 
	}
}

242 
ölöe
 
mm
 *

243 
	$gë_mm
(
mm
 *
th©
){

244 
th©
->
u£rs
++;

245  
th©
;

246 
	}
}

248 
¶ab_hód
 *
fs_°ru˘_ˇche
, *
fûes_°ru˘_ˇche
;

	@include/old/ramdisk.h

1 #i‚de‡
RAMDISK_H


2 
	#RAMDISK_H


	)

3 
	~"asm_œbÀ.h
"

	@include/old/schedule.h

1 #i‚de‡
SCHEDULE_H


2 
	#SCHEDULE_H


	)

3 
	~<vÆTy≥.h
>

4 
	~<li°.h
>

5 
ticks
;

9 
pcb
 *
	gli°_a˘ive
;

14 
pcb
 *
	gli°_expúe
;

16 
¶ìp_a˘ive
(
pcb
 *
p
);

17 
scheduÀ
();

18 
wake_up
(
li°_hód
 *
roŸ
);

19 
¶ìp_⁄
(
li°_hód
 *
roŸ
);

21 
	#__SAVE
()\

22 
__asm__
 
	`__vﬁ©ûe__
(\

36 :"=m"(
cuºít
->
¥egs
)\

38 )

	)

40 
kp_¶ìp
(
u32
 
msg_ty≥
,u32 
msg_böd
);

	@include/old/struinfo.h

1 #i‚de‡
STRUINFO_H


2 
	#STRUINFO_H


	)

3 
w‹k⁄
(*
p_°ru
,**
p_«mes
,*
p_widths
,*
p_Àns
,
membîs
);

4 
°ruöfo
();

6 
	#WORKON
(
INSTANCE
,
STRU_NAME
Ë
	`w‹k⁄
((*)INSTANCE,
membî«me_
##STRU_NAME,
membîwidth_
##STRU_NAME,
membîÀn_
##STRU_NAME,(membî«me_##STRU_NAME)/4)

	)

	@include/old/time.h

1 #i‚de‡
TIME_H


2 
	#TIME_H


	)

4 
öô_time
();

	@include/old/tty.h

1 #i‚de‡
TTY_H


2 
	#TTY_H


	)

3 
	~<vÆTy≥.h
>

4 
	gglobÆ_ãxt_µg
;

5 
ª£t_cmd_asciis
();

6 
gëch¨
();

7 
∑r£_cmd_asciis
();

8 
wrôe_cmd_asciis
(
ascii
);

9 
show_dú
(*
buf
);

	@include/old/utils.h

1 #i‚de‡
UTILS_H


2 
	#UTILS_H


	)

3 
	~<ku_utûs.h
>

4 
	~<löux/myli°.h
>

5 
	~<vÆTy≥.h
>

6 
	~<löux/as£π.h
>

7 
	~<löux/byã‹dî/gíîic.h
>

8 
	~<löux/°rög.h
>

9 
	~<löux/kô.h
>

11 
ölöe
 
	$°r_hash
(c⁄° *
°r
, 
Àn
){

12 
£ed
 = 131;

13 
hash
 = 0;

14 
i
 = 0; i < 
Àn
; i++Ë
hash
 = hash * 
£ed
 + 
°r
[i];

16  
hash
;

17 
	}
}

19 
ölöe
 
	$__BSR
(
x
){

20 
highe°
;

21 
__asm__
 
	`__vﬁ©ûe__
("bsr %1, %0"

22 :"Ù"(
highe°
)

23 :"r"(
x
)

25  
highe°
;

26 
	}
}

28 
	~<mm.h
>

32 
	#ªtu∫_ßy
(
msg
Ëdo{
	`›rötf
("%s",msg);;} 0)

	)

33 
	#ªtu∫x_ßy
(
x
,
msg
Ëdo{
	`›rötf
("%s",msg); x;} 0)

	)

35 
dëe˘_˝u
();

36 
di•AX
();

37 
di•EAX
();

38 
di•Så
(c⁄°*c⁄° 
±
,
ahMod
);

39 
di•I¡
();

40 
di•Sån
(c⁄°*c⁄° 
±
,
ahMod
);

41 
ö_byã
(
p‹t
);

42 
u32
 
ö_dw
(
p‹t
);

43 
out_byã
(
p‹t
,
vÆue
);

44 
out_dw
(
p‹t
,
u32
 
vÆue
);

45 
rög
,
∑th_rög0
,
õ¡î
,
°ack_posôi⁄
,
¸ack_eù
;

46 
p‹t_ªad
(
p‹t
,*
buf
,
byã
);

47 
p‹t_wrôe
(
p‹t
,*
buf
,
byã
);

48 
£nd_hd_eoi
();

49 
•ö
(*
msg
);

63 
bôsˇn111
(
u32
 
addr
, 
num_111
, 
sc›e
);

69 
bô£t
(
u32
 
addr
,
bô_off
);

71 
bô˛ór
(
u32
 
addr
, 
bô_off
);

77 
bôs£t
(
u32
 
addr
, 
bô_off
, 
num
);

79 
bôs˛ór
(
u32
 
addr
, 
bô_off
, 
num
);

84 
boﬁ
 
bôs£t_l⁄g
(
u32
 
addr
, 
bô_off
, 
num
);

85 
boﬁ
 
bôs˛ór_l⁄g
(
u32
 
addr
, 
bô_off
, 
num
);

87 
bô1_cou¡
(*
addr
,
byãs
);

88 
mem˝y
(*
de°
,*
§c
,
byãs
);

90 
	#DSI
(
°r
,
i
)\

91 
	`di•Så
(
°r
,0x400);\

92 
	`di•I¡
(
i
);

	)

94 
boﬁón
 
°rm©ch
(*
£g
,*
whﬁe
);

95 
öfo_hóp
();

113 
	#MEMBER_OFFSET
(
°ru_ty≥
, 
membî_«me
) \

114 –()&(((
°ru_ty≥
 *)0)->
membî_«me
Ë)

	)

116 
memã°
(*, 
Àn
);

117 
udñay
(
u£cs
);

120 
ölöe
 
	$__RDTSC_U
(){

121 
tsc
;

122 
__asm__
 
	`__vﬁ©ûe__
("rdtsc\n\t"

126 :"=d"(
tsc
));

127  
tsc
;

128 
	}
}

130 
ölöe
 
	$__RDTSC
(){

131 
tsc
;

132 
__asm__
 
	`__vﬁ©ûe__
("rdtsc\n\t"

136 :"=d"(
tsc
));

137  
tsc
;

138 
	}
}

140 
ölöe
 
	$b¨rõr
(){

141 
__asm__
 
	`__vﬁ©ûe__
("":::"memory");

142 
	}
}

144 
ölöe
 
	$mdñay
(
ms
){

145 
cuº
 = 
	`__RDTSC
();

146 
˛ock
 = 
cuº
 + 
ms
;

148 
	`b¨rõr
();

149 if(
	`__RDTSC
(Ë>
˛ock
) ;

151 
	}
}

153 
ölöe
 
	$˛i
(){

154 
__asm__
 
	`__vﬁ©ûe__
("cli");

155 
	}
}

157 
ölöe
 
	$°i
(){

158 
__asm__
 
	`__vﬁ©ûe__
("sti");

159 
	}
}

165 
ölöe
 
boﬁ
 
	$˛i_ex
(){

166 
IF
;

167 
__asm__
 
	`__vﬁ©ûe__
("pushf\n\t"

171 :"Ù"(
IF
)

173  
IF
;

174 
	}
}

176 
ölöe
 
	$gë_eÊags
(){

177 
eÊags
;

178 
__asm__
 
	`__vﬁ©ûe__
("pushfl\n\t"

180 :"Ù"(
eÊags
)

182  
eÊags
;

183 
	}
}

185 
ölöe
 
boﬁ
 
	$˛i_Æªady
(){

186 
eÊags
 = 
	`gë_eÊags
();

187  !(
eÊags
 & (1 << 9)) ;

188 
	}
}

190 
ölöe
 
boﬁ
 
	$°i_Æªady
(){

191  !
	`˛i_Æªady
();

192 
	}
}

193 
	#MAKE_IP
(
a
, 
b
, 
c
, 
d
Ë((◊)<<24Ë+ ((b)<<16Ë+ ((c)<<8Ë+ d)

	)

194 *
MAKE_IP_STR
(
u32
 
ù
);

195 
›rötf
(*
f‹m©
,...);

196 
ölöe
 
	$¥öt_mac
(
u8
 * 
mac
){

197 
	`›rötf
(" %x %x %x %x %x %x ", 
mac
[0], mac[1], mac[2], mac[3], mac[4], mac[5]);

198 
	}
}

199 
ölöe
 
	$¥öt_ù
(
u32
 
ù
){

200 
	`›rötf
(" %u.%u.%u.%u ", 
ù
>>24&0xff, ip>>16&0xff, ip>>8&0xff, ip&0xff);

201 
	}
}

203 
	#ARR_CELLS
(
¨øy
, 
°ru_t
Ë–◊ºayË/ (°ru_t))

	)

204 
ªad_imr_of8259
();

218 
u16
 
¸c16_compuã_be
(*
¨ó
, 
Àn
);

227 
ölöe
 
u16
 
	$¸c16_wrôe_be
(*
¨ó
, 
Àn
, 
u16
 *
chksum
){

228 *
chksum
 = 0;

229 
u16
 
x
 = 
	`¸c16_compuã_be
(
¨ó
, 
Àn
);

230 *
chksum
 = 
	`ht⁄s
(~
x
);

231  
x
;

232 
	}
}

234 
__Àss
(*
buf
, 
Àn
);

236 
memcmp
(*
s1
, *
s2
, 
Àn
);

237 
	s__óx
 { 
u8
 
	mÆ
; u8 
	mah
; u8 
	mAL
; u8 
	mAH
;};

238 * 
mk_ù°r
(
u32
 
ù
);

240 
__bs0s
(*);

	@include/old/valType.h

2 #i‚de‡
VALTYPE_H


3 
	#VALTYPE_H


	)

5 
	#boﬁ
 
_Boﬁ


	)

6 
	#boﬁón
 
_Boﬁ


	)

7 
	#åue
 1

	)

8 
	#Ál£
 0

	)

9 
	#__DEBUG


	)

11 #i‚de‡
NULL


12 
	#NULL
 0

	)

15 
	tul⁄g
;

16 
	tu64
;

17 
	tu8
;

18 
	tu16
;

19 
	tu32
;

20 sig√d 
	ts8
;

21 sig√d 
	ts16
;

22 sig√d 
	ts32
;

24 
	tsize_t
;

27 
	tbyã
;

28 
	tuöt64_t
;

29 
	töt64_t
;

33 
	t__À32
;

34 
	t__u32
;

35 
	t__À16
;

36 
	t__u16
;

37 
	t__u8
;

38 
	tElf32_W‹d
;

39 
	tElf32_Off
;

40 
	tElf32_Addr
;

41 
	tElf32_HÆf
;

42 
	sdes¸ùt‹r
{

43 
u16
 
	mlimô_01
;

44 
u16
 
	mba£_01
;

45 
u8
 
	mba£_2
;

46 
u8
 
	m©å1
;

47 
u8
 
	mlimô_©å
;

48 
u8
 
	mba£_3
;

50 }
	tDESCRIPTOR
;

54 vﬁ©ûê
	mcou¡î
;

55 }
	t©omic_t
;

59 
	#__1K
 1024

	)

60 
	#__4K
 0x1000

	)

61 
	#__8K
 0x2000

	)

62 
	#__1M
 0x100000

	)

63 
	#__4M
 0x400000

	)

64 
	#__1G
 0x40000000

	)

65 
	#__3G
 0xc0000000

	)

	@include/old/video_drv.h

1 #i‚de‡
VIDEO_DRV_H


2 
	#VIDEO_DRV_H


	)

5 
	#CRTC_ADDR_REG
 0x3D4

	)

6 
	#CRTC_DATA_REG
 0x3D5

	)

7 
	#START_ADDR_H
 0xC

	)

8 
	#START_ADDR_L
 0xD

	)

9 
	#CURSOR_H
 0xE

	)

10 
	#CURSOR_L
 0xF

	)

11 
	#V_MEM_BASE
 0xB8000

	)

12 
	#V_MEM_SIZE
 0x8000

	)

14 
£t_curs‹
(
pos
);

15 
£t_°¨t
(
pos
);

16 
gë_°¨t
();

	@irq.c

1 
	~<löux/î∫o.h
>

2 
	~<úq.h
>

3 
	~<¥oc.h
>

4 
	~<löux/bh.h
>

5 
	~<i8259.h
>

6 
	~<löux/¥ötf.h
>

7 
u32
 
	gcou¡_úq_íãr
, 
	gcou¡_úq_out
;

8 
h™dÀ_IRQ_evít
(
úq
, 
±_ªgs
 *);

9 
£tup_úq
(
úq
, 
úqa˘i⁄
 *
√w
);

15 
ªque°_úq
(
úq
, (*
h™dÀr
)(, *, 
±_ªgs
 *), 
Êags
, *
dev
){

16 if(
úq
 < 0 || irq >=
NR_IRQS
 || !
h™dÀr
Ë -
EINVAL
;

18 
úqa˘i⁄
 *
a˘i⁄
 = 
	`kmÆloc
((irqaction));

19 
a˘i⁄
->
func
 = 
h™dÀr
;

20 
a˘i⁄
->
Êags
 = flags;

21 
a˘i⁄
->
dev
 = dev;

22 
a˘i⁄
->
√xt
 = 0;

24 
ªtvÆ
 = 
	`£tup_úq
(
úq
, 
a˘i⁄
);

25 if(
ªtvÆ
Ë
	`k‰ì
(
a˘i⁄
);

26  
ªtvÆ
;

27 
	}
}

29 
	$£tup_úq
(
úq
, 
úqa˘i⁄
 *
√w
){

35 
úqa˘i⁄
 *
cuº
 = 
úq_desc
[
úq
].
a˘i⁄
;

36 if(!
cuº
Ë
úq_desc
[
úq
].
a˘i⁄
 = 
√w
;

38 
cuº
->
√xt
) curr = curr->next;

39 
cuº
->
√xt
 = 
√w
;

42 
	}
}

47 
	$do_IRQ
(
°ack_‰ame
 
ªgs
){

48 
cou¡_úq_íãr
++;

49 
îr_code
 = 
ªgs
.err_code + 256;

50 
úq
 = 
îr_code
 - 0x20;

52 
úq_desc_t
 *
desc
 = 
úq_desc
 + 
úq
;

53 
°©us
 = 
desc
->status;

55 
u16
 
i§
 = 
	`pic_gë_i§
();

56 
u16
 
imr
 = 
	`ªad_imr_of8259
();

57 
úq
){

59 
	`as£π
(!(
i§
 >> 15));

60 
	`as£π
(
imr
 >> 15);

61 
	`out_byã
(0x20, 0x20);

63 
	`as£π
(!(
i§
 & 0x80));

64 
	`as£π
(
imr
 & 0x80);

68 
desc
->
hw_h™dÀr
->
	`ack
(
úq
);

70 if(
úq
 == 1){

72 
key_code
=
	`ö_byã
(0x60);

73 
	`›rötf
("d⁄'àu£ keybﬂrd..á bug o¿úq_˙t_ö mayáÃódy h≠≥nd, *%x* ", 
key_code
);

74 
__Àss_go
;

75 if(
key_code
 <0x34Ë
__Àss_go
 = 
åue
;

80 if(!
desc
->
a˘i⁄
 || 
°©us
 & (
IRQ_INPROCESS
 | 
IRQ_DISABLED
)){

81 
desc
->
°©us
 |
IRQ_PENDING
;

84 
out
;

88 
desc
->
°©us
 |
IRQ_INPROCESS
;

92 
	`h™dÀ_IRQ_evít
(
úq
, &
ªgs
);

95 if(!(
desc
->
°©us
 & 
IRQ_PENDING
)) ;

96 
desc
->
°©us
 &~
IRQ_PENDING
;

98 
out
:

101 
desc
->
°©us
 &~
IRQ_INPROCESS
;

102 
desc
->
hw_h™dÀr
->
	`íd
(
úq
);

105 if(
bh_Êags
 & 
BH_FLAG_DISABLE
){

106 
bh_cﬁlisi⁄_cou¡
 = 0;

107 
bh_cﬁlisi⁄_cou¡
++;

108 
tôÀ
[] = {'B', 'H', 0xAE, 0};

109 
buf
[16];

110 
	`•rötf
(
buf
, " %u", 
bh_cﬁlisi⁄_cou¡
);

111 
	`wrôe_b¨
(1, 0, 
tôÀ
, 
buf
);

114 
	`do_bh
();

116 
cou¡_úq_out
++;

118 
	}
}

120 
boﬁ
 
	$ö_öãºu±
(){

121  
cou¡_úq_íãr
 !
cou¡_úq_out
;

122 
	}
}

126 
	$h™dÀ_IRQ_evít
(
úq
, 
±_ªgs
 *
¥egs
){

127 
°©us
 = 0;

128 
úqa˘i⁄
 *
a˘i⁄
 = 
úq_desc
[
úq
].action;

130 
a˘i⁄
){

132 if(!(
a˘i⁄
->
Êags
 & 
SA_INTERRUPT
)){

133 
	`•ö
("stiÇow");

134 
__asm__
 
	`__vﬁ©ûe__
 ("sti");

136 
a˘i⁄
->
	`func
(
úq
,á˘i⁄->
dev
, 
¥egs
);

137 
__asm__
 
	`__vﬁ©ûe__
 ("cli");

139 
a˘i⁄
 =á˘i⁄->
√xt
;

142  
°©us
;

143 
	}
}

	@kernel.asm

1 ; {
symbﬁ


2 
globÆ
 
NEED_RESCHED_OFFSET


4 
REGS_FS_OFFSET
 
equ
 (10*4)

5 
REGS_ERR_CODE_OFFSET
 
equ
 (11*4)

6 
REGS_CS_OFFSET
 
equ
 (13*4)

7 
NEED_RESCHED_OFFSET
 
equ
 (0)

8 
SIGPENDING_OFFSET
 
equ
 (2*4)

11 
LATCH
 
	gequ
 1193180/100

12 
do_IRQ


13 
›rötf


14 
•ö


16 
globÆ
 
ªt_‰om_sys_ˇŒ


17 
globÆ
 
∑ge_Áu…


18 
globÆ
 
ª°‹e_Æl


19 
globÆ
 
£À˘‹_room_∂aö


20 
globÆ
 
£À˘‹_video


21 
globÆ
 
£À˘‹_∂aö_c3
,
£À˘‹_∂aö_d3
,
£À˘‹_∂aö_c1
,
£À˘‹_∂aö_d1
,
£À˘‹_∂aö_c0
,
£À˘‹_∂aö_d0
;

22 
globÆ
 
£c_d©a


23 
globÆ
 
tss


24 
globÆ
 
i20h


25 
globÆ
 
p3


26 
globÆ
 
outoÂroc


27 
globÆ
 
ba£_tss


28 
func_èbÀ


29 
wake_hs
,
do_∑ge_Áu…
, 
do_bªakpoöt_Áu…
, 
do_gíîÆ_¥Ÿe˘_Áu…


30 
no_ªíãr


31 
dump_sys


32 
key_h™dÀr


33 
öô8253


34 
kî√l_c


35 
öô8259A


36 
do_timî
,
scheduÀ
,
ticks


38 ;
edi
 
	gequ
 7e00
h


39 
ba£_kî√lSèck
 
	gequ
 0ff„
	gh
 ; 
	gkî√l
-
°ack
 
ønge
 
	g‰om
 0ff„
h
 
	gto
 7f00h,
	gabout
 32
kb


41 
ba£_ãxt
 
equ
 
	gba£_kî√l_ª£t
+0xc0000000

42 
ba£_tss
 
equ
 
	gba£_ãxt
 + (
	gtss
 -
	g_°¨t
)

43 ;}
íd
 
	gsymbﬁ


45 %
	gö˛ude
 "include/old/pm.inc"

46 %
	gö˛ude
 "include/old/utils.inc"

47 %
	gö˛ude
 "bootinfo.asm"

49 
globÆ
 
	g_°¨t


50 [
£˘i⁄
 .
ãxt
]

51 
	g_°¨t
:

52 
mov
 
e•
,0xc0300000 ;‰ΩøÁî®3
	gM
Â§ÑÁöÑÂú∞ÂùÄ‰Ωú‰∏∫Â†ÜÊ†à,‰∏ç‰ºöÁ†¥Âùè
buddy
 
	gsy°em
Âêó

53 
jmp
 
	g_ªÆly°¨t


54 ;
°‹e
 
some
 
d©a


55 
	gtss
:

56 
TSS1
 
£À˘‹_∂aö_d0
,
	grög0_smÆl°ack_bŸtom
, 0, 0, 0, 0

57 
Àn_tss
 
equ
 
	g$
 - 
tss


59 
	g_ªÆly°¨t
:

60 
lgdt
 [
gdtPå
] ; 
	ggdt
,
£À˘‹
 
ds
 
¥ï¨ed
 
durög
 
	gboŸ
.
bö


61 
jmp
 
	g£À˘‹_∂aö_c0
:
√wcs
 ;
upd©e
 
cs


63 
	g√wcs
:
n›


64 ;{
öô


65 
	gpush
 11931 ;1193180/100

66 
ˇŒ
 
	göô8253
 ; 
	göô
 8253

69 ;
	gIRQ0


70 ; 
	gTime


72 ;
	gIRQ1


73 ; 
	gKeyBﬂrd


75 ;
	gIRQ2


76 ; 
Redúe˘
 
	gIRQ9


77 ; ‰∏é
	gIRQ9
Áõ∏Êé•Ôºå
	gMPU
-401 
	gMDI
‰ΩøÁî®ËØ•
	gIRQ


78 ;
	gIRQ3


79 ; 
	gCOM2


81 ;
	gIRQ4


82 ; 
	gCOM1


84 ;
	gIRQ5


85 ; 
	gLPT2


86 ; Âª∫ËÆÆÂ£∞Âç°‰ΩøÁî®ËØ•
	gIRQ


87 ;
	gIRQ6


88 ; 
	gFDD


90 ;
	gIRQ7


91 ; 
	gLPT1


93 ;
	gIRQ8


94 ; 
CMOS
 
	gAÀπ


96 ;
	gIRQ9


97 ; 
Redúe˘
 
	gIRQ2


98 ; ‰∏é
	gIRQ2
Áõ∏Êé•ÔºõÂèØËÆæÂÆöÁªôÂÖ∂ÂÆÉÁ°¨‰ª∂‰ΩøÁî®

99 ;
	gIRQ10


100 ; 
	gRevî£d


101 ; Âª∫ËÆÆ‰øùÁïôÁªôÁΩëÂç°‰ΩøÁî®ËØ•
	gIRQ


102 ;
	gIRQ11


103 ; 
	gRevî£d


104 ; Âª∫ËÆÆ‰øùÁïôÁªô
	gAGP
ÊòæÂç°‰ΩøÁî®

105 ;
	gIRQ12


106 ; 
	gPS
/2
	gMou£


107 ; Êé•
	gPS
/2Èº†Ê†áÔºåËã•Êó†‰πüÂèØËÆæÂÆöÁªôÂÖ∂‰ªñÁ°¨‰ª∂‰ΩøÁî®

108 ;
	gIRQ13


109 ; 
	gFPU


110 ; ÂçèÂ§ÑÁêÜÂô®Áî®Ôºå‰æãÂ¶Ç
	gFPU
ÔºàÊµÆÁÇπËøêÁÆóÂô®Ôºâ

111 ;
	gIRQ14


112 ; 
Prim¨y
 
	gIDE


113 ; 
	gIDE0
‰º†ËæìÊéßÂà∂Áî®

114 ;
	gIRQ15


115 ; 
Sec⁄d¨y
 
	gIde


116 ; 
	gIDE1
‰º†ËæìÊéßÂà∂Áî®

118 
add
 
	ge•
,4

119 ;
	gpush
 11111000b

120 
	gpush
 11011000b

121 
ˇŒ
 
	göô8259A
 ; 
	göô
 8259A

122 
add
 
	ge•
,4

123 ;
öô
 
	g£gmít
-
ªgs


124 
mov
 
	gax
, 
£À˘‹_∂aö_d0


125 
mov
 
	gfs
, 
ax


126 
mov
 
	gss
, 
ax


127 
mov
 
	gds
, 
	gax


128 ;
mov
 
	ge•
, 
	gba£_kî√lSèck
 ; 
the
 
°ack
 
°¨t
 
	g©
 7f00
h
 
ERR
 
be
 
ˇª
 °ack 
wûl
 
boûed


129 
mov
 
	gax
, 
£À˘‹_video


130 
mov
 
	ggs
, 
ax


131 
mov
 
	ges
, 
	gax


132 ;
	gíd


134 ;
£t
 
idt


135 
˛i


136 
	glidt
 [
idtPå
]

137 
mov
 
	gax
,
£À˘‹_tss


138 
…r
 
	gax


139 ;
	gd⁄e


142 
jmp
 
	gkî√l_c
;

144 ;{
ex˚±i⁄
 
h™dÀr


145 
	gex˚±i⁄_h™dÀr
:

146 
divide_îr‹
:

147 
ßve


148 
jmp
 
ex˚±i⁄_h™dÀr_°ï1


149 
Àn_divide_îr‹
 
equ
 
$
 - 
divide_îr‹


151 
sögÀ_°ï
:

152 
push
 0

153 
push
 
do_bªakpoöt_Áu…


154 
jmp
 
îr‹_code


155 
Àn_sögÀ_°ï
 
equ
 
$
 - 
sögÀ_°ï


157 
nmi
:

158 
push
 0xffffffff

159 
push
 2

160 
jmp
 
ex˚±i⁄_h™dÀr_°ï1


161 
Àn_nmi
 
equ
 
$
 - 
nmi


163 
bªakPoöt
:

164 
push
 0

165 
push
 
do_bªakpoöt_Áu…


166 
jmp
 
îr‹_code


168 
Àn_bªakPoöt
 
equ
 
$
 - 
bªakPoöt


170 
ovîÊow
:

171 
push
 0xffffffff

172 
push
 4

173 
jmp
 
ex˚±i⁄_h™dÀr_°ï1


174 
Àn_ovîÊow
 
equ
 
$
 - 
ovîÊow


176 
bounds_check
:

177 
push
 0xffffffff

178 
push
 5

179 
jmp
 
ex˚±i⁄_h™dÀr_°ï1


181 
Àn_bounds_check
 
equ
 
$
 - 
bounds_check


183 
övÆ_›code
:

184 
push
 0xffffffff

185 
push
 6

186 
jmp
 
ex˚±i⁄_h™dÀr_°ï1


187 
Àn_övÆ_›code
 
equ
 
$
 - 
övÆ_›code


189 
c›r_nŸ_avüœbÀ
:

190 
push
 0xffffffff

191 
push
 7

192 
jmp
 
ex˚±i⁄_h™dÀr_°ï1


193 
Àn_c›r_nŸ_avüœbÀ
 
equ
 
$
 - 
c›r_nŸ_avüœbÀ


195 
doubÀ_Áu…
:

196 
push
 8

197 
jmp
 
ex˚±i⁄_h™dÀr_°ï1


198 
Àn_doubÀ_Áu…
 
equ
 
$
 - 
doubÀ_Áu…


200 
c›r_£g_ovîrun
:

201 
push
 0xffffffff

202 
push
 9

203 
jmp
 
ex˚±i⁄_h™dÀr_°ï1


204 
Àn_c›r_£g_ovîrun
 
equ
 
$
 - 
c›r_£g_ovîrun


206 
övÆ_tss
:

207 
push
 10

208 
jmp
 
ex˚±i⁄_h™dÀr_°ï1


209 
Àn_övÆ_tss
 
equ
 
$
 - 
övÆ_tss


211 
£gmít_nŸ_¥e£¡
:

212 
push
 11

213 
jmp
 
ex˚±i⁄_h™dÀr_°ï1


214 
Àn_£gmít_nŸ_¥e£¡
 
equ
 
$
 - 
£gmít_nŸ_¥e£¡


216 
°ack_îr‹
:

217 
push
 12

218 
jmp
 
ex˚±i⁄_h™dÀr_°ï1


219 
Àn_°ack_îr‹
 
equ
 
$
 - 
°ack_îr‹


222 ; 
A
 
GíîÆ
 
PrŸe˘i⁄
 
Fau…
 
may
 
occur
 
v¨ious
 
	gªas⁄s
. 
The
 
mo°
 
comm⁄
 
	g¨e
:

224 ; 
Segmít
 
îr‹
 (
¥ivûege
, 
ty≥
, 
limô
, 
ªad
/
wrôe
 
rights
).

225 ; 
Executög
 
a
 
¥ivûeged
 
ö°ru˘i⁄
 
	gCPL
 != 0.

226 ; 
Wrôög
 
	ga
 1 
ö
 
a
 
ª£rved
 
	gfõld
.

227 ; 
Re„ªncög
 
‹
 
ac˚ssög
 
a
 
	gnuŒ
-
	gdes¸ùt‹
.

229 ; 
Eº‹
 
	gcode
: 
The
 
GíîÆ
 
PrŸe˘i⁄
 
Fau…
 
£ts
 
™
 
îr‹
 
code
, 
which
 
is
 
the
 
£gmít
 
£À˘‹
 
ödex
 
whí
Åhê
ex˚±i⁄
 i†£gmíà
	gªœãd
. 
	gOthîwi£
, 0.

234 ; | 
	gRe£rved
 | 
	gIndex
 | 
	gTbl
 | 
	gE
 |

237 ; @
	gTbl


238 ; 2 
bôs
 
	gIDT
/
	gGDT
/
LDT
 
	gèbÀ


239 ; 0b00 
The
 
Sñe˘‹
 
Index
 
ª„ªn˚s
 
a
 
des¸ùt‹
 
ö
 
the
 
	gGDT
.

240 ; 0b01 
The
 
Sñe˘‹
 
Index
 
ª„ªn˚s
 
a
 
des¸ùt‹
 
ö
 
the
 
	gIDT
.

241 ; 0b10 
The
 
Sñe˘‹
 
Index
 
ª„ªn˚s
 
a
 
des¸ùt‹
 
ö
 
the
 
	gLDT
.

242 ; 0b11 
The
 
Sñe˘‹
 
Index
 
ª„ªn˚s
 
a
 
des¸ùt‹
 
ö
 
the
 
	gIDT
.

243 ; @
	gE


244 ; 1 
bô
 
	gExã∫Æ


245 ; 
Whí
 
	g£t
, 
the
 
ex˚±i⁄
 
‹igö©ed
 
exã∫Æly
 
to
Åhê
	g¥o˚ss‹
.

247 
	ggíîÆ_¥Ÿe˘i⁄
:

248 
push
 
do_gíîÆ_¥Ÿe˘_Áu…


249 
jmp
 
îr‹_code
;

250 
Àn_gíîÆ_¥Ÿe˘i⁄
 
equ
 
	g$
 - 
gíîÆ_¥Ÿe˘i⁄


252 
	gc›r_îr‹
:

253 
push
 0xffffffff

254 
push
 16

255 
jmp
 
ex˚±i⁄_h™dÀr_°ï1


256 
Àn_c›r_îr‹
 
equ
 
$
 - 
c›r_îr‹


258 
ex˚±i⁄_h™dÀr_°ï1
:

259 
jmp
 
$
 ; 
	gd⁄
'àw™àtÿh™dÀÅhe£Éx˚±i⁄Çow, ju° bÀs†they w⁄'
t
 
h≠≥n


260 
mov
 
	gax
, [
e•
+4]

261 
cmp
 
	gax
, 0ffff
h


262 
	gje
 .
	gno_îr‹_code


263 .
	gouçut_îr‹_code
:

264 
jmp
 .
˛ónSèck


265 .
no_îr‹_code
:

266 .
˛ónSèck
:

267 
add
 
e•
, 8 ;
have
 
checked
ádd 
	ge•
,8 
	gc‹ª˘


269 .
	gídOfh™dÀr
:

270 
mov
 
óx
, [
e•
+8]

271 
ˇŒ
 
dump_sys


272 
jmp
 
$


273 
	gúëd


275 ; 
timî
 
öãºu±


276 
	gi20h
:

277 
push
 0x20 - 256

278 
jmp
 
comm⁄_öãºu±


279 ; 
keybﬂrd
 
öãºu±


280 
	gi21h
:

281 
push
 0x21 - 256

282 
jmp
 
comm⁄_öãºu±


283 
i22h
:

284 
push
 0x22 - 256

285 
jmp
 
comm⁄_öãºu±


286 
i23h
:

287 
push
 0x23 - 256

288 
jmp
 
comm⁄_öãºu±


289 
i24h
:

290 
push
 0x24 - 256

291 
jmp
 
comm⁄_öãºu±


292 
i25h
:

293 
push
 0x25 - 256

294 
jmp
 
comm⁄_öãºu±


295 
i26h
:

296 
push
 0x26 - 256

297 
jmp
 
comm⁄_öãºu±


298 
i27h
:

299 
push
 0x27 - 256

300 
jmp
 
comm⁄_öãºu±


301 
i28h
:

302 
push
 0x28 - 256

303 
jmp
 
comm⁄_öãºu±


304 
i29h
:

305 
push
 0x29 - 256

306 
jmp
 
comm⁄_öãºu±


307 
i2ah
:

308 
push
 0x2a - 256

309 
jmp
 
comm⁄_öãºu±


310 
i2bh
:

311 
push
 0x2b - 256

312 
jmp
 
comm⁄_öãºu±


313 
i2ch
:

314 
push
 0x2c - 256

315 
jmp
 
comm⁄_öãºu±


316 
i2dh
:

317 
push
 0x2d - 256

318 
jmp
 
comm⁄_öãºu±


319 
i2eh
:

320 
push
 0x2e - 256

321 
jmp
 
comm⁄_öãºu±


322 
i2fh
:

323 
push
 0x2f - 256

324 
jmp
 
comm⁄_öãºu±


327 
i30h
:

328 
jmp
 
$


329 
ßve


330 
mov
 
e•
,[
kî√l_e•
]

332 ; 
∑ge
 
Áu…


333 
	g∑ge_Áu…
:

334 ;ÊúâÂá∫ÈîôÁ†ÅÁöÑÔºÅ‰∏çË¶Å
	gpush
‰∫Ü

335 
push
 
	gdo_∑ge_Áu…
 ;Ëøô‰∏™
	gpush
‰ΩçÁΩÆÊú¨ËØ•ÊòØ
	gfs
„ÄÇ

336 
jmp
 
îr‹_code


338 
Àn_∑ge_Áu…
 
equ
 
	g$
 - 
	g∑ge_Áu…


340 ; 
sy°em
 
ˇŒ


341 
	gi80
:

342 
push
 7 ;
no
 
îr_code


343 
	gSAVE_ALL
 ;ÂØÑÂ≠òÂô®ÂÖ•Ê†àÈ°∫Â∫èÁ∫¶ÂÆö‰∫Ü

344 ;
SET_PREG


345 
ˇŒ
 
	gdw‹d
 [
óx
*4+
func_èbÀ
]

346 
	gmov
 [
e•
 + 4 *6], 
óx


347 
jmp
 
ªt_‰om_sys_ˇŒ


348 
	gi81
: ;
™
 
	gI
-
g©e
 
kî√l
 
thªad
 
to
 
submô
 
theú
 
time
 
	g¶i˚
.

349 
OPRINTF
 
	g£c_d©a
.
•ö


350 
jmp
 
$


351 
	gpush
 0 ;
no
 
îr_code


352 
	gßve


353 ;
ßve
 
cuºít
 
e•
 
	gto
 'current->pregs'

354 
mov
 
	gesi
,
e•


355 
™d
 
	gesi
,0xffffe000

356 
	gmov
 [
esi
],
e•


358 
ˇŒ
 
	gscheduÀ


359 ;
Ár
 
away


360 
	gîr‹_code
:

361 
SAVE_ALL_EXCEPT_FS


363 
mov
 
edi
, 
fs


364 
xchg
 
	gedi
, [
e•
 + 
REGS_FS_OFFSET
]

365 
mov
 
	góx
, -1

366 
	gxchg
 [
e•
 + 
REGS_ERR_CODE_OFFSET
], 
	góx


369 ;ÊúçÂä°‰æãÁ®ãÈÉΩÈúÄË¶Å‰∏§‰∏™ÂèÇÊï∞Ôºå
	g¥eg
, 
îr_code


370 
mov
 
	gebx
, 
	ge•
 ;e•Áé∞Âú®Â∞±ÊòØ
	g¥eg
ÔºåÂÖàÂ≠òËµ∑Êù•

371 
push
 
	góx
 ;
îr‹
 
code


372 
push
 
	gebx
 ;* 
±_ªgs


373 
ˇŒ
 
	gedi
 ;ˇŒ 
	g‚


376 
add
 
	ge•
, 8

377 
jmp
 
	gªt_‰om_ex˚±i⁄
 ;
run
 
away


381 
	gcomm⁄_öãºu±
:

382 
SAVE_ALL


383 ;
SET_PREG


385 
push
 
ªt_‰om_öå


386 
jmp
 
do_IRQ


388 
	gªt_‰om_ex˚±i⁄
:

389 ;dÿ
possibÀ
 
so·
 
úq


390 
	gªt_‰om_öå
:

391 
GET_CURRENT
(
ebx
)

392 ; 
mov
 
	gecx
, [
ebx
] ;
gë
 
	g¥egs


393 ;Ëã•‰∏≠Êñ≠ÂâçÂ§ïÊòØÂÜÖÊ†∏ÊÄÅÔºåÁõ¥Êé•
ª°‹e


394 
mov
 
	góx
, [
e•
 + 
REGS_CS_OFFSET
]

395 
™d
 
	góx
, 0x3

396 
cmp
 
	góx
,0

397 
je
 
	gª°‹e_Æl
 ;ÂâçÂ§ïÊòØÂÜÖÊ†∏ÊÄÅ„ÄÇ ÂèëÁîüÂú®ÂÜÖÊ†∏ÊÄÅÁöÑ‰∏≠Êñ≠‰∏ç‰ºöÂºïËµ∑Ë∞ÉÂ∫¶„ÄÇ

398 
jmp
 
	gªt_wôh_ªscheduÀ
 ;‰∏≠Êñ≠ÂâçÂ§ïÊòØÁî®Êà∑ÊÄÅ

400 
	gªt_‰om_sys_ˇŒ
:

401 
	$GET_CURRENT
(
ebx
)

402 
n›
 ;dÿ
so·úp
 
ö
 
futuª
 
vîsi⁄


404 
ªt_wôh_ªscheduÀ
:

405 
	$GET_CURRENT
(
ebx
)

406 
cmp
 
dw‹d
 [
ebx
 + 
NEED_RESCHED_OFFSET
], 1 ;ÈúÄË¶Å
ªcheduÀ
Âêó

407 
je
 
ªscheduÀ


408 
cmp
 
dw‹d
 [
ebx
 + 
SIGPENDING_OFFSET
], 1 ;Êúâ‰ø°Âè∑ÈúÄË¶ÅÂ§ÑÁêÜÂêó

409 
je
 
sig«l_ªtu∫


411 
ª°‹e_Æl
:

412 ;
	`GET_CURRENT
(
ebx
)

413 ;
mov
 
e•
, [
ebx
] ;ÂØπ
∑∑ya
ÂÜÖÊ†∏ÔºåËøôÊòØÂøÖË¶ÅÁöÑÔºåÂõ†‰∏∫
°ack‰ame
ÁöÑ‰ΩçÁΩÆ‰∏çÂõ∫ÂÆö„ÄÇ

414 
RESTORE_ALL


417 
ªscheduÀ
:

418 
ˇŒ
 
scheduÀ


419 
jmp
 
ªt_‰om_sys_ˇŒ


421 
sig«l_ªtu∫
:

422 
jmp
 
ª°‹e_Æl


425 [
£˘i⁄
 .
d©a
]

426 
£c_d©a
:

427 .
°r1
: 
db
 'h',0

428 .
°r2
: 
db
 'hello world->wws',0

429 .
°r3
: 
dd
 0,1,2,3,4,5,6,7,8,9

430 .
•ö
: 
db
 'spin',0

431 .
keybﬂrd
: 
db
 'keyboard IRQ', 0

432 .
IDE0
: 
db
 'IDE IRQ 2f' , 0

433 
msg
:
db
 'spin',0

435 
outoÂroc
:

436 
dd
 1

437 
kî√l_e•
:

438 
dd
 0

439 
rög0_smÆl°ack_t›
:

440 .
îrcode
: 
dd
 0

441 
rög0_smÆl°ack_úëd
:

442 .
eù
 : 
dd
 0

443 .
cs
 : 
dd
 0

444 .
eÊags
: 
dd
 0

445 .
e•
 : 
dd
 0

446 .
ss
 : 
dd
 0

447 
rög0_smÆl°ack_bŸtom
:

449 ; 
√w
 
gdt


450 
gdt
:

451 .
desc_em±y
: 
Des¸ùt‹
 0,0,0

452 .
desc_∂aö_c0
 :
Des¸ùt‹
 0, 0fffff
h
, 
DA_32
 | 
DA_C
 | 
DA_LIMIT_4K


453 .
desc_∂aö_d0
 :
Des¸ùt‹
 0, 0fffff
h
, 
DA_DRW
 | 
DA_LIMIT_4K
+
DA_32


454 .
desc_∂aö_c1
 :
Des¸ùt‹
 0, 0fffff
h
, 
DA_32
 | 
DA_C
 | 
DA_LIMIT_4K
+
DA_DPL1


455 .
desc_∂aö_d1
 :
Des¸ùt‹
 0, 0fffff
h
, 
DA_32
 | 
DA_DRW
 | 
DA_LIMIT_4K
+
DA_DPL1


456 .
desc_∂aö_c3
 :
Des¸ùt‹
 0, 0fffff
h
, 
DA_C
 | 
DA_LIMIT_4K
 + 
DA_DPL3
 + 
DA_32


457 .
desc_∂aö_d3
 :
Des¸ùt‹
 0, 0fffff
h
, 
DA_DRW
 | 
DA_LIMIT_4K
 + 
DA_DPL3
 + 
DA_32


459 .
desc_video
 :
Des¸ùt‹
 0b8000
h
, 0ffffh, 
DA_DRW
 + 
DA_32
 + 
DA_DPL3


460 .
desc_pgTbl
 :
Des¸ùt‹
 
pgTblBa£
, 1023, 
DA_DRW
 | 
DA_LIMIT_4K
 + 
DA_32


461 .
desc_pgDú
 :
Des¸ùt‹
 
pgDúBa£
, 4095, 
DA_DRW
 + 
DA_32


462 .
desc_room_∂aö
:
Des¸ùt‹
 0, 0fffff
h
, 
DA_DRW
 | 
DA_LIMIT_4K
 + 
DA_32
 + 
DA_DPL3


463 .
desc_tss
 :
Des¸ùt‹
 
ba£_tss
, 
Àn_tss
 - 1, 
DA_386TSS


464 ; 
íd
 
of
 
√w
 
gdt


465 
Àn_gdt
 
equ
 
$
 - 
gdt


467 ;{
£À˘‹
 
°¨t


468 
£À˘‹_∂aö_c0
 
equ
 
gdt
.
desc_∂aö_c0
 - gdt

469 
£À˘‹_∂aö_d0
 
equ
 
gdt
.
desc_∂aö_d0
 - gdt

470 
£À˘‹_∂aö_c1
 
equ
 
gdt
.
desc_∂aö_c1
 - gdà+ 
SA_RPL1


471 
£À˘‹_∂aö_d1
 
equ
 
gdt
.
desc_∂aö_d1
 - gdà+ 
SA_RPL1


472 
£À˘‹_∂aö_c3
 
equ
 
gdt
.
desc_∂aö_c3
 - gdà+ 
SA_RPL3


473 
£À˘‹_∂aö_d3
 
equ
 
gdt
.
desc_∂aö_d3
 - gdà+ 
SA_RPL3


475 
£À˘‹_video
 
equ
 
gdt
.
desc_video
 - gdt

476 
£À˘‹_pgTbl
 
equ
 
gdt
.
desc_pgTbl
 - gdt

477 
£À˘‹_pgDú
 
equ
 
gdt
.
desc_pgDú
 - gdt

478 
£À˘‹_room_∂aö
 
equ
 
gdt
.
desc_room_∂aö
 - gdt

479 
£À˘‹_tss
 
equ
 
gdt
.
desc_tss
 - gdt

480 ;
	}

}£À˘‹
 
íd


482 
	ggdtPå
:

483 
dw
 
Àn_gdt
-1

484 
dd
 
gdt


485 
dw
 0 ; 
∑ddí
 
to
 
Æign
 
	g⁄
 8-
	gbô


487 ;{
g©e
 
idt


488 
	gidt
:

489 .
g©e_divide_îr‹
 : 
G©e
 
£À˘‹_∂aö_c0
, 
	gdivide_îr‹
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


490 .
	gg©e_sögÀ_°ï
 : 
G©e
 
£À˘‹_∂aö_c0
, 
	gsögÀ_°ï
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


491 .
	gg©e_nmi
 : 
G©e
 
£À˘‹_∂aö_c0
, 
	gnmi
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


492 .
	gg©e_bªakPoöt
 : 
G©e
 
£À˘‹_∂aö_c0
, 
	gbªakPoöt
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


493 .
	gg©e_ovîÊow
 : 
G©e
 
£À˘‹_∂aö_c0
, 
	govîÊow
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


494 .
	gg©e_bounds_check
 : 
G©e
 
£À˘‹_∂aö_c0
, 
	gbounds_check
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


495 .
	gg©e_övÆ_›code
 : 
G©e
 
£À˘‹_∂aö_c0
, 
	gövÆ_›code
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


496 .
	gg©e_c›r_nŸ_avüœbÀ
 : 
G©e
 
£À˘‹_∂aö_c0
, 
	gc›r_nŸ_avüœbÀ
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


497 .
	gg©e_doubÀ_Áu…
 : 
G©e
 
£À˘‹_∂aö_c0
, 
	gdoubÀ_Áu…
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


498 .
	gg©e_c›r_£g_ovîrun
 : 
G©e
 
£À˘‹_∂aö_c0
, 
	gc›r_£g_ovîrun
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


499 .
	gg©e_övÆ_tss
 : 
G©e
 
£À˘‹_∂aö_c0
, 
	gövÆ_tss
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


500 .
	gg©e_£gmít_nŸ_¥e£¡
: 
G©e
 
£À˘‹_∂aö_c0
, 
	g£gmít_nŸ_¥e£¡
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


501 .
	gg©e_°ack_îr‹
 : 
G©e
 
£À˘‹_∂aö_c0
, 
	g°ack_îr‹
 -
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


502 .
	gg©e_gíîÆ_¥Ÿe˘i⁄
 : 
G©e
 
£À˘‹_∂aö_c0
, 
	ggíîÆ_¥Ÿe˘i⁄
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


503 .
	gg©e_∑ge_Áu…
 : 
G©e
 
£À˘‹_∂aö_c0
, 
	g∑ge_Áu…
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


504 .
	gg©e_c›r_îr‹
 : 
G©e
 
£À˘‹_∂aö_c0
, 
	gc›r_îr‹
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


506 %
ªp
 (0x20-16Ë; 0-15,
	gtŸÆly
 16 
	gg©es
,0-0x19,tŸÆly 0x20 g©es,
u£
 (0x20-16)

507 
G©e
 
	g£À˘‹_∂aö_c0
, 
	gi80
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


508 %
	gídªp


510 .
	gg©e_i20h
:
G©e
 
£À˘‹_∂aö_c0
,
	gi20h
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e
 + 
	gDA_DPL3
 ;
ERR
 
	gd∂3


511 .
	gg©e_i21h
:
G©e
 
£À˘‹_∂aö_c0
,
	gi21h
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


512 .
	gg©e_i22h
:
G©e
 
£À˘‹_∂aö_c0
,
	gi22h
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


513 .
	gg©e_i23h
:
G©e
 
£À˘‹_∂aö_c0
,
	gi23h
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


514 .
	gg©e_i24h
:
G©e
 
£À˘‹_∂aö_c0
,
	gi24h
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


515 .
	gg©e_i25h
:
G©e
 
£À˘‹_∂aö_c0
,
	gi25h
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


516 .
	gg©e_i26h
:
G©e
 
£À˘‹_∂aö_c0
,
	gi26h
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


517 .
	gg©e_i27h
:
G©e
 
£À˘‹_∂aö_c0
,
	gi27h
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


518 .
	gg©e_i28h
:
G©e
 
£À˘‹_∂aö_c0
,
	gi28h
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


519 .
	gg©e_i29h
:
G©e
 
£À˘‹_∂aö_c0
,
	gi29h
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


520 .
	gg©e_i2ah
:
G©e
 
£À˘‹_∂aö_c0
,
	gi2ah
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


521 .
	gg©e_i2bh
:
G©e
 
£À˘‹_∂aö_c0
,
	gi2bh
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


522 .
	gg©e_i2ch
:
G©e
 
£À˘‹_∂aö_c0
,
	gi2ch
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


523 .
	gg©e_i2dh
:
G©e
 
£À˘‹_∂aö_c0
,
	gi2dh
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


524 .
	gg©e_i2eh
:
G©e
 
£À˘‹_∂aö_c0
,
	gi2eh
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


525 .
	gg©e_i2fh
:
G©e
 
£À˘‹_∂aö_c0
,
	gi2fh
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


527 .
	gg©e_i30h
:
G©e
 
£À˘‹_∂aö_c0
,
	gi30h
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


529 %
ªp
 (0x80-0x31Ë;0-0x2f,
	gtŸÆly
 0x30 
	gg©es
,0-0x79,tŸÆly 0x80 g©es,
u£
 (0x80-0x22)

530 
G©e
 
	g£À˘‹_∂aö_c0
, 
	gi80
 -
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e


531 %
	gídªp


533 .
	gg©e_i80h
:
G©e
 
£À˘‹_∂aö_c0
, 
	gi80
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e
 + 
	gDA_DPL3


534 .
	gg©e_i81h
:
G©e
 
£À˘‹_∂aö_c0
, 
	gi81
 - 
	g_°¨t
 + 
	gba£_ãxt
, 0, 
	gDA_386IG©e
 + 
DA_DPL0


536 
Àn_idt
 
equ
 
	g$
 - 
idt


538 
	gidtPå
:

539 
dw
 
Àn_idt
-1

540 
dd
 
idt


541 
dw
 0

542 ;
	gíd
}

	@kernel.c

1 
	~<¥oc.h
>

2 
	~<di•.h
>

3 
	~<utûs.h
>

4 
	~<mm.h
>

5 
	~<ku_utûs.h
>

6 
	~<löux/fs.h
>

7 
	~<löux/˚Œ.h
>

8 
	~<löux/mou¡.h
>

9 
	~<scheduÀ.h
>

10 
	~<asm_œbÀ.h
>

11 
	~<löux/blkdev.h
>

12 
	~<löux/ide.h
>

13 
	~<löux/¶ab.h
>

14 
	~<löux/pci.h
>

15 
	~<löux/skbuff.h
>

16 
	~<löux/timî.h
>

17 
	~<löux/böfmts.h
>

18 
	~<löux/¥ötf.h
>

19 
	~<time.h
>

20 
	~<i8259.h
>

21 
	~<löux/NR_sysˇŒ.h
>

22 
blkdev_œyî_öô
();

24 *
	gã°buf
;

25 *
	gbigbuf
;

26 
	gavoid_gcc_com∂aö
;

27 
p1
,
p2
,
£c_d©a
;

28 
ây
();

29 
ây1
();

30 
p3
();

31 
p4
();

32 
hs
();

33 
t
();

34 
fs_ext
();

35 
mm
();

36 
	g˝u_°rög
[16];

37 
èsk0_func
();

38 
func1
();

39 
func2
(*
¨g
);

40 
func0
();

41 
func_öô
(*
v
);

42 
u§_func
();

43 
¥obe
();

44 
pcb
 *
	gèsk0
;

45 
pcb
 *
	gèsk1
;

47 
öô_di•œy
();

48 
	~"../debug/debug.h
"

49 
	$kî√l_c
(){

53 
	`as£π
((
dr_˘æ
) == 4);

54 
dr_˘æ
 
dr7
{
vÆue
:0};

55 
__asm__
 
	`__vﬁ©ûe__
 (

57 :"Ù"(
dr7
.
vÆue
)

59 
dr7
.
LEN0
 = 
BRK_ADDR_ALIGN_4
;

60 
dr7
.
RWE0
 = 
RWE_WR
;

61 
dr7
.
G0
 = dr7.
G1
 = 1;

63 
__asm__
 
	`__vﬁ©ûe__
 (

66 :"r"(
dr7
.
vÆue
)

70 
	`öô_di•œy
();

71 
	`wrôe_b¨
(2, 2, "BH ", "see");

73 
cou¡
 = 0;

75 
cou¡
++;

76 
	`mdñay
(20);

77 
	`›rötf
("hñlÿw‹ld, %x ", 
cou¡
);

81 
	`¥obe
();

83 
	`mm_öô
();

84 
	`kmem_ˇche_öô
();

85 
	`mm_öô2
();

87 
	`√t_öô
();

88 
	`pci_öô
();

90 
	`¥oc_öô
();

91 
	`öô_ISA_úqs
();

92 
	`öô_time
();

93 
	`ide_öô
();

94 
	`öô_blkœyî
();

114 
bigbuf
 = (*)
	`__Æloc_∑ges
(
__GFP_DEFAULT
, 8+1);

115 
èsk0
=(
pcb
*)
	`__Æloc_∑ges
(
__GFP_DEFAULT
,1);

116 
	`öô_pcb
(
èsk0
,(
u32
)
èsk0_func
,10,0xffffffff,"idle");

127 
	`fúe_thªad
(
èsk0
);

128 
	`as£π
(0);

129 
	}
}

133 
sys_bad
(
±_ªgs
 
ªgs
);

134 
	$sys_bad
(
±_ªgs
 
ªgs
){

135 
	`›rötf
("unim∂emíãd sysˇŒ :NR = %u\n", 
ªgs
.
óx
);

136 
	`•ö
("");

137 
	}
}

143 
	$block_buf„r_°amp
(){

144 
i
 = 0; ;i++){

145 
buf„r_hód
 *
bh
 = 
	`mm≠_disk
(0x300, 
i
);

146 
buf„r_hód
 *
bh2
 = 
	`mm≠_disk
(0x300, 
i
);

147 
	`munm≠_disk
(
bh
);

148 
	`munm≠_disk
(
bh2
);

149 if(
i
 > 250){

153 
	}
}

156 
	$func_öô
(*
v
){

157 
èsk1
 = 
cuºít
;

158 
	`›rötf
("func initÑun..\n");

160 
func_èbÀ
[255];

161 
i
 = 0; i < 255; i++){

162 if(
func_èbÀ
[
i
] =0Ëfunc_èbÀ[i] = ()
sys_bad
;

165 
löux_böfmt
 
ñf_f‹m©
;

166 
	`ªgi°î_böfmt
(&
ñf_f‹m©
);

168 
	`ide_ªad_∑π©i⁄
(0x3, 0);

169 
	`öô_vfs
();

170 
	`ªgi°î_fûesy°em
("˚Œ", 
˚Œ_ªad_su≥r
);

171 
vfsmou¡
 *
m¡_°ru
 = 
	`do_mou¡
(0x301, "/", "cell");

172 if(!
m¡_°ru
Ë
	`•ö
("root device mount failed");

173 
fs_°ru˘
 *
fs_°ru
 = 
cuºít
->
fs
;

174 
fs_°ru
->
roŸ
 = fs_°ru->
pwd
 = 
m¡_°ru
->
smÆl_roŸ
;

175 
fs_°ru
->
roŸm¡
 = fs_°ru->
pwdm¡
 = 
m¡_°ru
;

178 
ö_dú
 
ödú
;

180 
m¡_°ru
 = 
	`do_mou¡
(0x305, "/home/mnt/", "cell");

182 
ã°buf
 = 
	`kmÆloc
(512 * 200);

183 
fd
 = 
	`sys_›í
("/home/mnt/5/_dimg.c", 2, 0);

185 
rbyãs
 = 
	`sys_ªad
(
fd
, 
ã°buf
, 100);

186 
avoid_gcc_com∂aö
 = 
rbyãs
 = ()&
ödú
;

188 
	`block_buf„r_°amp
();

191 
x
 = 0;

192 *
¨gv
[] = {"init", "arg1", 0};

193 
__asm__
 
	`__vﬁ©ûe__
(

195 :"˜"(
x
)

196 :"a"(
NR_execve
), "b"("/öô"), "c"(
¨gv
), "d"(0)

198 
	`›rötf
("execvêÁûed,Éº‹ codê%u ", 
x
);

203 1Ë
	`scheduÀ_timeout
(1000);

205 
	}
}

207 
	$èsk0_func
(){

208 
	`kî√l_thªad
(
func_öô
, (*)123, 0);

211 
	`__asm__
("hlt");

215 if(
li°_a˘ive
 || 
li°_expúe
Ë
	`scheduÀ
();

217 
	}
}

219 
	s˝uid_Ámûy
{

220 
u32
 
	m°ïpög_id
:4;

221 
u32
 
	mmodñ
:4;

222 
u32
 
	mÁmûy
:4;

223 
u32
 
	mty≥
:2;

224 
	mu32
 :2;

225 
u32
 
	mmodñ_exãnd
:4;

226 
u32
 
	mÁmûy_exãnd
:8;

227 
	mu32
 :4;

229 
	$¥obe
(){

230 
˝uid_Ámûy
 cpuid_family;

231 
˝uid_öput_max
=0;

232 
x≠ic_suµ‹t
=0;

233 
x2≠ic_suµ‹t
=0;

234 
mu…i_thªad_suµ‹t
=0;

235 
addªsßbÀ_c‹e_num
=0;

236 
addªsßbÀ_logic_num
=0;

237 
__asm__
 
	`__vﬁ©ûe__
(

263 :"=m"(
x≠ic_suµ‹t
),"=m"(
x2≠ic_suµ‹t
),"=m"(
mu…i_thªad_suµ‹t
),"=m"(
˝uid_öput_max
),"=m"(
addªsßbÀ_logic_num
),\

264 "=m"(
addªsßbÀ_c‹e_num
), "=m"(
˝uid_Ámûy
)

268 
	`›rötf
("˝u famûy:%x modñ:%x\n",
˝uid_Ámûy
.
Ámûy
+(˝uid_Ámûy.
Ámûy_exãnd
<<4), cpuid_Ámûy.
modñ
+(˝uid_Ámûy.
modñ_exãnd
<<4));

270 if(!
x≠ic_suµ‹t
 ) 
	`•ö
("xapicÇot support");

271 
	`›rötf
("≠ic/x≠ic_suµ‹àsuµ‹t:%s\n",
x≠ic_suµ‹t
 ? "yes" : "no");

272 
	`›rötf
("x2≠ic_suµ‹àsuµ‹t:%s\n",
x2≠ic_suµ‹t
 ? "yes" : "no");

273 
	`›rötf
("mu…i-thªadög suµ‹t:%s\n",
mu…i_thªad_suµ‹t
 ? "yes" : "no");

274 
	`›rötf
("˝uid i≈uàmax:%u\n",
˝uid_öput_max
);

275 
	`›rötf
("addªsßbÀ c‹es:%u\n",
addªsßbÀ_c‹e_num
);

276 
	`›rötf
("addªsßbÀÜogics:%u\n",
addªsßbÀ_logic_num
);

286 
	}
}

289 
	$sˇn_dúty_machöe_w‹ds
(
°¨t
, 
íd
){

290 
cou¡
 = 0;

291 
i
 = 
°¨t
; i < 
íd
; i += 4){

292 
x
 = *(*)(
i
+
PAGE_OFFSET
);

293 if–
x
 ){

294 
	`›rötf
("%u ", 
x
);

295 
cou¡
++;

298  
cou¡
;

299 
	}
}

	@kernel/bh.c

1 
	~<asm/bô.h
>

2 
	~<löux/bh.h
>

3 
	~<löux/¶ab.h
>

4 
	~<utûs.h
>

6 
	#NUM_BH
 32

	)

7 
	ga˘ive
;

8 
	gusög
;

9 
	sbh
{

10 
bh_‚
 
	mroutöe
;

11 *
	md©a
;

12 }
	gbh_°rus
[
NUM_BH
];

14 
	$bh_öô
(){

15 
	`as£π
(
a˘ive
 * 
usög
 == 0);

16 
	}
}

18 
	$do_bh
(){

19 
id
;

20 
shadow
;

22 
	`bh_dißbÀ
();

23 
	`˛i
();

25 
ª≥©
:

26 
shadow
 = 
a˘ive
;

27 
a˘ive
 = 0;

28 
	`°i
();

29  (
id
 = 
	`__bs
(
shadow
)) != -1 ){

30 
	`__bå
(&
shadow
, 
id
);

31 
bh
 *bh = 
bh_°rus
 + 
id
; 
	`as£π
–bh->
routöe
 );

32 
bh
->
	`routöe
–bh->
d©a
 );

34 
	`˛i
();

35 if(
a˘ive
){

37 
ª≥©
;

39 
	`bh_íabÀ
();

40 
	}
}

42 
	$Æloc_bh
(
bh_‚
 
routöe
, *
d©a
){

43 
	`›rötf
(">");

44 
id
 = 
	`__bs0s
(&
usög
);

45 if(
id
 =-1Ë
	`•ö
("bhállocation failed");

46 
	`as£π
(!
	`__bt
(&
a˘ive
, 
id
));

47 
bh_°rus
[
id
].
routöe
 =Ñoutine;

48 
bh_°rus
[
id
].
d©a
 = data;

49  
id
;

50 
	}
}

52 
	$‰ì_bh
(
id
){

53 if(
id
 < 0 || id > 
NUM_BH
Ë
	`•ö
(" illegal bh idÅo free");

54 if(!
	`__bt
(&
usög
, 
id
)Ë
	`•ö
("attemptÅo freeáÇon-using bh");

55 if(!
	`__bt
(&
a˘ive
, 
id
)Ë
	`•ö
("attemptÅo freeánáctive bh");

57 
	`__bå
(&
usög
, 
id
);

58 
	}
}

60 
	$m¨k_bh
(
id
){

61 if(
id
 < 0 || id > 
NUM_BH
Ë
	`•ö
(" illegal bh idÅo mark");

62 if(!
	`__bt
(&
usög
, 
id
)Ë
	`•ö
("attemptÅo markáÇon-using bh");

65 
	`__bts
(&
a˘ive
, 
id
);

66 
	}
}

	@kernel/exit.c

1 
	~<löux/ªsour˚.h
>

2 
	~<löux/myli°.h
>

3 
	~<löux/mm.h
>

4 
	~<¥oc.h
>

5 
	~<ﬁd/scheduÀ.h
>

6 
	~<löux/waô.h
>

8 
do_exô
(
code
);

10 
	$sys_exô
(
îrcode
){

11 
	`do_exô
–(
îrcode
 & 0xff) << 8);

13 
	}
}

18 
	$do_exô
(
code
){

19 
mm
 *mm;

21 
mm
 = 
cuºít
->mm;

22 
	`as£π
(
mm
);

24 
	`åy_ªÀa£_u£r_•a˚
(
mm
);

25 
	`åy_ªÀa£_k∫l_ªsour˚
(
cuºít
);

26 
	`LL_DEL
(
li°_a˘ive
, 
cuºít
);

27 
cuºít
->
exô_°©us
 = 
code
;

28 
cuºít
->
°©e
 = 
TASK_ZOMBIE
;

30 
	`scheduÀ
();

31 
	}
}

33 
	$ªÀa£_èsk_∑ge
(
pcb
 *pcb){

34 
	`__‰ì_∑ges
((*)
pcb
, 1);

36 
	}
}

39 
	$ad›t_his_chûdªn
(
pcb
 *
he
){

40 
pcb
 *
chûd
;

41 
	`li°_f‹_óch_ß„
(&
he
->
chûdªn
, 
chûd
, 
siblög
){

42 
chûd
->
m⁄ô‹
 = 
èsk1
;

43 
	`li°_add
(&
chûd
->
siblög
, &
èsk1
->
chûdªn
);

46 
	}
}

49 
	$pickup_‰om_√tw‹k
(
pcb
 *
èsk
){

50 
	`li°_dñ
(&
èsk
->
siblög
);

52 
	}
}

54 
	$sys_waô4
(
pid
, *
°©us
, 
›ti⁄s
, 
rußge
 *
ru
){

55 
pcb
 *
chûd
;

56 
ªt
 = -1;

58 
ª≥©
:

59 
	`li°_f‹_óch_ß„
(&
cuºít
->
chûdªn
, 
chûd
, 
siblög
){

60 if(
pid
 != -1 ){

61 if(
pid
 !
chûd
->pid) ;

67 if(
›ti⁄s
 =
WNOHANG
)

68 
ªt
 = 0;

71 if(
chûd
->
°©e
 !
TASK_ZOMBIE
) ;

73 
ªt
 = 
chûd
->
pid
;

74 if(
°©us
Ë*°©u†
chûd
->
exô_°©us
;

76 
	`put_mm
(
chûd
->
mm
);

77 
chûd
->
mm
 = 0;

78 
	`ad›t_his_chûdªn
(
chûd
);

79 
	`pickup_‰om_√tw‹k
(
chûd
);

80 
	`ªÀa£_èsk_∑ge
(
chûd
);

81 
out
;

83 if(
›ti⁄s
 =
WUNTRACED
Ë
ª≥©
;

84 if(
›ti⁄s
 =
WNOHANG
);

85 
	`•ö
("bad wait options");

87 
out
:

88  
ªt
;

89 
	}
}

	@kernel/fork.c

1 
	~<f‹k.h
>

2 
	~<¥oc.h
>

3 
	~<mm.h
>

4 
	~<asm_œbÀ.h
>

5 
	~<scheduÀ.h
>

6 
	~<löux/sched.h
>

7 
	~<löux/myli°.h
>

8 
	~<löux/¥ötf.h
>

10 
	$chgpg
(
u32
*
dú
,
vpg
,
rw
){

13 
u32
 *
dúít
 = 
dú
 + 
	`PG_H10
(
vpg
);

14 
	`as£π
(*
dúít
 & 
PG_P
);

15 
u32
 *
tbl
 = (u32*)
	`KV
((*
dúít
)>>12<<12);

16 if(
rw
){

17 
tbl
[
	`PG_L10
(
vpg
)] |
PG_RWW
;

19 
tbl
[
	`PG_L10
(
vpg
)] &~
PG_RWW
;

21 
	`__asm__
("mov %cr3, %eax\n\t"

23 
	}
}

25 
	$c›y_fd
–
pcb
 *
chûd
){

26 
fûes_°ru˘
 *
my
 = 
cuºít
->
fûes
;

27 
fûes_°ru˘
 *
his
 = 
	`kmem_ˇche_Æloc
(
fûes_°ru˘_ˇche
, 0);

28 
his
->
max_fds
 = 
my
->max_fds;

29 if(
my
->
fûï
 =my->
‹igö_fûï
){

30 
his
->
fûï
 = his->
‹igö_fûï
;

33 
his
->
fûï
 = 
	`kmÆloc2
–(
fûe
 *Ë* 
my
->
max_fds
, 0);

36  
i
 = 0; i < 
my
->
max_fds
; i++ ){

37 
fûe
 *fûê
my
->
fûï
[
i
];

38 
his
->
fûï
[
i
] = 
fûe
;

39 if(
fûe
){

40 
	`gë_fûe
(
fûe
);

44 
chûd
->
fûes
 = 
his
;

47 
	}
}

49 
	$c›y_fs
(
pcb
 *
chûd
){

50 
fs_°ru˘
 *
his
 = 
	`kmem_ˇche_Æloc
(
fs_°ru˘_ˇche
, 0);

51 *
his
 = *
cuºít
->
fs
;

52 
	`dgë
(
his
->
roŸ
);

53 
	`dgë
(
his
->
pwd
);

54 
	`m¡gë
(
his
->
roŸm¡
);

55 
	`m¡gë
(
his
->
pwdm¡
);

57 
chûd
->
fs
 = 
his
;

59 
	}
}

61 
vm_¨ó
 * 
	$˛⁄e_vma
(
vm_¨ó
 *
me
, 
mm
 *
hismm
){

62 
±e
 *
mydú
, *
hisdú
;

63 
±e
 *
mytbl
, *
hi°bl
;

64 
vm_Êags
 vm_flags;

65 
boﬁ
 
cow
;

66 
löór_addr
 
vaddr
;

67 
∑ge
 *
thi•age
;

69 
vm_¨ó
 *
he
 = 
	`kmem_ˇche_Æloc
(
vm_¨ó_ˇche
, 0);

70 *
he
 = *
me
;

71 
he
->
mm
 = 
hismm
;

73 
mydú
 = 
	`PGDIR_OF_MM
(
me
->
mm
);

74 
hisdú
 = 
	`PGDIR_OF_MM
(
hismm
);

75 
vm_Êags
 = 
me
->
Êags
;

76 
cow
 = !
vm_Êags
.
sh¨ed
 && vm_Êags.
maywrôe
;

78 
vaddr
.
vÆue
 = 
me
->
°¨t
;

79 
√xt_4M
;

80 
vaddr
.
vÆue
 < 
me
->
íd
){

81 
i
 = 
vaddr
.
tbl_idx
;

82 
±e
 *
íåy
 = 
mytbl
 + 
i
;

83 if–
íåy
->
vÆue
 =0 ) 
_c⁄töue
;

84 if–!
íåy
->
¥e£¡
Ë
	`•ö
("swappedÖage on disk ?");

85 if(
cow
){

86 
mytbl
[
i
].
wrôabÀ
 = 
Ál£
;

87 
	`övÕg
((*)
vaddr
.
vÆue
);

89 if(
vm_Êags
.
sh¨ed
);

90 if(
vm_Êags
.
maywrôe
);

93 
hi°bl
[
i
] = 
mytbl
[i];

94 
thi•age
 = 
	`±e2∑ge_t
(
mytbl
[
i
]);

95 
	`gë_∑ge
(
thi•age
);

97 
_c⁄töue
:

98 
vaddr
.
vÆue
 +
__4K
;

99 if(
vaddr
.
vÆue
 % 
__4M
 == 0){

100 
idx
;

101 
√xt_4M
:

102 
idx
 = 
vaddr
.
dú_idx
;

103 if–
hisdú
[
idx
].
vÆue
 == 0 )

105 
hisdú
[
idx
].
vÆue
 = 
	`__∑
(
	`__Æloc_∑ge
(
__GFP_ZERO
))

106 | 
PG_USU
 | 
PG_RWW
 | 
PG_P
;

107 
	`as£π
(
hisdú
[
idx
].
¥e£¡
);

108 
mytbl
 = 
	`±e2∑ge
–
mydú
[
idx
] );

109 
hi°bl
 = 
	`±e2∑ge
–
hisdú
[
idx
] );

113 if(
me
->
fûe
){

114 
	`gë_fûe
(
me
->
fûe
);

117  
he
;

118 
	}
}

120 
	$dup_mm≠
(
mm
 *
mymm
, mm *
hismm
)

122 
vm_¨ó
 *
˛⁄e
;

123 
vm_¨ó
 *
roŸ
 = 
mymm
->
vma
; 
	`as£π
(root);

124 
vm_¨ó
 *
this
 = 
roŸ
;

126 if(
this
->
Êags
.
d⁄tc›y
) ;

128 
˛⁄e
 = 
	`˛⁄e_vma
(
this
, 
hismm
);

129 
	`O_APPEND_SAFE
(
hismm
->
vma
, 
˛⁄e
);

130 } (
this
 =Åhis->
√xt
Ë&&Åhi†!
roŸ
 );

133 
	}
}

135 
	$˛⁄e_mm
(
pcb
 *
chûd
){

136 
mm
 *
hismm
 = 
	`kmem_ˇche_Æloc
(
mm_ˇche
, 0);

137 
±e
 *
pgdú
 = 
	`__Æloc_∑ge
–
__GFP_ZERO
);

138 *
hismm
 = *
cuºít
->
mm
;

139 
hismm
->
u£rs
 = 1;

142 
±e
 *
mydú
 = 
	`PGDIR_OF_MM
(
cuºít
->
mm
);

143 
	`mem˝y
((*)(
pgdú
 + 256*3), 
mydú
 + 256*3, 256*4);

145 
hismm
->
¸3
.
vÆue
 = 
	`__∑
(
pgdú
);

146 
hismm
->
vma
 = 0;

148 
	`dup_mm≠
(
cuºít
->
mm
, 
hismm
);

150 
chûd
->
mm
 = 
hismm
;

152 
	}
}

154 
	$do_f‹k
(
˛⁄e_Êags
, 
°ack_°¨t
,

155 
±_ªgs
 *
ªgs
, 
°ack_size
)

158 
µg
 = 
	`∑ge_idx
(
	`Æloc_∑ges
(
__GFP_ZERO
, 1));

159 
pcb
 * 
chûd
 = (*)
	`KV
(
µg
<<12);

161 
	`mem˝y
((*)
chûd
, (*)
cuºít
, 0x2000);

164 if(!
cuºít
->
mm
Ë
£t_back_routöe
;

166 
chûd
->
time_¶i˚
 = chûd->
time_¶i˚_fuŒ
 = 10;

169 if(
˛⁄e_Êags
 & 
CLONE_FD
){

170 
	`c›y_fd
(
chûd
);

172 
cuºít
->
fûes
->
cou¡
++;

176 if(
˛⁄e_Êags
 & 
CLONE_FS
){

177 
	`c›y_fs
(
chûd
);

179 
cuºít
->
fs
->
cou¡
++;

182 if(
˛⁄e_Êags
 & 
CLONE_VM
){

183 
	`˛⁄e_mm
(
chûd
);

186 
	`gë_mm
(
cuºít
->
mm
);

189 
pcb2pcb
;

190 
°ack_‰ame
 *
Êﬂt_ªgs
;

191 
£t_back_routöe
:

195 
pcb2pcb
 = ()
chûd
 - ()
cuºít
;

196 
Êﬂt_ªgs
 = (*)(()
ªgs
 + 
pcb2pcb
);

197 
chûd
->
thªad
.
e•
 = ()
Êﬂt_ªgs
;

198 
Êﬂt_ªgs
->
óx
 = 0;

199 if(!(
ªgs
->
cs
 & 3)){

200 
Êﬂt_ªgs
->
ebp
 +
pcb2pcb
;

202 
chûd
->
thªad
.
eù
 = ()
ªt_‰om_sys_ˇŒ
;

204 
	`•rötf
(
chûd
->
p_«me
, "múr‹:%s", 
cuºít
->p_name);

205 
chûd
->
pid
 = 
	`Æloc_pid
(-1);

206 
chûd
->
mŸhî
 = chûd->
m⁄ô‹
 = 
cuºít
;

207 
	`INIT_LIST_HEAD
(&
chûd
->
chûdªn
);

208 
	`li°_add
(&
chûd
->
siblög
, &
cuºít
->
chûdªn
);

210 
	`LL_I_INCRE
(
li°_a˘ive
, 
chûd
, 
¥io
);

212  
chûd
->
pid
;

213 
	}
}

214 
	$sys_f‹k
(
°ack_‰ame
 
ªgs
){

215  
	`do_f‹k
(

216 
CLONE_FD
 | 
CLONE_FS
 |
CLONE_VM
,

218 &
ªgs
,

221 
	}
}

	@kernel/timer.c

1 
	~<löux/timî.h
>

2 
	~<li°.h
>

3 
	~<löux/¶ab.h
>

4 
	~<utûs.h
>

5 
li°_hód
 
	gmy_timîli°
;

7 
	$åiggî_mytimî
(
timî
 *timer){

8 
timî
->
	`a˘
—imî->
d©a
);

9 
	`li°_dñ
(&
timî
->
node
);

10 
timî
->
°©e
 = 
TIMER_STOPPED
;

11 
timî
->
li„
 =Åimî->
‹igö
;

12 
	}
}

15 
	$my_timîli°_dida
(){

16 
li°_hód
 *
cuº
 = 
my_timîli°
.
√xt
;

17 
cuº
 !&
my_timîli°
){

18 
timî
 *timî = 
	`MB2STRU
(timî, 
cuº
, 
node
);

20 
li°_hód
 *
_√xt
 = 
cuº
->
√xt
;

21 
timî
->
li„
--;

22 if(
timî
->
li„
 == 0){

23 
	`åiggî_mytimî
(
timî
);

25 
cuº
 = 
_√xt
;

27 
	}
}

29 
	$öô_mytimî
(){

30 
	`INIT_LIST_HEAD
(&
my_timîli°
);

31 
	}
}

34 
timî
 *
¸óã_mytimî
(
u32
 
li„
, (*
a˘
)(* 
d©a
), *data){

35 
	`as£π
(
li„
 && 
a˘
);

36 
timî
 *timî = 
	`kmÆloc2
((timer), 0);

37 
timî
->
a˘
 =áct;

38 
timî
->
‹igö
 =Åimî->
li„
 / 10;

39 
timî
->
li„
 =Åimî->
‹igö
;

40 
timî
->
°©e
 = 
TIMER_STOPPED
;

41 
timî
->
d©a
 = data;

42  
timî
;

43 
	}
}

45 
	$°¨t_mytimî
(
timî
 *timer){

46 
boﬁ
 
IF
 = 
	`˛i_ex
();

47 
	`li°_add
(&
timî
->
node
, &
my_timîli°
);

48 
timî
->
°©e
 = 
TIMER_RUNNING
;

49 if(
IF
){

50 
	`°i
();

52 
	}
}

54 
	$ª£t_mytimî
(
timî
 *timer){

55 
boﬁ
 
IF
 = 
	`˛i_ex
();

56 
timî
->
li„
 =Åimî->
‹igö
;

57 if(
IF
){

58 
	`°i
();

60 
	}
}

62 
	$°›_mytimî
(
timî
 *timer){

63 
boﬁ
 
IF
 = 
	`˛i_ex
();

64 
	`li°_dñ
(&
timî
->
node
);

65 
timî
->
°©e
 = 
TIMER_STOPPED
;

66 if(
IF
){

67 
	`°i
();

69 
	}
}

	@ku_utils.c

1 
	~<ku_utûs.h
>

4 
	#CMP_GOON_WHEN
(
exp
)\

5 
exp
){\

6 if(*
±1
!=*
±2
)  0;\

7 
±1
++;\

8 
±2
++;\

10  1;

	)

12 
	$hex_öt
(
x
){

13 if(
x
>='0'&&x<='9')  (x-48);

14 if(
x
>='a'&&x<='f')  (x-87);

16 
	}
}

17 
	$mem£t
(*
de°
,
vÆue
,
n
){

18 
vÆue32
 = 
vÆue
 + (value<<8) + (value<<16) + (value<<24);

19 
qu¨d
 = 
n
 / 4;

20 
l
 = 
n
 % 4;

21 
i
 = 0; i < 
qu¨d
; i++){

22 ((*)
de°
)[
i
] = 
vÆue32
;

24 
l
--){

25 ((*)
de°
)[
n
-
l
] = 
vÆue
;

27 
	}
}

30 *
	$hum™_memsize
(
size
,
öôül_sˇÀ_cou¡
){

31 
gmkb
[4];

32 
	`hum™_memsize_öto
(
gmkb
,
size
,
öôül_sˇÀ_cou¡
);

33  
gmkb
;

34 
	}
}

35 
	$hum™_memsize_öto
(*
gmkb
,
size
,
öôül_sˇÀ_cou¡
){

36 
	`mem£t
((*)
gmkb
,0,16);

37 
i
=3-
öôül_sˇÀ_cou¡
;i>=0;i--){

38 
gmkb
[
i
]=
size
%1024;

39 
size
/=1024;

41 
	}
}

42 
	$pow_öt
(
ba£
,
exp
){

43 if(
exp
==0)  1;

44 
ªsu…
=1;

45 
i
=0;i<
exp
;i++){

46 
ªsu…
*=
ba£
;

48  
ªsu…
;

49 
	}
}

50 
	$˚û_divide
(
a
,
b
){

51 
quŸ
=
a
/
b
;

52 
ªmaödî
=
a
%
b
;

53  
ªmaödî
==0?
quŸ
:quot+1;

54 
	}
}

55 
	$ch¨s_to_°r
(*
°r
,*
ch¨s
){

56 *
ch¨s
!=' '&&*chars!=0){

57 *
°r
=*
ch¨s
;

58 
°r
++;

59 
ch¨s
++;

61 *
°r
=0;

62 
	}
}

64 
	$mem˝
(*
de°
,*
§c
,
byã
){

65 
byã
>0){

66 *
de°
=*
§c
;

67 
de°
++;

68 
§c
++;

69 
byã
--;

71 
	}
}

73 
	$mem£tw
(
u16
*
de°
,
w‹d
,u16 
vÆue
){

74 
w‹d
>0){

75 *(
de°
+
w‹d
-1)=
vÆue
;

76 
w‹d
-=1;

78 
	}
}

80 
	$ch¨scmp
(*
±1
,*
±2
,
íd_Êag
){

81 
íd_Êag
){

83 
	`CMP_GOON_WHEN
((*
±1
!=0)&&(*
±2
!=0))

86 
	`CMP_GOON_WHEN
((*
±1
!=0)&&(*
±2
!=0)&&(*pt1!=' ')&&(*pt2!=' '))

91 
	}
}

	@lib/printf.c

7 
	~<löux/¥ötf.h
>

8 
	~<mm.h
>

9 
	~<video_drv.h
>

12 
°©wnd_ªndî
();

13 
›í_wödow
(
°¨löe
);

14 
˛óæöe
(
l
);

19 
boﬁ
 
	gmm_avaûabÀ
 = 
Ál£
;

20 
boﬁ
 
	gèsk_avaûabÀ
 = 
Ál£
;

22 
	gcurs‹
;

24 
	#BUF_PG_ORDER
 2

	)

25 
	#PAGE_W
 80

	)

26 
	#PAGE_H
 25

	)

27 
	#O_PER_PAGE
 (
PAGE_W
 * 
PAGE_H
)

	)

28 #unde‡
PAGE_SIZE


29 
	#PAGE_SIZE
 (
O_PER_PAGE
 * 2)

	)

30 
	#NR_PAGES
 8

	)

31 
	#VIDEO_CELL_NUM
 (
O_PER_PAGE
 * 
NR_PAGES
)

	)

32 
	#VIDEO_BUF_SIZE
 (
PAGE_SIZE
 * 
NR_PAGES
)

	)

34 
	#POS_L
(
pos
Ë’o†/ 
PAGE_W
)

	)

35 
	#VIDEO_L_ADDR
(
löeid
Ë(
video_˚Œs
 + (löeid )* 
PAGE_W
)

	)

37 
	#RGB_BLUE
 1

	)

38 
	#RGB_GREEN
 2

	)

39 
	#RGB_RED
 4

	)

40 
	#RGB_WHITE
 7

	)

42 #¥agm®
∑ck
(
push
)

43 #¥agm®
∑ck
(1)

44 
	scﬁ‹mod
{

47 
	mfg
: 3;

48 
boﬁ
 
	mhighlight
:1;

49 
	mbg
: 3;

50 
boﬁ
 
	mblök
:1;

52 
	mvÆue
;

56 
	s˚Œ
{

59 
	mascii
;

60 
cﬁ‹mod
 
	mmode
;

62 
u16
 
	mvÆue
;

65 #¥agm®
∑ck
(
p›
)

66 
	#video_mem
 ((*)0xc00b8000)

	)

67 
˚Œ
 *
	gvideo_˚Œs
 = (*)
video_mem
;

73 
	#STAT_WND_H
 4

	)

74 
	#STAT_WND_SIZE
 (
STAT_WND_H
 * 
PAGE_W
 * 2)

	)

75 
˚Œ
 
	g°©_wnd
[
STAT_WND_H
][
PAGE_W
];

78 
	$›rötf
(*
f‹m©
, ...){

79 
ﬁdlöe
;

80 
IF
;

81 
size_t
 
upsize
 = 
mm_avaûabÀ
 ? 0: 1024;

82 
°kroom
[
upsize
];

84 *
buf
 = 
mm_avaûabÀ
 ? (*)
	`__Æloc_∑ges
(0, 
BUF_PG_ORDER
Ë: 
°kroom
;

85 *
ªad
 = 
buf
;

87 
Àngth
 = 
	`__•rötf
(
buf
, 
f‹m©
, (
u32
 *)(&format + 1));

88 if(
Àngth
 > 80 * 24) 1);

91 
IF
 = 
	`˛i_ex
();

93 *
ªad
){

94 
ﬁdlöe
 = 
	`POS_L
(
curs‹
);

95 if(*
ªad
 == '\n'){

96 
curs‹
 = (curs‹ / 
PAGE_W
 + 1) * PAGE_W;

98 if(*
ªad
 == '\t'){

99 
curs‹
 += 4;

102 
video_˚Œs
[
curs‹
].
ascii
 = *
ªad
;

103 
video_˚Œs
[
curs‹
].
mode
.
fg
 = 
RGB_WHITE
;

104 
curs‹
++;

107 if(
curs‹
 >
VIDEO_CELL_NUM
){

108 
	`mem˝y
(
video_mem
, video_mem + (
NR_PAGES
 - 1Ë* 
PAGE_SIZE
, PAGE_SIZE);

109 
curs‹
 = curs‹ % 
O_PER_PAGE
 + O_PER_PAGE;

111 
cuºlöe
 = 
	`POS_L
(
curs‹
);

112 if(
cuºlöe
 !
ﬁdlöe
Ë
	`˛óæöe
(currline);

113 
ªad
++;

116 
	`°©wnd_ªndî
();

118 
	`›í_wödow
(
	`POS_L
(
curs‹
Ë- 
PAGE_H
 + 1 + 4);

119 if(
IF
Ë
	`°i
();

120 if(
mm_avaûabÀ
){

121 
	`__‰ì_∑ges
(
buf
, 
BUF_PG_ORDER
);

123  
Àngth
;

124 
	}
}

126 
	$°©wnd_ªndî
(){

127 
	`mem˝y
(
	`VIDEO_L_ADDR
–
	`POS_L
(
curs‹
Ë+ 1), 
°©_wnd
, 
STAT_WND_SIZE
);

128 
	}
}

129 
	$˛óæöe
(
l
){

130 
˚Œ
 *
o
 = &
video_˚Œs
[ 
l
 * 
PAGE_W
 ];

131 
i
 = 0; i < 
PAGE_W
; i++){

132 
o
[
i
].
vÆue
 = 0;

134 
	}
}

136 
	$›í_wödow
(
°¨éöe
){

137 if(
°¨éöe
 < 0) startline = 0;

138 
	`£t_°¨t
(
°¨éöe
 * 
PAGE_W
);

139 
	}
}

148 
	#BAR_V_NR
 3

149 
	#BAR_H_NR
 3

150 
	#BAR_NR
 (
BAR_V_NR
 * 
BAR_H_NR
)

	)

151 
	#SIDE_EDGE_WIDTH
 2

	)

152 
	#BAR_CELLS
 ((
PAGE_W
 - 
SIDE_EDGE_WIDTH
 * 2Ë/ 
BAR_H_NR
)

	)

153 
	#BAR_SIZE
 (
BAR_CELLS
 * 2)

	)

155 
	#BAR
(
x
, 
y
Ë(
°©_wnd
[y + 1] + 
SIDE_EDGE_WIDTH
 + 
BAR_CELLS
 * x)

	)

157 
	sb¨_desc
{

158 
cﬁ‹mod
 
	mmode
;

159 *
	mtôÀ
;

161 
b¨_desc
 
	gdesc_of_b¨
[
BAR_V_NR
][
BAR_H_NR
];

162 
	$__£t_cﬁumn
(
˚Œ
 *
wnd
, 
cﬁ
,

163 
begöl
, 
 um
, 
˚Œ
 cell){

164 
i
 = 
begöl
; i < begö»+ 
 um
; i++) {

165 
	`mem˝y
(
wnd
 + 
i
 * 
PAGE_W
 + 
cﬁ
, &
˚Œ
, (cell));

167 
	}
}

169 
	$°©wnd_£tcﬁ
(
cﬁ
, 
˚Œ
 cell){

170 
	`__£t_cﬁumn
(
°©_wnd
[0], 
cﬁ
, 0, 4, 
˚Œ
);

171 
	}
}

173 
	$__£t_löe
(
˚Œ
 *
wnd
, 
löe
,

174 
begö
, 
cﬁumns
, 
˚Œ
 cell){

175 
i
 = 
begö
; i < begö + 
cﬁumns
; i++){

176 
	`mem˝y
(
wnd
 + 
löe
 * 
PAGE_W
 + 
i
, &
˚Œ
, (cell));

178 
	}
}

180 
	$°©wnd_£éöe
(
löe
, 
˚Œ
 cell){

181 
	`__£t_löe
(
°©_wnd
[0], 
löe
, 0, 
PAGE_W
, 
˚Œ
);

182 
	}
}

185 
	$wrôe_s¸ìn
(
˚Œ
 *
°¨t
, *
°r
, 
cﬁ‹mod
 
mode
){

186 *
ªad
 = 
°r
;

187 
˚Œ
 *
wrôe
 = 
°¨t
;

188 *
ªad
){

189 
wrôe
->
ascii
 = *
ªad
;

190 
wrôe
->
mode
.
vÆue
 = mode.value;

192 
wrôe
++;

193 
ªad
++;

195  
ªad
 - 
°r
;

196 
	}
}

198 
	$wrôe_b¨
(
x
, 
y
, *
tôÀ
, *
c⁄ã¡
){

199 if(
x
 > 2 || 
y
 > 2) 1);

200 
b¨_desc
 *
desc
 = &
desc_of_b¨
[
x
][
y
];

201 if(
tôÀ
){

202 
desc
->
tôÀ
 =Åitle;

204 if(!
c⁄ã¡
) content = "nul";

206 
˚Œ
 *
b¨_°¨t
 = 
	`BAR
(
x
, 
y
);

207 
off£t
 = 0;

208 
off£t
 = 
	`wrôe_s¸ìn
(
b¨_°¨t
 + off£t, 
desc
->
tôÀ
, desc->
mode
);

209 
	`wrôe_s¸ìn
(
b¨_°¨t
 + 
off£t
, 
c⁄ã¡
, 
desc
->
mode
);

210 
	`°©wnd_ªndî
();

211 
	}
}

214 
	$öô_°©us_wödow
(){

215 
˚Œ
 
blue_˚Œ
 = { 
ascii
:0, 
mode
: {
bg
:
RGB_BLUE
} };

216 
˚Œ
 
t›_˚Œ
 = {
ascii
:205, 
mode
:{
bg
:
RGB_BLUE
} };

217 
	`°©wnd_£tcﬁ
(0, 
blue_˚Œ
);

218 
	`°©wnd_£tcﬁ
(1, 
blue_˚Œ
);

219 
	`°©wnd_£tcﬁ
(
PAGE_W
 - 1, 
blue_˚Œ
);

220 
	`°©wnd_£tcﬁ
(
PAGE_W
 - 2, 
blue_˚Œ
);

223 
	`°©wnd_£éöe
(0, 
t›_˚Œ
);

225 
i
 = 0; i < 
BAR_V_NR
; i++){

226 
j
 = 0; j < 
BAR_H_NR
; j++){

227 
desc_of_b¨
[
i
][
j
].
mode
.
bg
 = 
RGB_GREEN
;

228 
desc_of_b¨
[
i
][
j
].
mode
.
fg
 = 
RGB_RED
;

229 
desc_of_b¨
[
i
][
j
].
mode
.
blök
 = 
Ál£
;

230 
desc_of_b¨
[
i
][
j
].
mode
.
highlight
 = 
Ál£
;

232 
desc_of_b¨
[
i
][
j
].
tôÀ
 = "?:";

235 
	}
}

237 
	$öô_di•œy
(){

238 
	`öô_°©us_wödow
();

240 
	}
}

	@lib/string.c

1 
	~<löux/°rög.h
>

4 
	$°∫Àn
(*
°r
, 
ul⁄g
 
n
){

5 
i
 = 0; i < 
n
; i++){

6 if(
°r
[
i
] == 0)  i;

8  
n
;

9 
	}
}

12 
	$°æí
(*
°r
){

13 
Àn
=0;

14 *
°r
!=0){

15 
°r
++;

16 
Àn
++;

18  
Àn
;

19 
	}
}

21 
boﬁ
 
	$°rm©ch
(*
£g
,*
whﬁe
){

22 
i
=0;i<
	`°æí
(
£g
);i++){

23 if(
£g
[
i
]!=
whﬁe
[i]Ë 
Ál£
;

25  
åue
;

26 
	}
}

28 *
	$°r˝y
(*
de°
,*
§c
){

29 *
d
=
de°
;

30 (*
de°
++=*
§c
++));

31  
d
;

32 
	}
}

40 *
	$°∫˝y
(*
de°
, c⁄° *
§c
, 
n
){

41 
i
;

42 
i
 = 0; i < 
n
 && 
§c
[i]; i++){

43 
de°
[
i
] = 
§c
[i];

45 ; 
i
<
n
; i++Ë
de°
[i] = 0;

46  
de°
;

47 
	}
}

50 
	$°rcmp
(c⁄° *
°r1
, c⁄° *
°r2
){

51 
i
;

52 
i
 = 0; 
°r1
[i] =
°r2
[i]; i++){

53 if(
°r1
[
i
] == 0)  0;

55  
i
 + 1;

57 
	}
}

59 
	$°∫cmp
(c⁄° *
°r1
, c⁄° *
°r2
, 
n
){

60 
i
 = 0; i < 
n
; i++){

61 if(
°r1
[
i
] =
°r2
[i]) {

62 if(
°r1
[
i
]) ;

65  
i
 + 1;

68 
	}
}

	@lib/vsprintf.c

1 
	~<vÆTy≥.h
>

2 
	~<utûs.h
>

3 
	~<löux/¥ötf.h
>

5 *
vÆue2°r
(
u32
 
vÆue
, 
t_Êag
, *
ascii_buf
, 
buÊí
 );

6 
u32
 
è°e_decimÆ
(*
±r
, *
ch¨num
);

7 
wrôe_ch¨s
(*
de°
, *
§c
, *
ídÊags
, 
width
);

8 
wrôe_v¨übÀ
(*
buf
, 
u32
 
vÆue
, 
Êag
, 
width
);

11 
	$•rötf
(*
buf
, *
f‹m©
, ...){

12  
	`__•rötf
(
buf
, 
f‹m©
, (
u32
 *)(&format + 1));

13 
	}
}

15 
	$__•rötf
(*
buf
, *
f‹m©
, 
u32
 *
¨gs
){

16 
width
;

17 
ƒ_wr
;

18 *
Êag
 = 
f‹m©
;

19 *
de°
 = 
buf
;

20 
u32
 *
¨g
 = 
¨gs
;

22 *
Êag
){

23 if(*
Êag
 == '%'){

24 
Êag
++;

25 if(*
Êag
 == '*'){

26 
width
 = *(
¨g
++);

27 
Êag
++;

29 if(*
Êag
 <= '9' && *flag >= '1'){

30 
ch¨num
;

31 
width
 = 
	`è°e_decimÆ
(
Êag
, &
ch¨num
);

32 
Êag
 +
ch¨num
;

34 
width
 = 0;

36 
ƒ_wr
 = 
	`wrôe_v¨übÀ
(
de°
, *
¨g
++, *
Êag
, 
width
);

37 
Êag
++;

43 
ƒ_wr
 = 
	`wrôe_ch¨s
(
de°
, 
Êag
, "%", 0);

44 
Êag
 +
ƒ_wr
;

46 
de°
 +
ƒ_wr
;

48 
de°
[0] = 0;

49  
de°
 - 
buf
;

50 
	}
}

52 
u32
 
	$è°e_decimÆ
(*
±r
, *
ch¨num
){

53 *
°¨t
 = 
±r
;

54 
n
 = 0;

55 
u32
 
sum
 = 0;

57 *
±r
 >= '0' && *ptr <= '9')Ötr++;

58 
n
 = 
±r
 - 
°¨t
;

59 
i
 = 1; i <
n
; i++){

60 
s
 = 
±r
[-
i
] - '0';

61 
sum
 +
s
 * 
	`pow_öt
(10, 
i
-1);

63 *
ch¨num
 = 
n
;

64  
sum
;

65 
	}
}

68 
ölöe
 *
	$°rch¨
(*
°r
, 
c
){

69 if(!
°r
)  0;

70 *
cuº
 = 
°r
;

71 *
cuº
){

72 if(*
cuº
 =
c
)  curr;

73 
cuº
++;

76 
	}
}

84 
	$wrôe_ch¨s
(*
de°
, *
§c
, *
ídÊags
, 
width
){

85 *
wrôe
 = 
de°
;

86 *
ªad
 = 
§c
;

88 *
ªad
 && 
	`°rch¨
(
ídÊags
, *read) == 0){

90 *
wrôe
++ = *
ªad
++;

91 if(
wrôe
 - 
de°
 =
width
) ;

93 if(
width
){

94 
wrôe
 - 
de°
 < 
width
){

95 *
wrôe
++ = ' ';

99  
wrôe
 - 
de°
;

100 
	}
}

112 
	$wrôe_v¨übÀ
(*
buf
, 
u32
 
vÆue
, 
Êag
, 
width
){

113 
	#VALUE_LEN
 31

	)

114 
vÆue°r
[
VALUE_LEN
 + 1];

115 
ƒ_wr
;

116 *
ªsu…
;

117 
Êag
){

119 
ƒ_wr
 = 
	`wrôe_ch¨s
(
buf
, (*)
vÆue
, "%", 
width
);

124 
ªsu…
 = 
	`vÆue2°r
(
vÆue
, 
Êag
, 
vÆue°r
, 
VALUE_LEN
+1);

125 
ƒ_wr
 = 
	`wrôe_ch¨s
(
buf
, 
ªsu…
, 0, 
width
);

131  
ƒ_wr
;

132 
	}
}

138 *
	$vÆue2°r
(
u32
 
vÆue
, 
t_Êag
, *
ascii_buf
, 
buÊí
 ){

139 
ãmp
 = 
vÆue
;

140 
off£t
 = 
buÊí
 - 1 - 1;

142 
ascii_buf
[
buÊí
 - 1] = 0;

143 
t_Êag
){

145 
ascii_buf
[
off£t
] = 
vÆue
;

150 
ãmp
>9){

151 
ascii_buf
[
off£t
]=
ãmp
%10+48;

152 
ãmp
/=10;

153 
off£t
--;

155 
ascii_buf
[
off£t
]=
ãmp
+48;

158 
ãmp
>0xf){

159 
i
=
ãmp
%16;

160 
ascii_buf
[
off£t
]=
i
<=9?i+48:i+87;

161 
ãmp
/=16;

162 
off£t
--;

165 
ascii_buf
[
off£t
--] = 
ãmp
<=9?temp+48:temp+87;

166 
ascii_buf
[
off£t
--] = 'X';

167 
ascii_buf
[
off£t
] = '0';

172  
ascii_buf
 + 
off£t
;

173 
	}
}

	@mm.c

1 
	~<di•.h
>

2 
	~<utûs.h
>

3 
	~<mm.h
>

4 
	~<vÆTy≥.h
>

5 
	~<¥oc.h
>

6 
	~<boŸöfo.h
>

7 
	~<ñf.h
>

8 
	~<f‹k.h
>

9 
	~<löux/sched.h
>

10 
¶ab_hód
 * 
	gmm_ˇche
;

11 
¶ab_hód
 * 
	gvm_¨ó_ˇche
;

12 
¶ab_hód
 *
	gfs_°ru˘_ˇche
;

13 
¶ab_hód
 *
	gfûes_°ru˘_ˇche
;

14 
u32
 
	ggmemsize
=0;

15 
	gã°buf
[1024];

16 
	$öô_mem‹y
(){

17 
	`as£π
((
¸3
Ë=4 && –
±e
) == 4 &&

18 (
löór_addr
) == 4);

19 
	`hóp_öô
();

21 
mem_£gnum
 = 
ªÆmod_öfo
->mem_segnum;

22 
mem_£göfo
 *
mem£g
 =
ªÆmod_öfo
->mem_seginfo;

23 
	`›rötf
("%12s%12s%10s\n","start","len","type");

24 
i
=0; i<
mem_£gnum
; i++){

25 
	`›rötf
("%12x%12x%10s\n",
mem£g
[
i
].
ba£_low
,mem£g[i].
Àn_low
,\

26 
mem£g
[
i
].
ty≥
==1?"free":"occupied");

27 if(
mem£g
[
i
].
ty≥
 =1 && mem£g[i].
ba£_low
 > 
gmemsize
) \

28 
gmemsize
 = 
mem£g
[
i
].
ba£_low
+mem£g[i].
Àn_low
;

33 
m≠size
 = 
G_PGNUM
 * (
∑ge
);

34 
mem_m≠
 = 
	`kmÆloc0
(
m≠size
);

36 
size_of_z⁄e
[0] = 16*0x100000;

37 if(
gmemsize
 > 
ZONE_HIGHMEM_PA
){

38 
size_of_z⁄e
[1] = (896-16)*0x100000;

39 
size_of_z⁄e
[2] = 
gmemsize
 - 896*0x100000;

42 
size_of_z⁄e
[1] = 
gmemsize
 - 16*0x100000;

43 
size_of_z⁄e
[2] = 0;

45 
	}
}

48 
	$m≠_pg
(
u32
*
dú
,
vpg
,
µg
,
us
,
rw
){

51 
u32
 *
dúít
 = 
dú
 + 
	`PG_H10
(
vpg
);

52 if((*
dúít
 & 
PG_P
) == 0){

55 *
dúít
 =
	`__∑
(
	`__Æloc_∑ge
(
__GFP_ZERO
Ë)| 
PG_USU
 | 
PG_RWW
 | 
PG_P
;

57 
u32
 *
tbl
 = (u32*)
	`KV
((*
dúít
)>>12<<12);

59 
tbl
[
	`PG_L10
(
vpg
)] = 
µg
<<12|
us
|
rw
|
PG_P
;

60 
FLUSH_TLB
;

61 
	}
}

68 
	$ãmp_mmio_m≠
(){

74 
	`›rötf
("Åemp mmio map begin >>>>>>>>>\n");

75 *
dú
 = (*)0xc0100000;

78 
u32
 
°¨t
 = 0xfba00000;

79 
u32
 
íd
 = 0xfbb00000;

80 
vaddr
 = 
°¨t
; vadd∏<
íd
; vaddr+=1024*4){

81 
vpg
 = (
vaddr
 - 
PAGE_OFFSET
) >> 12;

82 
µg
 = 
vaddr
 >> 12;

83 
	`m≠_pg
(
dú
, 
vpg
, 
µg
, 0, 
PG_RWW
);

85 if(
vaddr
 =
íd
){

86 
d⁄e
 = 
Ál£
;

87 if(
d⁄e
) ;

88 
d⁄e
 = 
åue
;

90 
íd
 = 0xfec00000;

91 
vaddr
 = 0xfeb80000;

95 
vaddr
 = 0xfdbf0000; vaddr <= 0xfdc00000; vaddr+=1024*4){

96 
vpg
 = (
vaddr
 - 
PAGE_OFFSET
) >> 12;

97 
µg
 = 
vaddr
 >> 12;

98 
	`m≠_pg
(
dú
, 
vpg
, 
µg
, 0, 
PG_RWW
);

100 
	`›rötf
("Åemp mmio map done -----\n");

101 
	}
}

105 
	$mm_öô
(){

106 
	`öô_mem‹y
();

107 
	`öô_z⁄e
();

108 
	`ãmp_mmio_m≠
();

109 
boﬁ
 
mm_avaûabÀ
;

110 
mm_avaûabÀ
 = 
åue
;

111 
	}
}

113 
	$mm_öô2
(){

114 
mm_ˇche
 = 
	`kmem_ˇche_¸óã
("mm_ˇche", (
mm
), 0,

115 
SLAB_HWCACHE_ALIGN
, 0, 0);

116 
vm_¨ó_ˇche
 = 
	`kmem_ˇche_¸óã
("vma_ˇche", (
vm_¨ó
), 0,

117 
SLAB_HWCACHE_ALIGN
, 0, 0);

118 
fs_°ru˘_ˇche
 = 
	`kmem_ˇche_¸óã
("fs_struct_cache",

119 (
fs_°ru˘
), 0,

120 
SLAB_HWCACHE_ALIGN
, 0, 0);

121 
fûes_°ru˘_ˇche
 = 
	`kmem_ˇche_¸óã
("files_struct_cache",

122 (
fûes_°ru˘
), 0,

123 
SLAB_HWCACHE_ALIGN
, 0, 0);

124 
	}
}

	@mm/memory.c

1 
	~<asm/∑ge.h
>

2 
	~<löux/mm.h
>

6 
	$vm_upd©e_pg¥Ÿ
(
vm_¨ó
 *
vma
){

7 
±e
 *±ê&
vma
->
em±y_±e
;

8 
ul⁄g
 
vm_Êags
 = 
vma
->
Êags
.
vÆue
;

10 
±e
->
vÆue
 = 
PG_P
 | 
PG_USU
;

11 if(
vm_Êags
 & 
VM_WRITE
Ë
±e
->
wrôabÀ
 = 1;

15 
	}
}

22 
∑ge
 *

23 
	$__ªsﬁve_addªss
(
±e
 *
pgdú
, 
u32
 
vaddr
, u32 
pg¥Ÿ
){

24 
∑ge
 *
√w∑ge
;

25 
löór_addr
 
œddr
 = {
vÆue
:
vaddr
};

26 
±e
 *
dúít
 = 
pgdú
 + 
œddr
.
dú_idx
;

27 if(
dúít
->
¥e£¡
 == 0){

28 
dúít
->
vÆue
 = 
	`__∑
(
	`__Æloc_∑ge
(
__GFP_ZERO
)Ë| 
PG_USU
 | 
PG_RWW
 | 
PG_P
;

30 
±e
 *
pgtbl
 = (*)
	`__va
(
dúít
->
vÆue
 & 
PAGE_MASK
);

31 
√w∑ge
 = 
	`__Æloc_∑ge
(0);

32 
pgtbl
[
œddr
.
tbl_idx
].
vÆue
 = (
ul⁄g
)
	`__∑
(
√w∑ge
Ë| 
pg¥Ÿ
;

33 
FLUSH_TLB
;

34  
√w∑ge
;

35 
	}
}

40 
boﬁ
 
	$__ªÀa£_addªss
(
±e
 *
pgdú
, 
vaddr
){

41 
löór_addr
 
œddr
 = {
vÆue
: 
vaddr
};

42 
±e
 *
dúít
 = 
pgdú
 + 
œddr
.
dú_idx
;

43 if(
dúít
->
¥e£¡
){

44 
±e
 *
èbÀ
 = (*)
	`__va
–
dúít
->
vÆue
 & 
PAGE_MASK
);

45 
idx
 = 
œddr
.
tbl_idx
;

46 if(
èbÀ
[
idx
].
¥e£¡
){

47 
µg
 = 
èbÀ
[
idx
].
physiˇl
;

48 
	`‰ì_∑ge
(
mem_m≠
 + 
µg
);

49 
èbÀ
[
idx
].
vÆue
 = 0;

50 
FLUSH_TLB
;

51  
åue
;;

54  
Ál£
;

55 
	}
}

59 
∑ge
*

60 
	$comm⁄_no_∑ge
(
vm_¨ó
 *
vma
, 
u32
 
îr_addr
, 
pgîr_code
 
îrcode
){

61 
∑ge
 *
√w∑ge
;

62 if(
îrcode
.
⁄_wrôe
 && 
vma
->
em±y_±e
.
wrôabÀ
 =
Ál£
)

63 
	`•ö
("attemptÅo writeáÑead-only vma");

65 
√w∑ge
 =

66 
	`__ªsﬁve_addªss
((*)
	`__va
(
vma
->
mm
->
¸3
.
vÆue
 & 
PAGE_MASK
),

67 
îr_addr
, 
vma
->
em±y_±e
.
vÆue
);

68  
√w∑ge
;

69 
	}
}

	@mm/mmap.c

4 
	~<löux/mm.h
>

5 
	~<löux/fs.h
>

6 
	~<löux/myli°.h
>

8 
do_brk
(
mm
 *mm, 
brk
);

9 
ö£π_vm_¨ó
(
vm_¨ó
 *
√w
);

10 
∑ge
 *

11 
	$do_no_∑ge
(
vm_¨ó
 *
¨ó
, 
u32
 
addªss
, 
pgîr_code
 
îrcode
){

12 
	`•ö
("ddd");

14 
	}
}

16 
boﬁ
 
	$__ˇche_fûe_∑ge
(
fûe
* fûe, 
u32
 
∑ge_addr
, u32 
fûe_off
){

17 
off£t
 = 
	`k_£ek
(
fûe
, 
fûe_off
, 0);

18 
	`as£π
(
off£t
 =
fûe_off
);

19 
rbyãs
 = 
	`k_ªad
(
fûe
, (*)
∑ge_addr
, 
PAGE_SIZE
);

20 
	`as£π
(
rbyãs
 > 0);

21  
åue
;

22 
	}
}

27 
∑ge
*

28 
comm⁄_no_∑ge
(
vm_¨ó
 *
vma
, 
u32
 
îr_addr
, 
pgîr_code
 
îrcode
);

33 
∑ge
 *

34 
	$ˇche_fûe_∑ge
(
vm_¨ó
 *
vma
, 
u32
 
îr_addr
, 
pgîr_code
 
îrcode
){

35 
∑ge
 *
√w∑ge
;

36 
u32
 
löór_addr
 = 
îr_addr
 & 
PAGE_MASK
;

37 
u32
 
pgoff
 = 
vma
->pgof‡+ ((
îr_addr
 - vma->
°¨t
Ë>> 
PAGE_SHIFT
);

38 
u32
 
off£t
 = 
pgoff
 << 
PAGE_SHIFT
;

39 
√w∑ge
 =

40 
	`comm⁄_no_∑ge
(
vma
, 
löór_addr
, 
îrcode
);

41 
	`__ˇche_fûe_∑ge
(
vma
->
fûe
, 
löór_addr
, 
off£t
);

42  
√w∑ge
;

44 
	}
}

46 
vm_›î©i⁄s
 
	gmm≠_¨ó_›s
 =

48 
n›age
:
ˇche_fûe_∑ge
,

63 * 
	$do_mm≠
(
u32
 
addr
, u32 
Àn
, 
vm_Êags
, 
m≠_Êags
, 
fûe
 *fûe, u32 
pgoff
){

64 if(
Àn
 == 0)  0;

67 
addr
 = 
	`˚û_Æign
◊ddr, 
__4K
);

68 
Àn
 = 
	`˚û_Æign
÷í, 
__4K
);

70 
addr
 = 
	`gë_unm≠≥d_¨ó
◊ddr, 
Àn
); 
	`as£π
(addr);

71 
vm_¨ó
 *
vma
 = 
	`kmem_ˇche_Æloc
(
vm_¨ó_ˇche
, 0);

73 
vma
->
mm
 = 
cuºít
->mm;

74 
vma
->
°¨t
 = 
addr
;

75 
vma
->
íd
 = 
addr
 + 
Àn
;

76 
vma
->
Êags
.
vÆue
 = 
vm_Êags
;

77 
vma
->
fûe
 = file;

78 
vma
->
pgoff
 =Ögoff;

79 if(
fûe
){

80 
vma
->
›s
 = &
mm≠_¨ó_›s
;

83 
vma
->
›s
 = 0;

85 
	`vm_upd©e_pg¥Ÿ
(
vma
);

87 
	`as£π
(
vma
->
mm
->vma);

89 
	`ö£π_vm_¨ó
(
vma
);

90  (*)
addr
;

91 
	}
}

99 
vm_¨ó
 *
	$föd_vma
(
mm
 *mm, 
addr
){

100 
vm_¨ó
 *
right_⁄e
 = 
	`O_SCAN_UNTIL_MEET_LARGER
(
mm
->
vma
, 
íd
, 
addr
);

101  
right_⁄e
;

102 
	}
}

128 
u32
 
	$gë_unm≠≥d_¨ó
(
u32
 
addr
, u32 
Àn
){

129 if(!
addr
Ëadd∏
__1G
;

130 
addr
 = 
	`˚û_Æign
◊ddr, 
PAGE_SIZE
);

131 
Àn
 = 
	`˚û_Æign
÷í, 
PAGE_SIZE
);

133 
vm_¨ó
 *
bíóth
 = 
	`föd_vma
(
cuºít
->
mm
, 
addr
);

134 
addr
 + 
Àn
 < 
__3G
;

135 
addr
 = 
bíóth
->
íd
, bíóth = bíóth->
√xt
)

137 if(!
bíóth
 || 
addr
 + 
Àn
 <bíóth->
íd
){

138 
	`as£π
((
addr
 & ~
PAGE_MASK
) == 0);

139  
addr
;

143 
	}
}

148 * 
	$mm≠
(
ul⁄g
 
addr
, 
u32
 
Àn
, 
vm_Êags
, 
m≠_Êags
, 
fûe
 *fûe, u32 
off£t
){

149 
	`as£π
(
addr
 % 
__4K
 =0 && 
off£t
 % __4K == 0);

150 *
ªt
 = 
	`do_mm≠
(
addr
, 
Àn
, 
vm_Êags
, 
m≠_Êags
, 
fûe
, 
off£t
 >> 12);

151 
	`as£π
(
ªt
 =(*)
addr
);

152  
ªt
;

153 
	}
}

155 
	$ö£π_vm_¨ó
(
vm_¨ó
 *
√w
){

156 
	`as£π
(
√w
 &&Çew->
mm
 &&Çew->mm->
vma
);

157 
mm
 *mm = 
√w
->mm;

158 
vm_¨ó
 *
roŸ
 = 
mm
->
vma
;

159 
vm_¨ó
 *
node
 = 
mm
->
vma
;

161 if(
node
->
°¨t
 > 
√w
->start){

164 
node
 =Çode->
√xt
;

165 }
node
 !
roŸ
);

166 if(
√w
->
°¨t
 < 
roŸ
->°¨tË
mm
->
vma
 =Çew;

167 
√w
->
√xt
 = 
node
;

168 
√w
->
¥ev
 = 
node
->prev;

169 
node
->
¥ev
 = 
√w
;

170 
√w
->
¥ev
->
√xt
 =Çew;

171 
	}
}

177 
	$sys_brk
(
brk
){

180 
	}
}

183 
	$k_brk
(
brk
){

184  
	`do_brk
(
cuºít
->
mm
, 
brk
);

185 
	}
}

190 
	$do_brk
(
mm
 *mm, 
brk
){

191 
√wbrk
, 
ﬁdbrk
;

192 
√wbyãs
;

193 
	`as£π
(
mm
->
°¨t_brk
 && mm->
brk
);

194 
√wbrk
 = 
	`˚û_Æign
(
brk
, 
__4K
);

195 
ﬁdbrk
 = 
mm
->
brk
;

196 
√wbyãs
 = 
√wbrk
 - 
ﬁdbrk
;

197 if(
√wbyãs
 =0Ë
suc˚ss
;

199 if(
mm
->
brk
 =mm->
°¨t_brk
){

200 if(
√wbyãs
 < 0Ë
Áûed
;

201 
	`mm≠
(
mm
->
°¨t_brk
, 
√wbyãs
, 
VM_READ
 | 
VM_WRITE
, 0, 0, 0);

202 
suc˚ss
;

204 
vm_¨ó
 *
brk_¨ó
 = 
	`föd_vma
(
mm
, mm->
°¨t_brk
);

205 
	`as£π
(
brk_¨ó
->
°¨t
 =
mm
->
°¨t_brk
);

206 if(
√wbyãs
 > 0){

207 
	`vm_¨ó_ex∑nd
–
brk_¨ó
, 
√wbrk
);

210 
	`vm_¨ó_shrök
–
brk_¨ó
, 
√wbrk
 );

212 
suc˚ss
:

213 
mm
->
brk
 = 
√wbrk
;

214  
√wbrk
;

215 
Áûed
:

216  
ﬁdbrk
;

217 
	}
}

219 
boﬁ
 
	$vm_¨ó_ex∑nd
(
vm_¨ó
 *
vma
, 
√w_íd
){

220 
	`as£π
(
√w_íd
 > 
vma
->
íd


221 && 
√w_íd
 % 
__4K
 == 0);

223 if–
	`föd_vma_öãr£˘i⁄
(
vma
->
mm
, vma->
íd
, 
√w_íd
) )

224  
Ál£
;

225 
vma
->
íd
 = 
√w_íd
;

226  
åue
;

227 
	}
}

229 
boﬁ
 
	$vm_¨ó_shrök
(
vm_¨ó
 *
vma
, 
√w_íd
){

230 
	`as£π
(
√w_íd
 < 
vma
->
íd


231 && 
√w_íd
 > 
vma
->
°¨t


232 && 
√w_íd
 % 
__4K
 == 0);

233 
vaddr
 = 
vma
->
íd
; vadd∏< 
√w_íd
; vadd∏+
__4K
){

234 
	`__ªÀa£_addªss
–
	`PGDIR_OF_MM
(
vma
->
mm
), 
vaddr
 );

236 
vma
->
íd
 = 
√w_íd
;

237  
åue
;

238 
	}
}

	@mm/slab.c

1 
	~<li°.h
>

2 
	~<mm.h
>

3 
	~<löux/¶ab.h
>

6 
	s¶ab
{

7 
li°_hód
 
	mã¡a˛e
;

8 
	möu£
;

9 
	m‰ì
;

10 * 
	mobjs
;

12 
	m‰ìli°
[0];

15 
	s¶ab_hód
{

16 
li°_hód
 
	m¶abs_∑πül
;

17 
li°_hód
 
	m¶abs_u£dout
;

18 
li°_hód
 
	m¶abs_‰esh
;

20 
li°_hód
 
	mglobÆ
;

21 
	mobjsize
;

22 
u16
 
	mobjnum
;

23 
	m‰ì_objs
;

24 
	mgÂ‹dî
;

25 
	mgÂÊags
;

26 c⁄° *
	m«me
;

28 (*
	m˘‹
)(*, 
	m¶ab_hód
 *, );

29 (*
	mdt‹
)(*, 
	m¶ab_hód
 *, );

33 
	#OBJNUM_PER_SLAB
 8

	)

35 
¶ab_hód
 
	gˇche_ˇche
[1];

39 
ölöe
 
__ªgi°î_¶ab_ty≥
(*
«me
, 
objsize
,

40 
off£t
, 
Êags
,

41 (*
˘‹
)(*, 
¶ab_hód
 *, ),

42 (*
dt‹
)(*, 
¶ab_hód
 *, ),

43 
¶ab_hód
 *
¶abhód


46 
gønuœrôy
;

47 if(
Êags
 & 
SLAB_HWCACHE_ALIGN
){

48 if(
objsize
 >
L1_CACHLINE_SIZE
Ë
gønuœrôy
 = L1_CACHLINE_SIZE;

49 
gønuœrôy
 = 
	`˚û2n
(
objsize
);

51 
gønuœrôy
 = 
BYTES_PER_WORD
;

52 
objsize
 = 
	`˚û_Æign
(objsize, 
gønuœrôy
);

54 
∑ges_wegŸ
 = 
	`size2∑ges
(
objsize
 * 
OBJNUM_PER_SLAB
);

55 
size_wegŸ
 = 
∑ges_wegŸ
 << 12;

56 
right_size
 = (
size_wegŸ
 - (
¶ab
) );

57 
objnum_mo°
 = 
right_size
 / (
∑ge
);

58 
obj_°¨t
 = 
size_wegŸ
 - 
objsize
 * 
objnum_mo°
;

60 
∑ddí
 = 
obj_°¨t
 - (
¶ab
);

62 
x
;

63 if–
∑ddí
/2 >
objnum_mo°
Ë
x
 = 0;

64 
x
 = 
	`˚û_div
(2 * 
objnum_mo°
 - 
∑ddí
 , 
objsize
 + 2);

65 
objnum
 = 
objnum_mo°
 - 
x
;

67 
¶abhód
->
objsize
 = objsize;

68 
¶abhód
->
objnum
 = objnum;

69 
¶abhód
->
gÂ‹dî
 = 
	`__BSR
(
∑ges_wegŸ
);

70 
¶abhód
->
gÂÊags
 = 0;

71 if(
Êags
 & 
SLAB_CACHE_DMA
Ë
¶abhód
->
gÂÊags
 |
__GFP_DMA
;

72 
¶abhód
->
˘‹
 = ctor;

73 
¶abhód
->
dt‹
 = dtor;

74 
¶abhód
->
«me
 =Çame;

76 
	`INIT_LIST_HEAD
(&
¶abhód
->
¶abs_u£dout
);

77 
	`INIT_LIST_HEAD
(&
¶abhód
->
¶abs_∑πül
);

78 
	`INIT_LIST_HEAD
(&
¶abhód
->
¶abs_‰esh
);

79 
	`INIT_LIST_HEAD
(&
¶abhód
->
globÆ
);

80 
	`li°_add
(&
¶abhód
->
globÆ
, &
ˇche_ˇche
->global);

83 
	}
}

85 
ölöe
 
	$∑ge_m¨k_¶ab
(
∑ge
 *∑ge, 
¶ab
 *slab){

86 
∑ge
->
Ãu
.
¥ev
 = (
li°_hód
 *)
¶ab
;

87 
	}
}

89 
ölöe
 
	$∑ge_m¨k_ˇche
(
∑ge
 *∑ge, 
¶ab_hód
 *
¶abhód
){

90 
∑ge
->
Ãu
.
√xt
 = (
li°_hód
 *)
¶abhód
;

91 
	}
}

93 
ölöe
 
	$¶ab_queue_grow
(
¶ab_hód
 *
¶abhód
, 
Êags
){

94 
¶ab
 *slab = (slab *)

95 
	`__Æloc_∑ges
(
¶abhód
->
gÂÊags
, sœbhód->
gÂ‹dî
);

96 
¶ab
->
öu£
 = 0;

97 
¶ab
->
‰ì
 = 0;

98 
¶ab
->
objs
 = (*)((
u32
)¶ab + 
PAGE_SIZE
 * (1 << 
¶abhód
->
gÂ‹dî
) - \

99 
¶abhód
->
objnum
 * sœbhód->
objsize
);

100 
i
 = 0; i < 
¶abhód
->
objnum
; i++){

101 *
obj
 = 
¶ab
->
objs
 + 
¶abhód
->
objsize
 * 
i
;

102 
¶ab
->
‰ìli°
[
i
] = i + 1;

103 if(
¶abhód
->
˘‹
Ë¶abhód->
	`˘‹
(
obj
, sœbhód, 
Êags
);

106 
pgƒ
 = 1 << 
¶abhód
->
gÂ‹dî
;

107 
∑ge
 *∑gê
	`vút_to_∑ge
(
¶ab
);

108 
i
 = 0; i < 
pgƒ
; i ++){

109 
	`∑ge_m¨k_¶ab
(
∑ge
 + 
i
, 
¶ab
);

110 
	`∑ge_m¨k_ˇche
(
∑ge
 +
i
 , 
¶abhód
);

113 
	`li°_add
(&
¶ab
->
ã¡a˛e
, &
¶abhód
->
¶abs_‰esh
);

114 
¶abhód
->
‰ì_objs
 +¶abhód->
objnum
;

116 
	}
}

118 
ölöe
 *
	$¶ab_Æloc_⁄e
(
¶ab_hód
 *
¶abhód
, 
¶ab
 *slab){

119 
	`as£π
(
¶ab
->
öu£
 !
¶abhód
->
objnum
);

120 
‰ìid
 = 
¶ab
->
‰ì
;

121 * 
obj
 = 
¶ab
->
objs
 + 
¶abhód
->
objsize
 * 
‰ìid
;

122 
¶ab
->
‰ì
 = sœb->
‰ìli°
[
‰ìid
];

123 
¶ab
->
öu£
 ++;

124  
obj
;

125 
	}
}

127 * 
	$kmem_ˇche_Æloc
(
¶ab_hód
 *
¶abhód
, 
Êags
){

128 if–
	`li°_em±y
(&
¶abhód
->
¶abs_∑πül
) ){

129 if–
	`li°_em±y
(&
¶abhód
->
¶abs_‰esh
) ){

130 
	`¶ab_queue_grow
(
¶abhód
, 
Êags
);

132 
li°_hód
 *
‰esh
 = 
¶abhód
->
¶abs_‰esh
.
√xt
;

133 
	`li°_dñ
(
‰esh
);

134 
	`li°_add
(
‰esh
, &
¶abhód
->
¶abs_∑πül
);

136 
¶ab
 *¶ab = 
	`MB2STRU
(¶ab, 
¶abhód
->
¶abs_∑πül
.
√xt
, 
ã¡a˛e
);

137 *
obj
 = 
	`¶ab_Æloc_⁄e
(
¶abhód
, 
¶ab
);

138 
¶abhód
->
‰ì_objs
 --;

139 if(
¶ab
->
öu£
 =
¶abhód
->
objnum
){

140 
	`li°_dñ
(&
¶ab
->
ã¡a˛e
);

141 
	`li°_add
(&
¶ab
->
ã¡a˛e
, &
¶abhód
->
¶abs_u£dout
);

143  
obj
;

144 
	}
}

145 
¶ab_hód
 * 
ªgi°î_¶ab_ty≥
(*
«me
, 
objsize
,

146 
off£t
, 
Êags
,

147 (*
˘‹
)(*, 
¶ab_hód
 *, ),

148 (*
dt‹
)(*, 
¶ab_hód
 *, )

151 
¶ab_hód
 *
¶abhód
 = 
	`kmem_ˇche_Æloc
(
ˇche_ˇche
, 0);

152 
	`__ªgi°î_¶ab_ty≥
(
«me
, 
objsize
, 
off£t
, 
Êags
, 
˘‹
, 
dt‹
, 
¶abhód
);

153  
¶abhód
;

154 
	}
}

156 
ölöe
 
	$¶ab_‰ì_⁄e
(
¶ab_hód
 *
¶abhód
, 
¶ab
 *¶ab, 
to‰ì
){

157 
¶ab
->
‰ìli°
[
to‰ì
] = sœb->
‰ì
;

158 
¶ab
->
‰ì
 = 
to‰ì
;

159 
¶ab
->
öu£
 --;

160 
	}
}

162 
	$kmem_ˇche_‰ì
(
¶ab_hód
 *
¶abhód
, *
obj
){

163 
∑ge
 *∑gê
	`vút_to_∑ge
(
obj
);

164 
	`as£π
(
∑ge
->
Ãu
.
√xt
 =(*)
¶abhód
);

166 
¶ab
 *¶ab = (*)
∑ge
->
Ãu
.
¥ev
;

167 
to‰ì
 = (
obj
 - 
¶ab
->
objs
Ë/ 
¶abhód
->
objsize
;

168 
	`¶ab_‰ì_⁄e
(
¶abhód
, 
¶ab
, 
to‰ì
);

169 
¶abhód
->
‰ì_objs
 ++;

171 if(
¶ab
->
öu£
 =
¶abhód
->
objnum
 - 1){

172 
	`li°_dñ
(&
¶ab
->
ã¡a˛e
);

173 
	`li°_add
(&
¶ab
->
ã¡a˛e
, &
¶abhód
->
¶abs_∑πül
);

175 if(
¶ab
->
öu£
 == 0){

176 
	`li°_dñ
(&
¶ab
->
ã¡a˛e
);

177 
	`li°_add
(&
¶ab
->
ã¡a˛e
, &
¶abhód
->
¶abs_‰esh
);

180 
	}
}

181 
	sˇche_size
{

182 
	msize
;

183 
¶ab_hód
 *
	m¶abhód
;

184 
¶ab_hód
 *
	m¶abhód_dma
;

187 
	#COMMON_CACHE_NUM
 12

	)

188 
	#COMMON_CACHE_MIN
 32

	)

189 
ˇche_size
 
	gmÆloc_sizes
[
COMMON_CACHE_NUM
];

194 *
	$kmÆloc2
(
size
, 
Êags
){

195 
i
 = 0; i <
COMMON_CACHE_NUM
; i++ ){

196 if(
mÆloc_sizes
[
i
].
size
 >= size){

197 *
obj
 = 
	`kmem_ˇche_Æloc
(
Êags
 & 
__GFP_DMA
 ?

198 
mÆloc_sizes
[
i
].
¶abhód_dma
 : mÆloc_sizes[i].
¶abhód
, 
Êags
);

199 if(
obj
 && (
Êags
 & 
__GFP_ZERO
)Ë
	`mem£t
(obj, 0, 
size
);

200  
obj
;

203 
	`as£π
("too big size" && 0);

204  
NULL
;

205 
	}
}

207 
	$k‰ì2
(*
obj
){

208 
∑ge
 *∑gê
	`vút_to_∑ge
(
obj
);

209 
	`kmem_ˇche_‰ì
((
¶ab_hód
 *)
∑ge
->
Ãu
.
√xt
, 
obj
);

210 
	}
}

213 
	$kmem_ˇche_öô
(){

214 
	`__ªgi°î_¶ab_ty≥
("¶ab_hód", –
¶ab_hód
), 0, 
SLAB_HWCACHE_ALIGN
,

215 
NULL
, NULL, 
ˇche_ˇche
);

217  
i
 = 0; i < 
COMMON_CACHE_NUM
; i++){

218 
size
 = 
COMMON_CACHE_MIN
 << 
i
;

219 
mÆloc_sizes
[
i
].
size
 = size;

220 
mÆloc_sizes
[
i
].
¶abhód
 = 
	`ªgi°î_¶ab_ty≥
–"comm⁄", 
size
,

221 0, 0, 
NULL
, NULL);

222 
mÆloc_sizes
[
i
].
¶abhód_dma
 = 
	`ªgi°î_¶ab_ty≥
–"comm⁄_dma", 
size
,

223 0, 
SLAB_CACHE_DMA
, 
NULL
, NULL);

225 
	}
}

227 *
	gaddªss
[2048];

228 
¶ab_hód
 *
	g¶abhóds
[128];

229 
	gcur_idx
;

230 
	$__kmem_ˇche_Æloc_‰ì
(
¶ab_hód
 *
¶abhód
, 
ƒ_ª≥©
){

231 
	`as£π
(
ƒ_ª≥©
 < 2048);

233 
ƒ_ª≥©
 = (ƒ_ª≥© / 
¶abhód
->
objnum
 + 1) * slabhead->objnum;

234 
i
;

235 
j
;

236 
i
 = 0; i < 
ƒ_ª≥©
; i++){

237 
addªss
[
i
] = 
	`kmem_ˇche_Æloc
(
¶abhód
, 0);

239 
i
 = 0; i < 
ƒ_ª≥©
; i++){

240 
	`kmem_ˇche_‰ì
(
¶abhód
, 
addªss
[
i
]);

242 
i
 = 0; i < 
ƒ_ª≥©
; i++){

243 * 
obj
 = 
	`kmem_ˇche_Æloc
(
¶abhód
, 0);

244 
j
 = 0; j < 
ƒ_ª≥©
; j++){

245 if–
obj
 =
addªss
[
j
] ){

247 
	`mem£t
(
obj
, 1, 
¶abhód
->
objsize
);

248 
addªss
[
j
] = 0;

249 
	`›rötf
(". ");

253 
	`as£π
(
j
 !
ƒ_ª≥©
);

255 
	}
}

257 
	$kmem_ˇche_Æloc_‰ì
(*
«me
, 
size
, 
Êags
, 
ƒ_ª≥©
){

258 
	`as£π
(
ƒ_ª≥©
 < 2048);

259 
¶ab_hód
 *
¶abhód
 = 
	`kmem_ˇche_¸óã
(
«me
, 
size
, 0, 
Êags
, 0, 0);

260 
	`__kmem_ˇche_Æloc_‰ì
(
¶abhód
, 
ƒ_ª≥©
);

261 
¶abhóds
[
cur_idx
++] = 
¶abhód
;

262 
	}
}

263 
	$kmem_ˇche_ã°
(){

271 
i
 = 0; i < 
COMMON_CACHE_NUM
; i++){

272 
j
;

273 
j
 =0 ; j < 100; j++){

274 *
obj
 = 
	`kmÆloc2
–
mÆloc_sizes
[
i
].
size
 - 1 , 
__GFP_DMA
);

275 
	`as£π
(
obj
);

276 
addªss
[
j
] = 
obj
;

277 
	`mem£t
(
obj
, 0xcc, 
mÆloc_sizes
[
i
].
size
);

280 
j
 =0 ; j < 100; j++){

281 
	`k‰ì2
(
addªss
[
j
]);

284 
	}
}

287 * 
	$°©ic_Æloc
(
objsize
, 
objnum
){

288 
	`as£π
(
objsize
 %4 =0 && 
objnum
 > 0 && objnum < 2048);

289  
	`kmÆloc2
(
objsize
 * 
objnum
, 
__GFP_ZERO
);

290 
	}
}

	@mmzone.c

1 
	~<mmz⁄e.h
>

2 
	~<utûs.h
>

4 
∑ge_is_buddy
(
∑ge
 *∑ge, 
‹dî
);

5 
öô_‰ì_¨ó
(
z⁄e_id
, 
°¨t_idx
);

6 
__‰ì_∑ges_bulk
(
∑ge
 *∑ge, 
z⁄e_t
 *
z⁄e
, 
‹dî
);

7 
˛óve
(
‰ì_¨ó_t
 *
‰ì_¨ó
, 
‹dî
);

8 
	$öfo_z⁄e
(
z⁄e_id
){

9 
	`›rötf
("z⁄e%u[•™√d_∑ges:%x]\n", 
__z⁄es
[
z⁄e_id
]->
•™√d_∑ges
);

10 
	}
}

12 
z⁄e_t
 *
	g__z⁄es
[3] = {&
z⁄e_dma
, &
z⁄e_n‹mÆ
, &
z⁄e_highmem
};

13 
	g∑_of_z⁄e
[3] = {
ZONE_DMA_PA
, 
ZONE_NORMAL_PA
, 
ZONE_HIGHMEM_PA
};

14 
	$öô_z⁄e
(){

15 
	`›rötf
("init buddy \n");

16 
i
 = 0; i <= 2; i++){

17 
__z⁄es
[
i
]->
z⁄e_mem_m≠
 = 
mem_m≠
 + 
	`∑_idx
(
∑_of_z⁄e
[i]);

18 
__z⁄es
[
i
]->
•™√d_∑ges
 = 
size_of_z⁄e
[i]>>12;

24 
	`öô_‰ì_¨ó
(
ZONE_DMA
, 0x300000>>12);

25 
	`öô_‰ì_¨ó
(
ZONE_NORMAL
, 
HEAP_SIZE
>>12);

26 
	`öô_‰ì_¨ó
(
ZONE_HIGHMEM
, 0);

27 
	}
}

33 
	$öô_‰ì_¨ó
(
z⁄e_id
, 
°¨t_idx
){

34 
z⁄e_t
 *
z⁄e
 = 
__z⁄es
[
z⁄e_id
];

35 
‰ì_¨ó_t
 *
‰ì_¨ó
 = 
z⁄e
->free_area;

36 
∑ge
 *
z⁄e_m≠
 = 
z⁄e
->
z⁄e_mem_m≠
;

37 
i
 = 0; i <
MAX_ORDER
; i++){

38 
	`INIT_LIST_HEAD
(&
‰ì_¨ó
[
i
].
‰ì_li°
);

39 
‰ì_¨ó
[
i
].
‰ìs
 = 0;

40 
‰ì_¨ó
[
i
].
Ælocs
 = 0;

43 
löked
 = 
°¨t_idx
;

45 
löked
 < 
z⁄e
->
•™√d_∑ges
){

46 
z⁄e_m≠
[
löked
].
PG_zid
 = 
z⁄e_id
;

47 
z⁄e_m≠
[
löked
].
_cou¡
 = 1;

48 
z⁄e_m≠
[
löked
].
¥iv©e
 = 8;

50 
	`‰ì_∑ges
(
z⁄e_m≠
 + 
löked
, 8);

52 
löked
 += 1 << 8;

54 
z⁄e
->
‰ìs
 = z⁄e->
Ælocs
 = 0;

56 
	}
}

61 
	$__‰ì_∑ges_bulk
(
∑ge
 *∑ge, 
z⁄e_t
 *
z⁄e
, 
‹dî
){

62 
	`as£π
(
	`˛i_Æªady
());

63 
	`as£π
(
∑ge
->
_cou¡
 == 0 && "onlyállow invoked by free_pages");

64 
	`as£π
(
‹dî
 =
∑ge
->
¥iv©e
 && "just commentÅhisÜine, but beáware \
 of what happended");

66 
	`as£π
(
z⁄e
->
‰ì_¨ó
[
‹dî
].
ƒ_‰ì
 >= 0);

68 
‰ì_¨ó_t
 * 
‰ì_¨ó
 = 
z⁄e
->free_area;

69 
∑ge
 *
‹ph™
 =Öage;

70 
∑ge
 *
assume_hód
 = 0;

72 
∑ge
 *
phy_√ighb‹
 = 0;

73 
cuº_‹dî
;

74 
‹ph™
->
PG_¥iv©e
 = 0;

75 
cuº_‹dî
 = 
‹dî
; cuº_‹dî < 
MAX_ORDER
; curr_order++){

76 
block_pgs
 = 1<<
cuº_‹dî
;

80 if(
	`∑ge_idx
(
‹ph™
Ë/ 
block_pgs
 % 2 == 0){

81 
phy_√ighb‹
 = 
‹ph™
 + 
block_pgs
;

82 
assume_hód
 = 
‹ph™
;

85 
phy_√ighb‹
 = 
‹ph™
 - 
block_pgs
;

86 
assume_hód
 = 
phy_√ighb‹
;

89 if(
phy_√ighb‹
 < 
z⁄e
->
z⁄e_mem_m≠
 || \

90 
phy_√ighb‹
 >
z⁄e
->
z⁄e_mem_m≠
 + z⁄e->
•™√d_∑ges
){

91 
	`›rötf
("buddy:boundary outside ");

94 if(!
	`∑ge_is_buddy
(
phy_√ighb‹
, 
cuº_‹dî
)) ;

97 
	`li°_dñ
(&
phy_√ighb‹
->
Ãu
); 
‰ì_¨ó
[
cuº_‹dî
].
ƒ_‰ì
--;

100 
phy_√ighb‹
->
PG_¥iv©e
 = 0;

102 
‹ph™
 = 
assume_hód
;

105 
	`INIT_LIST_HEAD
(&
‹ph™
->
Ãu
);

106 
	`li°_add
(&
‹ph™
->
Ãu
, &
‰ì_¨ó
[
cuº_‹dî
].
‰ì_li°
);

107 
‹ph™
->
PG_¥iv©e
 = 1;

108 
‹ph™
->
¥iv©e
 = 
cuº_‹dî
;

109 
	`as£π
(
‹ph™
->
_cou¡
 == 0);

110 
‰ì_¨ó
[
cuº_‹dî
].
ƒ_‰ì
++;

112 
	}
}

114 
	$∑ge_is_buddy
(
∑ge
 *∑ge, 
‹dî
){

115 if(
∑ge
->
PG_¥iv©e
 =0 ||Öage->
_cou¡
 !0 ||Öage->
¥iv©e
 !
‹dî
){

120 
	}
}

121 
∑ge
 *
	$__rmquíe
(
z⁄e_t
 *
z⁄e
 , 
‹dî
){

122 
IF
 = 
	`˛i_ex
();

123 
z⁄e
->
Ælocs
++;

124 
z⁄e
->
‰ì_¨ó
[
‹dî
].
Ælocs
++;

125 
	`as£π
(
z⁄e
->
‰ì_¨ó
[
‹dî
].
ƒ_‰ì
 >= 0);

126 
‰ì_¨ó_t
 *
‰ì_¨ó
 = 
z⁄e
->free_area;

127 
i
 = 
‹dî
;

128 
‰ì_¨ó
[
i
].
ƒ_‰ì
 == 0){

129 
i
++;

130 if(
i
 =
MAX_ORDER
 + 1Ë
	`•ö
("page frameÑeclamingÑequired");

132 
i
 > 
‹dî
){

133 
	`˛óve
(
z⁄e
->
‰ì_¨ó
, 
i
);

134 
i
--;

136 
li°_hód
 *
Ãu
 = 
‰ì_¨ó
[
i
].
‰ì_li°
.
√xt
;

137 
	`li°_dñ_öô
(
Ãu
); 
‰ì_¨ó
[
i
].
ƒ_‰ì
--;

139 
∑ge
 *
ô
 = (
∑ge_t
 *)(()
Ãu
 - 
	`MEMBER_OFFSET
(page_t,Üru));

140 
ô
->
_cou¡
 = 1;

141 
ô
->
PG_¥iv©e
 = 0;

142 
ô
->
debug
 = 
z⁄e
->
Ælocs
;

144 if(
IF
Ë
	`°i
();

145  
ô
;

146 
	}
}

151 
	$˛óve
(
‰ì_¨ó_t
 *
‰ì_¨ó
, 
‹dî
){

152 
li°_hód
 *
‰ì_li°
 = &
‰ì_¨ó
[
‹dî
].free_list;

154 
li°_hód
 *
Ãu
 = 
‰ì_li°
->
√xt
;

155 
	`li°_dñ_öô
(
Ãu
);

156 
‰ì_¨ó
[
‹dî
].
ƒ_‰ì
--;

158 
∑ge_t
 *
mŸhî
 = (∑ge_à*)(()
Ãu
 - 
	`MEMBER_OFFSET
(page_t,Üru));

159 
∑ge_t
 *
chûd1
 = 
mŸhî
;

160 
chûd1
->
¥iv©e
--;

161 
∑ge_t
 *
chûd2
 = 
chûd1
 + (1<<chûd1->
¥iv©e
);

162 *
chûd2
 = *
chûd1
;

163 
	`li°_add
(&
chûd1
->
Ãu
, &
‰ì_¨ó
[
‹dî
 - 1].
‰ì_li°
);

164 
	`li°_add
(&
chûd2
->
Ãu
, &
‰ì_¨ó
[
‹dî
 - 1].
‰ì_li°
);

165 
‰ì_¨ó
[
‹dî
 - 1].
ƒ_‰ì
 += 2;

166 
	}
}

174 
	$‰ì_∑ges
(
∑ge_t
 *
∑ge
, 
‹dî
){

175 
	`as£π
(
∑ge
->
_cou¡
 >= 1);

176 
IF
 = 
	`˛i_ex
();

178 
z⁄e_t
 *
z⁄e
 = 
__z⁄es
[
∑ge
->
PG_zid
];

179 
z⁄e
->
‰ìs
++;

180 
z⁄e
->
‰ì_¨ó
[
‹dî
].
‰ìs
++;

181 
∑ge
->
_cou¡
--;

182 if(
∑ge
->
_cou¡
 == 0){

183 
	`__‰ì_∑ges_bulk
(
∑ge
, 
z⁄e
, 
‹dî
);

186 if(
IF
Ë
	`°i
();

187 
	}
}

190 
∑ge
 *
	$Æloc_∑ges
(
u32
 
gÂ_mask
, 
‹dî
){

192 
∑ge
 *page;

193 
avoid_gcc_com∂aö
;

194 if(
gÂ_mask
 & 
__GFP_DMA
){

195 
∑ge
 = (*)
	`__rmquíe
(&
z⁄e_dma
, 
‹dî
);

197 if(
gÂ_mask
 & 
__GFP_HIGHMEM
){

198 
avoid_gcc_com∂aö
 =

199 –
∑ge
 = (*)
	`__rmquíe
(&
z⁄e_highmem
, 
‹dî
) ) ||

200 –
∑ge
 = (*)
	`__rmquíe
(&
z⁄e_n‹mÆ
, 
‹dî
) ) ||

201 –
∑ge
 = (*)
	`__rmquíe
(&
z⁄e_dma
, 
‹dî
) ) ;

204 
avoid_gcc_com∂aö
 =

205 –
∑ge
 = (*)
	`__rmquíe
(&
z⁄e_n‹mÆ
, 
‹dî
) ) ||

206 –
∑ge
 = (*)
	`__rmquíe
(&
z⁄e_dma
, 
‹dî
) ) ;

208 
	`as£π
(
∑ge
);

209 if(
gÂ_mask
 & 
__GFP_ZERO
){

210 
µg
 = 
∑ge
 - 
mem_m≠
;

211 *
vaddr
 = (*)
	`KV
(
µg
 << 12);

212 
	`mem£t
(
vaddr
, 0, 4096<<
‹dî
);

214 
∑ge
->
_cou¡
 = 1;

215  
∑ge
;

216 
	}
}

	@net/core/dev.c

1 
	~<löux/√tdevi˚.h
>

2 
	~<löux/myli°.h
>

3 
	~<utûs.h
>

4 
	~<löux/if_ëhî.h
>

5 
	~<löux/byã‹dî/gíîic.h
>

6 
	~<√t/¨p.h
>

7 
	~<√t/ù.h
>

8 
	~<√t/t˝.h
>

9 
	#IN_WAKE_QUEUE
 1

	)

11 
	#YOUR_NIC_CNT
 4

	)

12 
√t_devi˚
 *
	g__Æl_your_nic
[
YOUR_NIC_CNT
];

14 
√t_devi˚
 * 
	$who_am_i
(
u8
 *
mac
){

15 
√t_devi˚
 *
this
;

16 
i
 = 0; i < 
YOUR_NIC_CNT
; i++){

17 if–(
this
 = 
__Æl_your_nic
[
i
]) &&

18 
	`memcmp
(
this
->
mac
, mac, 6) == 0 )

20  
this
;

24 
	}
}

26 
	$öfo_nic
(
√t_devi˚
 *
√tdev
){

28 
u8
 *
mac
 = 
√tdev
->mac;

29 
	sóx
 { 
u8
 
Æ
; u8 
ah
; u8 
AL
; u8 
AH
;};

30 
óx
 *
ù
 = (*)&
√tdev
->ip;

31 
	`›rötf
("mac: %x%x%x%x%x%x << *%x >>ù:%u.%u.%u.%u \n", 
mac
[0], mac[1], mac[2], mac[3], mac[4], mac[5],

32 &
√tdev
->
ù
,

33 
ù
->
AH
, ip->
AL
, ip->
ah
, ip->
Æ
);

35 
	}
}

36 
	$li°_nic
(){

37 
√t_devi˚
 *
this
;

38 
i
 = 0; i < 
YOUR_NIC_CNT
; i++){

39 if–(
this
 = 
__Æl_your_nic
[
i
]) ){

40 
	`›rötf
("nic[%u]: ", 
i
);

41 
	`öfo_nic
(
this
);

44 
	}
}

53 
√t_devi˚
 *
	$pick_nic
(
u32
 
de°_ù
, u32 
§c_ù
){

54 
	`as£π
(
de°_ù
 || 
§c_ù
);

55 
√t_devi˚
 *
this
;

56 
i
 = 0; i < 
YOUR_NIC_CNT
; i++){

57 if((
this
 = 
__Æl_your_nic
[
i
])){

58 if(
this
->
ù
 =
§c_ù
) Åhis;

61 if((
de°_ù
 & 
this
->
ùmask
Ë=—his->
ù
 &Åhis->ipmask)){

62  
this
;

68 
__óx
 *
óx
 = (*)&
de°_ù
;

69 
	`›rötf
("w™àtÿ%u.%u.%u.%u\n", 
óx
->
AH
,Éax->
AL
,Éax->
ah
,Éax->
Æ
);

70 
óx
 = (*)&
§c_ù
;

71 
	`›rötf
("‰om %u.%u.%u.%u\n", 
óx
->
AH
,Éax->
AL
,Éax->
ah
,Éax->
Æ
);

74 
	`as£π
(0 && "picÇic failed");

76 
	}
}

78 
	$ªgi°î_nic
(
√t_devi˚
 *
√tdev
){

79 
i
 = 0; i < 
YOUR_NIC_CNT
; i++){

80 if(!
__Æl_your_nic
[
i
]){

81 
__Æl_your_nic
[
i
] = 
√tdev
;

85 
	`as£π
(0);

86 
	}
}

88 
	$√t_öô
(){

89 
	`skbuff_öô
();

90 
	`¨p_öô
();

91 
	`ù_œyî_öô
();

92 
	`öô_t˝
();

93 
	}
}

99 
	$waôög_f‹_å™smô
(
sk_buff
 *
skb
){

101 
	`as£π
–
	`°i_Æªady
() );

102 
	`˛i
();

103 
boﬁ
 
tx_queue_em±y
 = !(boﬁ)
skb
->
dev
->
tx_queue
.
roŸ
;

104 
	`LL2_A
–&
skb
->
dev
->
tx_queue
, skb);

105 
	`°i
();

112 if(
tx_queue_em±y
Ë
	`nic_wake_queue
(
skb
->
dev
);

114 
skb
->
dev
->
debug
.
quick_ö£π
++;

124 
	}
}

139 
	$nic_wake_queue
(
√t_devi˚
 *
√tdev
){

140 
	`as£π
–
	`°i_Æªady
() );

146 
	`˛i
();

151 if–(
√tdev
->
Êags
 & 
IN_WAKE_QUEUE
Ë=1Ë 
	`°i
();

153 if(!
√tdev
->
tx_queue
.
roŸ
Ë 
	`°i
();

154 if(
√tdev
->
	`tx_busy
(netdev)) {

158  
	`°i
();

160 
√tdev
->
Êags
 |
IN_WAKE_QUEUE
;

161 
	`°i
();

163 
skb_queue
 *
li°
 = &
√tdev
->
tx_queue
;

164 
sk_buff
 * 
⁄e
;

167 
code
 = 0;

169 
√tdev
->
tx_cou¡
++;

171 
⁄e
 = 
li°
->
roŸ
;

173 
	`LL2_POP
(
li°
);

174 
	`˛i
();

175 
code
 = 
√tdev
->
	`°¨t_xmô
(
⁄e
,Çetdev);

176 if(
code
 =-1 || 
li°
->
roŸ
 == 0){

177 
√tdev
->
Êags
 &~
IN_WAKE_QUEUE
;

180 
	`°i
();

183 
	`°i
();

187 
	}
}

190 
	$¥o˚ss_rx_queue
–
√t_devi˚
 *
√tdev
){

191 
cou¡
 = 0;

192 
	`as£π
(
cou¡
 == 0);

193 
cou¡
++;

195 
skb_queue
 *
rx_queue
 = &
√tdev
->rx_queue;

196 
	`˛i
();

197 
rx_queue
->
roŸ
){

198 
sk_buff
 *
⁄e
 = 
rx_queue
->
roŸ
;

199 
	`LL2_POP
(
rx_queue
);

200 
	`°i
();

201  
	`¡ohs
(
⁄e
->
ëhhdr
->
¥Ÿocﬁ
) ){

202 
PROTOCOL_ARP
:

203 
	`¨p_œyî_ª˚ive
(
⁄e
);

205 
PROTOCOL_IP
:

206 
	`ù_œyî_ª˚ive
(
⁄e
);

209 
	`•ö
("ipv6 message");

211 
	`›rötf
("¥Ÿocﬁ id:%x , IGNORE It\n", 
	`¡ohs
(
⁄e
->
ëhhdr
->
¥Ÿocﬁ
) );

214 
	`˛i
();

216 
	`°i
();

217 
cou¡
--;

218 
	}
}

	@net/core/skbuff.c

1 
	~<utûs.h
>

2 
	~<löux/skbuff.h
>

3 
	~<löux/√tdevi˚.h
>

4 
	~<löux/if_ëhî.h
>

5 
	~<√t/¨p.h
>

6 
	~<löux/ù.h
>

7 
	~<löux/udp.h
>

8 
	~<löux/icmp.h
>

10 
¶ab_hód
 *
	gskbuff_ˇche
;

11 
	$skbuff_öô
(){

12 
skbuff_ˇche
 = 
	`kmem_ˇche_¸óã
("skbuff_ˇche", (
sk_buff
), 0,

13 
SLAB_HWCACHE_ALIGN
, 0, 0);

14 
	}
}

27 
sk_buff
 *
	$dev_Æloc_skb2
(
u32
 
msgty≥
, 
size_t
 
∑ylﬂd
){

28 
Àn
 = –
ëhhdr
);

29 
msgty≥
 & 0xffff){

31 
Àn
 +–
¨phdr
 );

34 
Àn
 +–
ùhdr
);

35 
msgty≥
 >> 24){

37 
Àn
 +–
udphdr
);

40 
msgty≥
 << 8 >> 24){

42 
Àn
 +–
icmpmsg_un
);

46 
Àn
 +–
icmpmsg_mask
);

50 
Àn
 +–
icmpmsg_t°amp
);

53 
	`•ö
("unknown icmpÅype");

56 
	`•ö
("unknown IPÅype");

59 
	`•ö
( "unknown mainÖrotocolÅype" );

62  
	`dev_Æloc_skb
–
Àn
 + 
∑ylﬂd
 );

63 
	}
}

71 
sk_buff
 * 
	$dev_Æloc_skb
–
pkgsize
 ){

72 
bufsize
 = 
pkgsize
 + 2;

73 
sk_buff
 *
skb
 = 
	`kmem_ˇche_Æloc
(
skbuff_ˇche
, 0);

74 
skb
->
d©a
 = 
	`kmÆloc2
–
bufsize
, 0 );

76 
skb
->
ëhhdr
 = (*)–skb->
d©a
 + 2 );

77 
skb
->
£c⁄d_hdr
 = (*)(skb->
ëhhdr
 + 1);

78 
skb
->
thúd_hdr
 = (*)(skb->
ùhdr
 + 1);

81 
skb
->
bufsize
 = bufsize;

82 
skb
->
pkgsize
 =Ökgsize;

83  
skb
;

84 
	}
}

86 
	$dev_‰ì_skb
–
sk_buff
 *
skb
){

88 
	`k‰ì2
(
skb
->
d©a
);

89 
	`kmem_ˇche_‰ì
–
skbuff_ˇche
, 
skb
 );

90 
	}
}

92 *
	$gë_ùty≥
(
ùhdr
 *iphdr){

93 
ùhdr
->
¥Ÿocﬁ
){

94 
PROTOCOL_ICMP
:

96 
PROTOCOL_UDP
:

98 
PROTOCOL_TCP
:

104 
	}
}

108 
	$öfo_skb
(
sk_buff
 *
skb
){

109 
	`›rötf
("@skb ");

110 
	`¡ohs
(
skb
->
ëhhdr
->
¥Ÿocﬁ
)){

111 
PROTOCOL_ARP
:

112 
	`›rötf
("ARP %s ==> %s\n",

113 
	`mk_ù°r
–
	`¡ohl
(
skb
->
¨phdr
->
myù
) ),

114 
	`mk_ù°r
–
	`¡ohl
(
skb
->
¨phdr
->
yourù
) ) );

116 
PROTOCOL_IP
:{

117 
	`›rötf
("IP(%s) %s ==> %s\n",

118 
	`gë_ùty≥
(
skb
->
ùhdr
),

119 
	`mk_ù°r
–
	`¡ohl
(
skb
->
ùhdr
->
myù
) ),

120 
	`mk_ù°r
–
	`¡ohl
(
skb
->
ùhdr
->
yourù
) )

125 
	`›rötf
("UNKNOWNÖrotocol\n");

128 
	}
}

	@net/core/testnet.c

1 
	~<löux/skbuff.h
>

2 
	~<löux/√tdevi˚.h
>

3 
	~<utûs.h
>

5 
	~<√t/¨p.h
>

6 
	$£nd_d©a
(*
d©a
){

7 
tŸÆ
 = 1;

8 
i
 = 0; i < 
tŸÆ
; i++){

12 
u32
 
yourù
 = 
	`MAKE_IP
(192, 168, 0, 22);

13 
	`¨p_öquúe
(
yourù
);

16 
	}
}

18 
ªgi°î_πl8139_drivî
();

19 
	$ã°√t
(){

21 
	`ªgi°î_πl8139_drivî
();

24 
	`li°_nic
();

26 
√t_devi˚
 *
√tdev
 = 
	`pick_nic
(0, 
	`MAKE_IP
(192,168,0,9));

27 
√t_devi˚
 *
√tdev2
 = 
	`pick_nic
(0, 
	`MAKE_IP
(192,168,1,9));

28 
√tdev
->
	`›í
(netdev);

29 
√tdev2
->
	`›í
(netdev2);

38 
d©a
[] = "thisÜine come fromÖapaya kernel";

40 
	`£nd_d©a
(
d©a
);

43 
	}
}

	@net/ipv4/arp.c

4 
	~<√t/¨p.h
>

5 
	~<löux/√tdevi˚.h
>

6 
	~<löux/¶ab.h
>

7 
	~<löux/byã‹dî/gíîic.h
>

8 
	~<utûs.h
>

9 
	~<löux/skbuff.h
>

10 
	~<löux/ù.h
>

12 
waôög_f‹_å™smô
(
sk_buff
 *
skb
);

20 
sk_buff
 **
	gœãr_down
;

21 
u8
 
	g__mac_brﬂdˇ°
[6] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff};

22 
u32
 
	g__loˇl_ù
 = 
MAKE_IP
(192, 168, 0, 9);

23 
	s¨p_ªc‹d
{

24 
u32
 
	mhis_ù
;

25 
	mhis_mac
[6];

26 
¨p_ªc‹d
 *
	m¥ev
, *
	m√xt
;

28 
	#ARP_TBL_LEN
 256

	)

29 
¨p_ªc‹d
 **
	g¨±bl
;

31 
	$¨p_öô
(){

32 
œãr_down
 = 
	`kmÆloc2
–4 * 
ARP_TBL_LEN
, 
__GFP_ZERO
);

33 
¨±bl
 = 
	`kmÆloc2
 (4 * 
ARP_TBL_LEN
, 
__GFP_ZERO
);

34 
	}
}

40 
	$öô_¨p_msg
(
sk_buff
 *
¨pmsg
, 
›î©i⁄
){

41 
¨phdr
 *¨phd∏
¨pmsg
->arphdr;

43 
¨pmsg
->
ëhhdr
->
¥Ÿocﬁ
 = 
	`ht⁄s
(0x0806);

45 
¨phdr
->
h¨dw¨e
 = 
	`ht⁄s
(1);

46 
¨phdr
->
¥Ÿocﬁ
 = 
	`ht⁄s
(0x0800);

47 
¨phdr
->
›î©i⁄
 = 
	`ht⁄s
(operation);

48 
¨phdr
->
haddr_Àn
 = 6;

49 
¨phdr
->
∑ddr_Àn
 = 4;

50 
	}
}

52 
u8
 *
	$¨p_lookup
(
u32
 
ù
){

53 
ödex
 = 
	`ùhash
(
ù
Ë% 
ARP_TBL_LEN
;

54 
¨p_ªc‹d
 * 
roŸ
 = 
¨±bl
[
ödex
];

55 
¨p_ªc‹d
 *
ô
 = 0;

56 
	`LL_SCAN_ON_KEY
(
roŸ
, 
his_ù
, 
ù
, 
ô
);

57 if(
ô
){

58  (
u8
*)
ô
->
his_mac
;

61 
	}
}

67 
¨p_ªc‹d
 * 
	$¨p_À¨n
(
u8
 *
comî_mac
, 
u32
 
comî_ù
){

68 
ödex
 = 
	`ùhash
(
comî_ù
 )% 
ARP_TBL_LEN
;

69 
¨p_ªc‹d
 *
ªc‹d
 = 
¨±bl
[
ödex
];

70 
ªc‹d
){

71 if–
ªc‹d
->
his_ù
 =
comî_ù
) ;

72 
ªc‹d
 =Ñec‹d->
√xt
;

75 if(
ªc‹d
){

76 
	`mem˝y
–
ªc‹d
->
his_mac
, 
comî_mac
, 6);

79 
ªc‹d
 = 
	`kmÆloc2
––
¨p_ªc‹d
), 0 );

80 
ªc‹d
->
his_ù
 = 
comî_ù
;

81 
	`mem˝y
–
ªc‹d
->
his_mac
, 
comî_mac
, 6);

83 
	`LL_I
–
¨±bl
[
ödex
], 
ªc‹d
);

90  
ªc‹d
;

91 
	}
}

94 
	$__¨p_öquúe
(
u32
 
yourù
, 
u8
 *
mymac
, u32 
myù
 ){

96 
sk_buff
 *
skb
 = 
	`dev_Æloc_skb2
( 0x0806, 0);

97 
	`öô_¨p_msg
(
skb
, 1, 
mymac
, 
myù
, 0, 
yourù
);

98 
	`waôög_f‹_å™smô
(
skb
);

99 
	}
}

103 
	$¨p_öquúe
(
u32
 
yourù
){

104 
√t_devi˚
 *
√tdev
 = 
	`pick_nic
(
yourù
, 0);

105 
	`as£π
(
√tdev
);

107 
sk_buff
 *
skb
 = 
	`dev_Æloc_skb2
( 0x0806, 0);

108 
¨phdr
 *¨phd∏
skb
->arphdr;

109 
	`öô_¨p_msg
(
skb
, 1);

110 
skb
->
dev
 = 
√tdev
;

111 
	`mem˝y
(
skb
->
ëhhdr
->
yourmac
, 
__mac_brﬂdˇ°
, 6);

112 
	`mem˝y
(
skb
->
ëhhdr
->
mymac
, 
√tdev
->
mac
, 6);

114 
	`mem£t
(
¨phdr
->
yourmac
, 0, 6);

115 
	`mem˝y
(
¨phdr
->
mymac
, 
√tdev
->
mac
, 6);

116 
¨phdr
->
yourù
 = 
	`ht⁄l
(yourip);

117 
¨phdr
->
myù
 = 
	`ht⁄l
(
√tdev
->
ù
);

119 
	`waôög_f‹_å™smô
(
skb
);

120 
	}
}

123 
	$¨p_ª•⁄d
(
sk_buff
 *
msg
){

124 
¨phdr
 *áΩhd∏
msg
->arphdr;

125 
ëhhdr
 *Éthhd∏
msg
->ethhdr;

126 
√t_devi˚
 *
√tdev
 = 
msg
->
dev
;

128 
	`¨p_À¨n
(
msg
->
¨phdr
->
mymac
, msg->¨phdr->
myù
);

130 
	`öô_¨p_msg
(
msg
, 2);

132 
	`mem˝y
(
ëhhdr
->
yourmac
, 
¨phdr
->
mymac
, 6);

133 
	`mem˝y
(
ëhhdr
->
mymac
, 
√tdev
->
mac
, 6);

135 
	`mem˝y
(
¨phdr
->
yourmac
, 
ëhhdr
->yourmac, 6);

136 
	`mem˝y
(
¨phdr
->
mymac
, 
√tdev
->
mac
, 6);

137 
¨phdr
->
yourù
 = 
	`ht⁄l
◊Ωhdr->
myù
);

139 
¨phdr
->
myù
 = 
	`ht⁄l
(
√tdev
->
ù
);

141 
	`waôög_f‹_å™smô
(
msg
);

142 
	}
}

145 
	$¨p_a˘
(
sk_buff
 *
skb
){

146 
¨phdr
 *¨phd∏
skb
->arphdr;

147 
	`as£π
(
¨phdr
->
›î©i⁄
 == 2 &&

148 
¨phdr
->
yourmac
[3] =
skb
->
dev
->
mac
[3]);

150 
¨p_ªc‹d
 * 
ªc‹d
 = 
	`¨p_À¨n
–
¨phdr
->
mymac
 ,¨phdr->
myù
);

152 
ödex
 = 
	`ùhash
(
ªc‹d
->
his_ù
 )% 
ARP_TBL_LEN
;

153 
sk_buff
 * 
waôög
 = 
œãr_down
[
ödex
];

155 
waôög
){

156 
	`›rötf
("$");

157 
sk_buff
 *
_√xt
 = 
waôög
->
√xt
;

158 if(
waôög
->
ùhdr
->
yourù
 =
	`ht⁄l
(
ªc‹d
->
his_ù
)){

160 
	`mem˝y
(
waôög
->
ëhhdr
->
yourmac
, 
ªc‹d
->
his_mac
, 6);

161 
	`˛i
();

162 
	`LL_DEL
(
œãr_down
[
ödex
], 
waôög
);

163 
	`°i
();

164 
	`waôög_f‹_å™smô
(
waôög
);

166 
waôög
 = 
_√xt
;

168 
	}
}

173 
	$¨p_down
(
sk_buff
 *
skb
){

174 
ùhdr
 * iphd∏
skb
->iphdr;

175 
yourù
 = 
	`¡ohl
(
ùhdr
->yourip);

178 
√t_devi˚
 * 
dev
 = 
skb
->dev;

179 
	`as£π
(
dev
);

181 
	`mem˝y
(
skb
->
ëhhdr
->
mymac
, skb->
dev
->
mac
, 6);

182 
skb
->
ëhhdr
->
¥Ÿocﬁ
 = 
	`ht⁄s
(0x0800);

185 
√xth›
;

186 if((
yourù
 & 
dev
->
ùmask
Ë=(dev->
ù
 & dev->ipmask)){

187 
√xth›
 = 
yourù
;

189 
√xth›
 = 
dev
->
g©eway_ù
;

191 
u8
 *
de°_mac
 = 
	`¨p_lookup
(
√xth›
);

192 if(
de°_mac
){

193 
	`mem˝y
(
skb
->
ëhhdr
->
yourmac
, 
de°_mac
, 6);

194 
	`waôög_f‹_å™smô
(
skb
);

197 
	`›rötf
("[!]\n");

198 
	`˛i
();

199 
ödex
 = 
	`ùhash
(
yourù
 )% 
ARP_TBL_LEN
;

201 
	`LL_I
–
œãr_down
[
ödex
], 
skb
);

202 
	`°i
();

203 
	`¨p_öquúe
(
yourù
);

205 
	}
}

209 
	$¨p_œyî_ª˚ive
–
sk_buff
 *
comî_skb
 ){

210 
	`as£π
(
comî_skb
->
pkgsize
 = 14 + 28);

212 
¨phdr
 *¨phd∏(*)(
comî_skb
->
ëhhdr
 + 1);

213 
comî_skb
->
¨phdr
 =árphdr;

216 
	`BYTE_ENDIAN_FLIP2
(
¨phdr
->
h¨dw¨e
);

217 
	`BYTE_ENDIAN_FLIP2
(
¨phdr
->
¥Ÿocﬁ
);

218 
	`BYTE_ENDIAN_FLIP2
(
¨phdr
->
›î©i⁄
);

219 
	`BYTE_ENDIAN_FLIP4
(
¨phdr
->
myù
);

220 
	`BYTE_ENDIAN_FLIP4
(
¨phdr
->
yourù
);

225 if(
¨phdr
->
›î©i⁄
 == 1){

226 
	`¨p_ª•⁄d
(
comî_skb
);

228 if(
¨phdr
->
›î©i⁄
 == 2){

229 
	`¨p_a˘
(
comî_skb
);

231 
	`•ö
("unknown operation");

234 
	}
}

	@net/ipv4/icmp.c

2 
	~<√t/icmp.h
>

3 
	~<utûs.h
>

4 
	~<löux/skbuff.h
>

5 
	~<löux/byã‹dî/gíîic.h
>

7 
sk_buff
 *
	gexam∂e
;

8 
icmp_down
(
sk_buff
 *
skb
, 
u32
 
de°_ù
, u32 
§c_ù
);

9 
icmp_echo_down
(
sk_buff
 *
skb
);

10 
	$icmp_echo
(
u32
 
de°_ù
){

13 
sk_buff
 *
baby
 = 
	`dev_Æloc_skb
(70);

15 
icmphdr
 * icmphd∏
baby
->icmphdr;

16 
icmphdr
->
ty≥
 = 
ICMP_ECHO
;

17 
icmphdr
->
subty≥
 = 0;

18 
icmphdr
->
d©a
.
dw‹d
[0] = 
	`__RDTSC_U
();

19 
	`icmp_down
(
baby
, 
de°_ù
, 0);

20 
	}
}

22 
	$icmp_ª˚ive
(
sk_buff
 *
comî
){

23 
icmphdr
 *
hdr
 = 
comî
->icmphdr;

24 
	`›rötf
("@ICMPÅy≥: %u, subty≥: %u\n", 
hdr
->
ty≥
, hdr->
subty≥
);

25 
icmp_Àn
 = 
	`IP_PAYLOAD_LEN
(
comî
->
ùhdr
);

26 
u16
 
checksum
 = 
	`¸c16_compuã_be
(
hdr
, 
icmp_Àn
);

27 if((
u16
)~
checksum
Ë
	`•ö
("ICMP CRC16 check failed");

28 
hdr
->
ty≥
){

29 
ICMP_ECHO
:{

30 
hdr
->
ty≥
 = 
ICMP_ECHOREPLY
;

31 
exam∂e
 = 
comî
;

32 
	`icmp_echo_down
(
comî
);

33 
	`icmp_echo
(
	`MAKE_IP
(192, 168, 1, 1));

38 
ICMP_ECHOREPLY
:{

39 
u32
 
now
 = 
	`__RDTSC_U
();

40 
__óx
 *
óx
 = (*)&
comî
->
ùhdr
->
myù
;

41 
	`›rötf
("echoÑeply from : %u.%u.%u.%u,Åime cost :%u\n",

42 
óx
->
AH
,Éax->
AL
,Éax->
ah
,Éax->
Æ
,

43 
hdr
->
d©a
.
dw‹d
[0] - 
now
);

47 
	`›rötf
("ignore it..");

50 
	}
}

52 
	$icmp_down
(
sk_buff
 *
skb
, 
u32
 
de°_ù
, u32 
§c_ù
){

53 
	`¸c16_wrôe_be
(
skb
->
icmphdr
, skb->
pkgsize
 - 14 - 20, &skb->icmphdr->
checksum
);

54 
	`ù_down
(
skb
, 
PROTOCOL_ICMP
, 
de°_ù
, 
§c_ù
, 64);

55 
	}
}

57 
	$icmp_echo_down
(
sk_buff
 *
skb
){

58 
	`¸c16_wrôe_be
(
skb
->
icmphdr
, 
	`IP_PAYLOAD_LEN
(skb->
ùhdr
), &skb->icmphdr->
checksum
);

59 
	`ù_echo_down
(
skb
, 
PROTOCOL_ICMP
, 64);

61 
	}
}

	@net/ipv4/ip.c

1 
	~<löux/ù.h
>

2 
	~<löux/if_ëhî.h
>

3 
	~<löux/skbuff.h
>

4 
	~<löux/√tdevi˚.h
>

5 
	~<utûs.h
>

6 
	~<löux/myli°.h
>

7 
	~<löux/byã‹dî/gíîic.h
>

8 
	~<√t/¨p.h
>

9 
	~<√t/icmp.h
>

10 
	~<√t/t˝.h
>

11 
	~<√t/udp.h
>

13 
	#FRAG_BEGIN
 1

	)

14 
	#FRAG_MID
 2

	)

15 
	#FRAG_END
 3

	)

22 
ölöe
 
	$is_‰agmít
(
ùhdr
 *iphdr){

23 if(!
ùhdr
->
Êag_mf
 && iphdr->
me_off£t
 == 0)  0;

24 if(
ùhdr
->
me_off£t
 =0 && iphdr->
Êag_mf
Ë 
FRAG_BEGIN
;

25 if(
ùhdr
->
me_off£t
 && !ùhdr->
Êag_mf
Ë 
FRAG_END
;

26  
FRAG_MID
;

27 
	}
}

29 
	#FRAG_OFFSET
(
ùhdr
Ë((ùhdr)->
me_off£t
 << 3)

	)

33 
	#IP_ORIGIN_SIZE
(
‰ag_íd
) \

34 –(
‰ag_íd
)->
me_off£t
 * 8 + (‰ag_íd)->
tŸ_Àn
)

	)

37 
	#IPHDR_FLIP
(
ùhdr
) \

39 
	`BYTE_ENDIAN_FLIP2
((
ùhdr
)->
tŸ_Àn
); \

40 
	`BYTE_ENDIAN_FLIP2
((
ùhdr
)->
msgid
); \

41 
	`BYTE_ENDIAN_FLIP2
((
ùhdr
)->
Êag_off
); \

42 
	`BYTE_ENDIAN_FLIP2
(
ùhdr
->
chksum
); \

43 
	`BYTE_ENDIAN_FLIP4
((
ùhdr
)->
myù
); \

44 
	`BYTE_ENDIAN_FLIP4
((
ùhdr
)->
yourù
); \

45 }0)

	)

53 
sk_buff
 **
	gcﬁÀ˘‹
;

54 
	#FRAG_TBL_LEN
 128

	)

56 
ù_up
(
sk_buff
 *
skb
);

57 
sk_buff
 *
ù_ad›t_⁄e
(sk_buf‡*
skb
);

58 
sk_buff
 * 
ù_ªas£mbÀ
(sk_buf‡*
group_hód
);

59 
sk_buff
 *
ù_‰agmít
(sk_buf‡*
‹gö
);

61 
	$ù_œyî_öô
(){

62 
cﬁÀ˘‹
 = 
	`°©ic_Æloc
((*), 
FRAG_TBL_LEN
);

63 
	}
}

68 
	$ù_œyî_ª˚ive
(
sk_buff
 *
skb
){

69 
ùhdr
 *ùhd∏
skb
->iphdr;

70 
	`as£π
(
ùhdr
->
vîsi⁄
 =4 && iphdr->
Àn
 == 5);

72 
u16
 
checksum
 = 
	`¸c16_compuã_be
(
ùhdr
, 20);

73 if((
u16
)~
checksum
 !0Ë
	`•ö
("crc check failed");

75 
	`IPHDR_FLIP
(
ùhdr
);

78 if–
	`is_‰agmít
(
skb
->
ùhdr
)){

79 
sk_buff
 *
group_hód
 = 
	`ù_ad›t_⁄e
(
skb
);

80 
	`as£π
(
group_hód
);

81 if(
group_hód
->
ùhdr
->
Êag_mf
 =
Ál£
 &&

82 
group_hód
->
gŸsize
 + 
IPHDR_LEN
 =
	`IP_ORIGIN_SIZE
(group_hód->
ùhdr
))

84 
skb
 = 
	`ù_ªas£mbÀ
(
group_hód
);

87 
	`›rötf
("+");

92 
	`ù_up
(
skb
);

94 
	}
}

101 
	$__ù_down
(
sk_buff
 *
skb
, 
u8
 
me_¥Ÿocﬁ
, u8 
âl
){

103 
ùhdr
 *ùhd∏
skb
->iphdr;

104 
√t_devi˚
 *
nic
 = 
	`pick_nic
(
ùhdr
->
yourù
, iphdr->
myù
);

105 
skb
->
dev
 = 
nic
;

106 
ùhdr
->
myù
 = 
nic
->
ù
;

108 
ùhdr
->
¥Ÿocﬁ
 = 
me_¥Ÿocﬁ
;

110 
ùhdr
->
âl
 =Åtl;

112 if(
ùhdr
->
tŸ_Àn
 < 1486){

113 
	`IPHDR_FLIP
(
ùhdr
);

114 
	`¸c16_wrôe_be
(
ùhdr
, 
IPHDR_LEN
, &ùhdr->
chksum
);

115 
	`¨p_down
(
skb
);

118 
	`as£π
(" > MTU ");

120 
sk_buff
 *
group_hód
 = 
	`ù_‰agmít
(
skb
);

122 
li°_hód
 *
cuº
 = &
group_hód
->
node
;

123 *
begö
 = 
cuº
;

125 
sk_buff
 *
‰ag
 = 
	`MB2STRU
(sk_buff, 
cuº
, 
node
);

126 
√t_devi˚
 *
nic
 = 
	`pick_nic
(
‰ag
->
ùhdr
->
yourù
, føg->ùhdr->
myù
);

127 
‰ag
->
ùhdr
->
myù
 = 
nic
->
ù
;

128 
	`¨p_down
(
‰ag
);

129 
cuº
 = cuº->
√xt
;

130 }
cuº
 !
begö
);

133 
	}
}

141 
	$ù_down
(
sk_buff
 *
skb
, 
u8
 
me_¥Ÿocﬁ
,

142 
u32
 
de°_ù
, u32 
§c_ù
,

143 
u8
 
âl
){

145 
ùhdr
 *ùhd∏
skb
->iphdr;

146 
ùhdr
->
vîsi⁄
 = 4;

147 
ùhdr
->
Àn
 = 5;

148 
ùhdr
->
ign‹e
 = 0;

149 
ùhdr
->
Êag_off
 = 0;

150 
ùhdr
->
tŸ_Àn
 = 
skb
->
pkgsize
 - 
ETHHDR_LEN
;

151 
ùhdr
->
myù
 = 
§c_ù
;

152 
ùhdr
->
yourù
 = 
de°_ù
;

153  
	`__ù_down
(
skb
, 
me_¥Ÿocﬁ
, 
âl
);

154 
	}
}

156 
	$ù_echo_down
(
sk_buff
 *
skb
, 
u8
 
me_¥Ÿocﬁ
, u8 
âl
){

157 
ùhdr
 *ùhd∏
skb
->iphdr;

158 
	`EXCHG_U32
(
ùhdr
->
myù
, iphdr->
yourù
);

159  
	`__ù_down
(
skb
, 
me_¥Ÿocﬁ
, 
âl
);

160 
	}
}

165 
sk_buff
 *
	$ù_‰agmít
(
sk_buff
 *
‹igö
){

166 
__óx
 *
óx
 = (*)&
‹igö
->
ùhdr
->
yourù
;

167 
	`›rötf
("w™àtÿ%u.%u.%u.%u\n", 
óx
->
AH
,Éax->
AL
,Éax->
ah
,Éax->
Æ
);

168 
	`as£π
(0 && "ip fragment spin");

170 
	}
}

174 
sk_buff
 * 
	$ù_ªas£mbÀ
(
sk_buff
 *
group_hód
){

175 
	`as£π
(
	`is_‰agmít
(
group_hód
->
ùhdr
Ë=
FRAG_END
);

177 
ùhdr
 *ùhd∏
group_hód
->iphdr;

178 
tŸ_Àn
 = 
	`IP_ORIGIN_SIZE
(
ùhdr
);

179 
sk_buff
 *
‹igö_skb
 = 
	`dev_Æloc_skb
(
tŸ_Àn
 + 
ETHHDR_LEN
);

180 
ödex
 = 
	`ùhash
(
ùhdr
->
myù
Ë% 
FRAG_TBL_LEN
;

182 
	`as£π
(
	`°i_Æªady
());

183 
	`˛i
();

184 
	`LL_CHECK
(
cﬁÀ˘‹
[
ödex
], 
group_hód
);

185 
	`LL_DEL
(
cﬁÀ˘‹
[
ödex
], 
group_hód
);

186 
	`°i
();

190 
	`mem˝y
(
‹igö_skb
->
ëhhdr
, 
group_hód
->ëhhdr, 
ETHHDR_LEN
 + 
IPHDR_LEN
);

192 
li°_hód
 *
cuº
 = &
group_hód
->
node
;

193 *
°¨t
 = 
cuº
;

195 
sk_buff
 *
skb
 = 
	`MB2STRU
(sk_buff, 
cuº
, 
node
);

196 
	`›rötf
("c›y føgmíàtÿ..,Üí:%x\n", 
	`IP_PAYLOAD_LEN
(
skb
->
ùhdr
));

197 
	`mem˝y
(

198 (*)
‹igö_skb
->
thúd_hdr
 + 
	`FRAG_OFFSET
(
skb
->
ùhdr
),

199 
skb
->
thúd_hdr
,

200 
	`IP_PAYLOAD_LEN
(
skb
->
ùhdr
)

202 
cuº
 = cuº->
√xt
;

205 }
cuº
 !
°¨t
);

207 
‹igö_skb
->
ùhdr
->
me_off£t
 = 0;

208 
‹igö_skb
->
ùhdr
->
tŸ_Àn
 =Åot_len;

209  
‹igö_skb
;

210 
	}
}

212 
	$ù_up
(
sk_buff
 *
skb
){

213 
ùhdr
 *ùhd∏
skb
->iphdr;

214 
ùhdr
->
¥Ÿocﬁ
){

216 
	`icmp_ª˚ive
(
skb
);

219 
	`›rötf
("@IGMP\n");

221 
PROTOCOL_TCP
:{

222 
p£udo_hdr
 *

223 
p£udo_hdr
 = 
	`kmÆloc2
((pseudo_hdr), 0);

224 
p£udo_hdr
->
myù
 = 
	`ht⁄l
(
ùhdr
->myip);

225 
p£udo_hdr
->
yourù
 = 
	`ht⁄l
(
ùhdr
->yourip);

226 
p£udo_hdr
->
zîo
 = 0;

227 
p£udo_hdr
->
¥Ÿocﬁ
 = 
ùhdr
->protocol;

228 
p£udo_hdr
->
∑ylﬂd_Àn
 = 
	`ht⁄s
(
	`IP_PAYLOAD_LEN
(
ùhdr
));

229 
skb
->
p£udo_hdr
 =Öseudo_hdr;

230 
	`t˝_œyî_ªcv
(
skb
);

234 
	`udp_œyî_ª˚ive
(
skb
);

237 
	`›rötf
("unknow¿¥Ÿocﬁ: %u\n", 
ùhdr
->
¥Ÿocﬁ
);

238 
	`•ö
("spin");

241 
	}
}

248 
sk_buff
 *
	$ù_ad›t_⁄e
(
sk_buff
 *
skb
){

249 
	`as£π
(
skb
->
ùhdr
->
me_off£t
 | skb->ùhdr->
Êag_mf
);

250 
ùhdr
 *ùhd∏
skb
->iphdr;

251 
§c_ù
 = 
ùhdr
->
myù
;

253 
sk_buff
 *
group_hód
 = 0;

254 
ödex
 = 
	`ùhash
(
§c_ù
 ) % 
FRAG_TBL_LEN
;

255 
	`LL_SCAN_ON_KEY
(
cﬁÀ˘‹
[
ödex
], 
ùhdr
->
msgid
, iphdr->msgid, 
group_hód
);

258 if(!
group_hód
){

259 
	`LL_I
(
cﬁÀ˘‹
[
ödex
], 
skb
);

260 
	`INIT_LIST_HEAD
(&
skb
->
node
);

261 
skb
->
gŸsize
 = 
	`IP_PAYLOAD_LEN
(skb->
ùhdr
);

262 
	`›rötf
("no friend found, insertás first one. justÑeturn\n");

263  
skb
;

265 
	`›rötf
("see? findá friend");

267 
	`li°_add
–&
skb
->
node
, &
group_hód
->node);

268 if(!
ùhdr
->
Êag_mf
){

269 
	`LL_REPLACE
(
cﬁÀ˘‹
[
ödex
], 
group_hód
, 
skb
);

270 
	`as£π
("meetÅhe final one,Ñeplace done\n");

271 
skb
->
gŸsize
 = 
group_hód
->gotsize;

272 
group_hód
 = 
skb
;

274 
group_hód
->
gŸsize
 +
	`IP_PAYLOAD_LEN
(
skb
->
ùhdr
);

275  
group_hód
;

276 
	}
}

	@net/ipv4/tcp.cn

7 
	~<√t/t˝.h
>

8 
	~<löux/skbuff.h
>

9 
	~<√t/ù.h
>

10 
	~<löux/byã‹dî/gíîic.h
>

11 
	~<utûs.h
>

12 
	~<asm/bô.h
>

13 
	~<löux/timî.h
>

14 
	#TCP_PAYLOAD_LEN
(
skb
Ë(
	`IP_PAYLOAD_LEN
((skb)->
ùhdr
Ë- (skb)->
t˝hdr
->
Àn
 * 4)

	)

15 
	#ETHHDR_LEN
 14

16 

	)

17 #deföêÊåáÈíàÊé®Áßª(
±r
, 
byãs
)Ötr = (*)(()(ptr) + bytes)

18 #deföêÁâáÂ∞æÂ∫èÂè∑(
skb
Ë((skb)->
t˝hdr
->
£q
 + 
TCP_PAYLOAD_LEN
(skb) - 1)

20 
	mTCP_OPT_EOL
,

21 
	mTCP_OPT_NOP
,

22 
	mTCP_OPT_MSS
,

23 
	mTCP_OPT_WNDSCL
,

24 
	mTCP_OPT_SACK_PERMIT
,

25 
	mTCP_OPT_SACK
,

26 
	mTCP_OPT_TSTAMP
 = 8,

27 
	mTCP_OPT_UTO
 = 28,

28 
	mTCP_OPT_AO
 = 29

41 
ölöe
 
	$l_ö_L
(
l_°¨t
, 
Àn
, 
L_°¨t
, 
LEN
){

42 ÁâáÈ¶ñÂÅèÁßª = 
l_°¨t
 - 
L_°¨t
;

43 ÁâáÂ∞æÂÅèÁßª = ÁâáÈ¶ñÂÅèÁßª + 
Àn
 - 1;

45 if(ÁâáÂ∞æÂÅèÁßª < 
LEN
)  0;

53 
	}
}

54 
ölöe
 ÊåáÈíàÈó¥Ë∑ù(*
	g±r1
, *
	g±r2
){

55 
	gdi°™˚
 = (
u32
)
±r2
 - (u32)
±r1
;

56 
as£π
(
di°™˚
 >= 0 && "argument order should be flipped");

57  
	gdi°™˚
;

60 
u32
 
	gMY_WND_SIZE
 = 0x100000;

61 
u16
 
	gMY_MSS
 = 1460;

64 ÂèëËµ∑ËÄÖ
	m_
Á≠âÂæÖÁ°ÆËÆ§,

65 Â∫îÁ≠îËÄÖ
	m_
Á≠âÂæÖÁ°ÆËÆ§,

67 ÂëäÈÄÄËÄÖ
	m_
Á≠âÂæÖÁ°ÆËÆ§,

68 ÂêéÈÄÄËÄÖ
	m_
Á≠âÂæÖÁ°ÆËÆ§,

69 ÂëäÈÄÄËÄÖ
	m_
‰øùÁïô‰æ¶Âê¨

71 #¥agm®
∑ck
(
push
)

72 #¥agm®
∑ck
(1)

73 #¥agm®
∑ck
(
p›
)

76 
	sªcv_wnd
{

77 
u16
 
	msize
;

78 
u8
 
	msˇÀ
;

82 
	mªÆsize
;

84 
sk_buff
 *
	mfú°
;

87 
sk_buff
 *
	mto_ack
;

91 
u32
 
	mÀ·
;

93 
timî
 *
	mtimî
;

95 
	s£nd_wnd
{

96 
u16
 
	msize
;

97 
	msˇÀ
;

98 
	mªÆsize
;

99 
u32
 
	mÀ·
;

101 
	sc⁄√˘
{

102 
u32
 
	mmyù
;

103 
u32
 
	mhisù
;

104 
u16
 
	mmyp‹t
;

105 
u16
 
	mhi•‹t
;

106 
	m°©e
;

107 
u32
 
	m£q_gŸ
;

108 
u32
 
	m£q_out
;

109 
u32
 
	mbyãs_gŸ
;

110 
u32
 
	mbyãs_out
;

111 
c⁄√˘
 *
	m√xt
;

112 
c⁄√˘
 *
	m¥ev
;

113 
ªcv_wnd
 
	mªcv_wnd
;

114 
£nd_wnd
 
	m£nd_wnd
;

115 
√t_devi˚
 *
	m√tdev
;

116 
u16
 
	mmax_£g_size
;

117 
boﬁ
 
	mßck_≥rmô
;

120 
boﬁ
 
	mt°amp_≥rmô
;

124 
	gc⁄√˘
 **ËøûÊé•Ë°®;

127 
	$t˝_ack_fö
(
c⁄√˘
 *c⁄√˘, 
sk_buff
 *
comî
){
	}
}

128 
do_ack
(*
_c⁄√˘
);

129 
sk_buff
 *

130 
¥ï¨e_acksyn
(
c⁄√˘
 * c⁄√˘, 
sk_buff
 *
comî
);

131 
c⁄√˘
 *

132 
__c⁄√˘i⁄_lookup
(
u32
 
hisù
, 
u16
 
hi•‹t
, u32 
myù
, u16 
myp‹t
);

133 
c⁄√˘
 *

134 
__c⁄√˘i⁄_¸óã
(
u32
 
hisù
, 
u16
 
hi•‹t
, u32 
myù
, u16 
myp‹t
);

136 
c⁄√˘
 * 
c⁄√˘i⁄_lookup
(
sk_buff
 * 
comî
);

137 
c⁄√˘
 * 
c⁄√˘i⁄_¸óã
(
sk_buff
 *
comî
);

139 
t˝_down
(
sk_buff
 *
skb
, 
u32
 
de°_ù
, u32 
§c_ù
);

140 
t˝_echo_down
(
sk_buff
 *
skb
);

141 
wnd_ad›t_⁄e
(
c⁄√˘
 *c⁄√˘, 
sk_buff
 *
⁄e
);

142 
t˝_dup_ack
(
c⁄√˘
 *c⁄√˘, 
sk_buff
 *
åiggî
);

143 
öô_c⁄√˘_wôh_syn
(
c⁄√˘
 *c⁄√˘, 
sk_buff
 *
comî
);

144 
t˝_checksum
(
sk_buff
 *
comî
);

147 
ölöe
 
boﬁ
 
	$öside_wödow
(
sk_buff
 *
skb
, 
ªcv_wnd
 *recv_wnd){

148 
u32
 ÁâáÈ¶ñÂ∫èÂè∑ = 
skb
->
t˝hdr
->
£q
;

149 ÁâáÈïøÂ∫¶ = 
	`TCP_PAYLOAD_LEN
(
skb
);

150  
	`l_ö_L
(ÁâáÈ¶ñÂ∫èÂè∑, ÁâáÈïøÂ∫¶, 
ªcv_wnd
->
À·
,Ñecv_wnd->
ªÆsize
);

151 
	}
}

153 
ölöe
 
boﬁ
 
	$waôög_f‹_ô
(
sk_buff
 *
ô
, 
c⁄√˘
 *connect){

154 if(!
ô
Ë 
Ál£
;

155 
sk_buff
 *
to_ack
 = 
c⁄√˘
->
ªcv_wnd
.to_ack;

156 if(
to_ack
){

157 if(
ô
->
t˝hdr
->
£q
 =
to_ack
->t˝hdr->£q + 
	`TCP_PAYLOAD_LEN
(to_ack)){

158  
åue
;

162 if(
ô
->
t˝hdr
->
£q
 =
c⁄√˘
->
ªcv_wnd
.
À·
Ë 
åue
;

164  
Ál£
;

165 
	}
}

167 
	$t˝_fö
(){

169 
	}
}

172 
	#TCPHDR_FLIP
(
t˝hdr
) \

174 
	`BYTE_ENDIAN_FLIP2
(
t˝hdr
->
myp‹t
); \

175 
	`BYTE_ENDIAN_FLIP2
(
t˝hdr
->
youΩ‹t
); \

176 
	`BYTE_ENDIAN_FLIP4
(
t˝hdr
->
£q
); \

177 
	`BYTE_ENDIAN_FLIP4
(
t˝hdr
->
ack
); \

178 
	`BYTE_ENDIAN_FLIP2
(
t˝hdr
->
wndsize
); \

179 
	`BYTE_ENDIAN_FLIP2
(
t˝hdr
->
chksum
); \

180 
	`BYTE_ENDIAN_FLIP2
(
t˝hdr
->
urg±r
); \

181 }0)

	)

183 
	$t˝_œyî_ªcv
(
sk_buff
 *
comî
){

184 
t˝hdr
 *t˝hd∏
comî
->tcphdr;

187 
	`t˝_checksum
(
comî
);

189 
	`TCPHDR_FLIP
(
t˝hdr
);

192 
c⁄√˘
 *c⁄√˘ = 
	`c⁄√˘i⁄_lookup
(
comî
);

193 
	`as£π
(
t˝hdr
->
Êag_r°
 == 0);

194 if(!
c⁄√˘
){

195 
c⁄√˘
 = 
	`c⁄√˘i⁄_¸óã
(
comî
);

196 if(
t˝hdr
->
Êags
 =
TCP_FLAG_SYN
){

197 
	`öô_c⁄√˘_wôh_syn
(
c⁄√˘
, 
comî
);

198 
c⁄√˘
->
t°amp_≥rmô
 = 
Ál£
;

200 
	`›rötf
("someoneÅry connecting me ");

201 
sk_buff
 *
ª∂y
 = 
	`¥ï¨e_acksyn
(
c⁄√˘
, 
comî
);

202 
	`t˝_echo_down
(
ª∂y
);

204 
c⁄√˘
->
°©e
 = Â∫îÁ≠îËÄÖ
_
Á≠âÂæÖÁ°ÆËÆ§;

205 
c⁄√˘
->
£q_out
 = 
t˝hdr
->
£q
;

206 
c⁄√˘
->
byãs_out
 = 1;

210 
ign‹e
;

213 if(
c⁄√˘
->
°©e
 == ËøûÊé•‰∏çÂ≠òÂú®){

214 
ign‹e
;

216 if(
c⁄√˘
->
°©e
 =ÂèëËµ∑ËÄÖ
_
Á≠âÂæÖÁ°ÆËÆ§){

217 if(
t˝hdr
->
ack
 =
c⁄√˘
->
£q_gŸ
 &&

218 
t˝hdr
->
Êags
 =(
TCP_FLAG_SYN
 | 
TCP_FLAG_ACK
) ){

226 
c⁄√˘
->
°©e
 = ËøûÊé•Â∑≤Âª∫Á´ã;

228 
ign‹e
;

230 if(
c⁄√˘
->
°©e
 =Â∫îÁ≠îËÄÖ
_
Á≠âÂæÖÁ°ÆËÆ§){

231 if(
t˝hdr
->
Êags
 =
TCP_FLAG_ACK
 &&

232 
c⁄√˘
->
£q_gŸ
 + c⁄√˘->
byãs_gŸ
 =
t˝hdr
->
£q
&&

233 
c⁄√˘
->
£q_out
 + c⁄√˘->
byãs_out
 =
t˝hdr
->
ack
){

235 
	`›rötf
("gotánáckÇow, i just sentánáck+syn\n");

236 
c⁄√˘
->
£q_gŸ
 = 
t˝hdr
->
£q
;

237 
c⁄√˘
->
byãs_gŸ
 = 0;

238 
c⁄√˘
->
°©e
 = ËøûÊé•Â∑≤Âª∫Á´ã;

240 
ign‹e
;

245 if(
c⁄√˘
->
°©e
 == ËøûÊé•Â∑≤Âª∫Á´ã){

246 if(!
t˝hdr
->
Êag_ack
Ë
ign‹e
;

247 if(
t˝hdr
->
Êags
 =
TCP_FLAG_FIN
){

249 
c⁄√˘
->
°©e
 = ÂêéÈÄÄËÄÖ
_
Á≠âÂæÖÁ°ÆËÆ§;

250 
	`t˝_ack_fö
(
c⁄√˘
, 
comî
);

253 if(
	`wnd_ad›t_⁄e
(
c⁄√˘
, 
comî
)){

254 if–
	`waôög_f‹_ô
(
comî
, 
c⁄√˘
) ){

255 
ªcv_wnd
 *
wödow
 = &
c⁄√˘
->recv_wnd;

256 
wödow
->
to_ack
 = 
comî
;

258  
	`waôög_f‹_ô
(
wödow
->
to_ack
->
√xt
, 
c⁄√˘
)){

259 
wödow
->
to_ack
 = wödow->to_ack->
√xt
;

262 if(
wödow
->
timî
->
°©e
 =
TIMER_STOPPED
){

263 
	`°¨t_mytimî
(
wödow
->
timî
);

269 
	`åiggî_mytimî
(
c⁄√˘
->
ªcv_wnd
.
timî
);

271 
	`t˝_dup_ack
(
c⁄√˘
, 
comî
);

275 
ign‹e
;

277 if(
c⁄√˘
->
°©e
 =ÂëäÈÄÄËÄÖ
_
Á≠âÂæÖÁ°ÆËÆ§){

278 if(
t˝hdr
->
Êag_ack
){

279 
c⁄√˘
->
°©e
 = ÂëäÈÄÄËÄÖ
_
‰øùÁïô‰æ¶Âê¨;

280 if(
t˝hdr
->
Êag_fö
){

282 
c⁄√˘
->
°©e
 = ËøûÊé•‰∏çÂ≠òÂú®;

285 
ign‹e
;

288 if(
c⁄√˘
->
°©e
 =ÂëäÈÄÄËÄÖ
_
‰øùÁïô‰æ¶Âê¨){

289 if(
t˝hdr
->
Êag_syn
){

291 
c⁄√˘
->
°©e
 = ËøûÊé•‰∏çÂ≠òÂú®;

293 
ign‹e
;

296 if(
c⁄√˘
->
°©e
 =ÂêéÈÄÄËÄÖ
_
Á≠âÂæÖÁ°ÆËÆ§){

297 if(
t˝hdr
->
Êags
 =
TCP_FLAG_ACK
){

298 
c⁄√˘
->
°©e
 = ËøûÊé•‰∏çÂ≠òÂú®;

300 
ign‹e
;

302 
	`as£π
(0);

305 
ign‹e
:

306 
	`›rötf
("@tcp-ignore ");

308 
	}
}

312 
	$¥öt_t˝msg
(
t˝hdr
 *
hdr
){

313 
	`›rötf
("t˝ mesßge, seq:%x,áck:%x\n", 
hdr
->
£q
, hdr->
ack
);

314 
	}
}

316 
c⁄√˘
 *

317 
	$__c⁄√˘i⁄_lookup
(
u32
 
hisù
, 
u16
 
hi•‹t
, u32 
myù
, u16 
myp‹t
){

318 
ödex
 = 
	`t˝hash
(
hisù
, 
hi•‹t
, 
myp‹t
) % ËøûÊé•Ë°®Èïø;

319 
c⁄√˘
 *
cuº
 = ËøûÊé•Ë°®[
ödex
];

320 
cuº
){

321 if(
cuº
->
hisù
 =hisù && cuº->
hi•‹t
 == hisport &&

322 
cuº
->
myù
 =myù && cuº->
myp‹t
 == myport)

323  
cuº
;

324 
cuº
 = cuº->
√xt
;

327 
	}
}

330 
c⁄√˘
 * 
	$c⁄√˘i⁄_lookup
(
sk_buff
 * 
comî
){

331  
	`__c⁄√˘i⁄_lookup
(
comî
->
ùhdr
->
myù
, comî->
t˝hdr
->
myp‹t
,

332 
comî
->
ùhdr
->
yourù
, comî->
t˝hdr
->
youΩ‹t
);

333 
	}
}

335 
c⁄√˘
 *

336 
	$__c⁄√˘i⁄_¸óã
(
u32
 
hisù
, 
u16
 
hi•‹t
, u32 
myù
, u16 
myp‹t
){

337 
ödex
 = 
	`t˝hash
(
hisù
, 
hi•‹t
, 
myp‹t
) % ËøûÊé•Ë°®Èïø;

338 
c⁄√˘
 *c⁄√˘ = 
	`kmÆloc2
( (connect), 0);

339 
c⁄√˘
->
myù
 = myip;

340 
c⁄√˘
->
hisù
 = hisip;

341 
c⁄√˘
->
hi•‹t
 = hisport;

342 
c⁄√˘
->
myp‹t
 = myport;

344 
c⁄√˘
->
°©e
 = ËøûÊé•‰∏çÂ≠òÂú®;

347 
ªcv_wnd
 *ªcv_wnd = &
c⁄√˘
->recv_wnd;

348 
ªcv_wnd
->
size
 = 
MY_WND_SIZE
 && 0Xffff;

349 
msb
 = 
	`__b§
(
MY_WND_SIZE
);

350 
ªcv_wnd
->
sˇÀ
 = 
msb
 > 15 ? msb - 15 : 0;

351 
ªcv_wnd
->
ªÆsize
 = 
MY_WND_SIZE
;

352 
ªcv_wnd
->
fú°
 =Ñecv_wnd->
to_ack
 = 0;

353 
ªcv_wnd
->
À·
 = 0;

354 
ªcv_wnd
->
timî
 = 
	`¸óã_mytimî
(200, 
do_ack
, 
c⁄√˘
);

357 
c⁄√˘
->
£q_out
 = 0;

358 
c⁄√˘
->
byãs_out
 = 0;

360 
	`LL_I
(ËøûÊé•Ë°®[
ödex
], 
c⁄√˘
);

361  
c⁄√˘
;

362 
	}
}

365 
c⁄√˘
 *

366 
	$c⁄√˘i⁄_¸óã
(
sk_buff
 *
comî
){

367  
	`__c⁄√˘i⁄_¸óã
(
comî
->
ùhdr
->
myù
, comî->
t˝hdr
->
myp‹t
,

368 
comî
->
ùhdr
->
yourù
, comî->
t˝hdr
->
youΩ‹t
);

369 
	}
}

371 
	$öô_t˝
(){

372 
	`as£π
–(
t˝hdr
) == 20);

373 ËøûÊé•Ë°® = 
	`°©ic_Æloc
( (*), ËøûÊé•Ë°®Èïø);

374 
	}
}

377 
	$t˝_ack_d©a
(
sk_buff
 *
comî
){

378 
t˝hdr
 *t˝hd∏
comî
->tcphdr;

379 
t˝hdr_Àn
 = 
t˝hdr
->
Àn
 * 4;

380 
√wù_Àn
 = 20 + 
t˝hdr_Àn
;

381 
comî
->
ùhdr
->
tŸ_Àn
 = 
√wù_Àn
;

382 
	}
}

384 
	$wnd_ad›t_⁄e
(
c⁄√˘
 *c⁄√˘, 
sk_buff
 *
⁄e
){

385 
ªcv_wnd
 *
wödow
 = &
c⁄√˘
->recv_wnd;

386 
t˝hdr
 *t˝hd∏
⁄e
->tcphdr;

387 Êù•ÁâáÈïøÂ∫¶ = 
	`TCP_PAYLOAD_LEN
(
⁄e
);

388 
u32
 Êù•ÁâáÈ¶ñÂ∫èÂè∑ = 
t˝hdr
->
£q
;

389 if–!
	`öside_wödow
(
⁄e
, 
wödow
ËË 
Ál£
;

391 if(!
wödow
->
fú°
){

392 
wödow
->
fú°
 = 
⁄e
;

395 
sk_buff
 * 
≠≥nd_©
 = 
wödow
->
to_ack
 ? window->to_ack

396 : 
wödow
->
fú°
;

397 
≠≥nd_©
){

398 
u32
 ËØ•ÁâáÂ∞æÂ∫èÂè∑ = ÁâáÂ∞æÂ∫èÂè∑(
≠≥nd_©
);

400 
sk_buff
 *‰∏ãÁâá = 
≠≥nd_©
->
√xt
;

402 
u32
 ‰∏ãÁâáÈ¶ñÂ∫èÂè∑ = ‰∏ãÁâá ? ‰∏ãÁâá->
t˝hdr
->
£q


403 : 
wödow
->
À·
 + wödow->
ªÆsize
;

408 
wôhö
 = 
	`l_ö_L
(Êù•ÁâáÈ¶ñÂ∫èÂè∑, Êù•ÁâáÈïøÂ∫¶, Èó¥ÈöôËµ∑Âßã, ‰∏§ÁâáÈó¥Èöô);

409 if(
wôhö
 =-1Ë 
Ál£
;

410 if(
wôhö
 == 0) {

411 
⁄e
->
√xt
 = ‰∏ãÁâá;

412 
⁄e
->
¥ev
 = 
≠≥nd_©
;

413 
≠≥nd_©
->
√xt
 = 
⁄e
;

414 if(‰∏ãÁâáË‰∏ãÁâá->
¥ev
 = 
⁄e
;

415  
åue
;

418 
≠≥nd_©
 = ‰∏ãÁâá;

421 
	`as£π
(0);

422  
Ál£
;

423 
	}
}

425 
	$t˝_dup_ack
(
c⁄√˘
 *c⁄√˘, 
sk_buff
 *
åiggî
){

426 
ªcv_wnd
 *ªcv_wnd = &
c⁄√˘
->recv_wnd;

428 
t˝hdr_Àn
 = 60;

429 
sk_buff
 *
skb
 = 
	`dev_Æloc_skb
(
ETHHDR_LEN
 + 
IPHDR_LEN
 + 
t˝hdr_Àn
);

430 
t˝hdr
 *Å˝hd∏
skb
->tcphdr;

431 
t˝hdr
->
myp‹t
 = 
c⁄√˘
->myport;

432 
t˝hdr
->
youΩ‹t
 = 
c⁄√˘
->
hi•‹t
;

433 
t˝hdr
->
£q
 = 
c⁄√˘
->
£q_out
 + c⁄√˘->
byãs_out
;

435 
t˝hdr
->
ack
 = 
c⁄√˘
->
£q_gŸ
 + c⁄√˘->
byãs_gŸ
;

436 
t˝hdr
->
Àn
 = 
t˝hdr_Àn
 / 4;

437 
t˝hdr
->
ªsv
 = 0;

438 
t˝hdr
->
Êags
 = 
TCP_FLAG_ACK
;

439 
t˝hdr
->
wndsize
 = 
ªcv_wnd
->
size
;

440 
t˝hdr
->
urg±r
 = 0;

442 
sk_buff
 *
°¨t
 = 
åiggî
;

443 
°¨t
){

444 if–ÁâáÂ∞æÂ∫èÂè∑(
°¨t
->
¥ev
Ë+ 1 =°¨t->¥ev->
t˝hdr
->
£q
 ){

445 
°¨t
 = sèπ->
¥ev
;

450 
sk_buff
 *
íd
 = 
åiggî
;

451 
íd
){

452 if–ÁâáÂ∞æÂ∫èÂè∑(
íd
Ë+ 1 =íd->
√xt
->
t˝hdr
->
£q
 ){

453 
íd
 =Énd->
√xt
;

458 
	`mem£t
(
skb
->
t˝hdr
->
›t_¨ó
, 
TCP_OPT_NOP
, 
t˝hdr_Àn
 - 20);

459 
t˝_›t
 *
›t
 = 
skb
->
t˝hdr
->
›t_¨ó
;

460 
›t
->
köd
 = 
TCP_OPT_SACK
;

461 
›t
->
Àn
 = 10;

462 
›t
->
d©a
.
dw‹d
[0] = 
	`¡ohl
(
°¨t
->
t˝hdr
->
£q
);

463 
›t
->
d©a
.
dw‹d
[1] = 
	`¡ohl
(ÁâáÂ∞æÂ∫èÂè∑(
íd
));

465 
	`t˝_down
(
skb
, 
c⁄√˘
->
hisù
, c⁄√˘->
myù
);

466 
	}
}

467 
	$do_ack
(*
_c⁄√˘
){

468 
c⁄√˘
 *c⁄√˘ = 
_c⁄√˘
;

469 
ªcv_wnd
 *ªcv_wnd = &
c⁄√˘
->recv_wnd;

470 
	`as£π
(
ªcv_wnd
->
to_ack
);

472 
sk_buff
 *
skb
 = 
	`dev_Æloc_skb
(
ETHHDR_LEN
 + 
IPHDR_LEN
 + 
TCPHDR_LEN
);

473 
t˝hdr
 *Å˝hd∏
skb
->tcphdr;

474 
t˝hdr
->
myp‹t
 = 
c⁄√˘
->myport;

475 
t˝hdr
->
youΩ‹t
 = 
c⁄√˘
->
hi•‹t
;

476 
t˝hdr
->
£q
 = 
c⁄√˘
->
£q_out
 + c⁄√˘->
byãs_out
;

478 
t˝hdr
->
ack
 = ÁâáÂ∞æÂ∫èÂè∑(
ªcv_wnd
->
to_ack
) + 1;

479 
t˝hdr
->
Àn
 = 20 / 4;

480 
t˝hdr
->
ªsv
 = 0;

481 
t˝hdr
->
Êags
 = 
TCP_FLAG_ACK
;

482 
t˝hdr
->
wndsize
 = 
ªcv_wnd
->
size
;

483 
t˝hdr
->
urg±r
 = 0;

485 
	`t˝_down
(
skb
, 
c⁄√˘
->
hisù
, c⁄√˘->
myù
);

488 
sk_buff
 *
to_ack
 = 
ªcv_wnd
->to_ack;

489 
ªcv_wnd
->
À·
 = ÁâáÂ∞æÂ∫èÂè∑(
to_ack
) + 1;

490 
ªcv_wnd
->
fú°
 = 
to_ack
->
√xt
;

491 
ªcv_wnd
->
to_ack
 = 0;

492 
	}
}

498 
	gt˝
‰∏ãÊ≤âÂÖ•Âè£(
sk_buff
 *
	gskb
){

499 
as£π
(
skb
->
p£udo_hdr
);

500 
t˝hdr
 *
	gt˝hdr
 = 
skb
->tcphdr;

502 
TCPHDR_FLIP
(
t˝hdr
);

504 
	gt˝hdr
->
	gchksum
 = 0;

505 
u32
 
	gsum1
 = 
¸c16_compuã_be
(
t˝hdr
, 
IP_PAYLOAD_LEN
(
skb
->
ùhdr
));

506 
u32
 
	gsum2
 = 
¸c16_compuã_be
(
skb
->
p£udo_hdr
, (pseudo_hdr));

507 
u32
 
	gchecksum
 = 
sum1
 + 
sum2
;

508 
u16
 
	gˇºy
 = 
checksum
 >> 16;

509 if(
	gˇºy
Ë
	gchecksum
 = 
ˇºy
 + (
checksum
 & 0xffff);

510 
	gt˝hdr
->
	gchksum
 = 
ht⁄s
(~
checksum
);

513 
	$t˝_down
(
sk_buff
 *
skb
, 
u32
 
de°_ù
, u32 
§c_ù
){

514 
t˝
‰∏ãÊ≤âÂÖ•Âè£(
skb
);

515  
	`ù_down
(
skb
, 
PROTOCOL_TCP
, 
de°_ù
, 
§c_ù
, 64);

516 
	}
}

517 
	$t˝_echo_down
(
sk_buff
 *
skb
){

519 
	`EXCHG_U16
(
skb
->
t˝hdr
->
youΩ‹t
, skb->t˝hdr->
myp‹t
);

520 
t˝
‰∏ãÊ≤âÂÖ•Âè£(
skb
);

521  
	`ù_echo_down
(
skb
, 
PROTOCOL_TCP
, 64);

522 
	}
}

527 
sk_buff
 *

528 
	$¥ï¨e_acksyn
(
c⁄√˘
 * c⁄√˘, 
sk_buff
 *
comî
){

529 
t˝hdr
 *t˝hd∏
comî
->tcphdr;

530 
	`as£π
(
t˝hdr
->
Àn
 > 
TCPHDR_LEN
 + 12);

533 
t˝hdr
->
£q
 = 
c⁄√˘
->
£q_out
 + c⁄√˘->
byãs_out
;

534 
t˝hdr
->
ack
 = 
c⁄√˘
->
£q_out
 + c⁄√˘->
byãs_gŸ
;

535 
t˝hdr
->
Êags
 = 
TCP_FLAG_ACK
 | 
TCP_FLAG_SYN
 ;

536 
t˝hdr
->
wndsize
 = 
c⁄√˘
->
ªcv_wnd
.
size
;

537 
t˝hdr
->
urg±r
 = 0;

541 
t˝_›t
 *
›t
 = 
t˝hdr
->
›t_¨ó
;

542 
›t
->
köd
 = 
TCP_OPT_MSS
;

543 
›t
->
Àn
 = 4;

544 
›t
->
d©a
.
w‹d
[0] = 
	`ht⁄s
(
c⁄√˘
->
max_£g_size
);

545 ÊåáÈíàÊé®Áßª(
›t
, o±->
Àn
);

547 
›t
->
köd
 = 
TCP_OPT_WNDSCL
;

548 
›t
->
Àn
 = 3;

549 
›t
->
d©a
.
byã
[0] = 
c⁄√˘
->
ªcv_wnd
.
sˇÀ
;

550 ÊåáÈíàÊé®Áßª(
›t
, o±->
Àn
);

552 
›t
->
köd
 = 
TCP_OPT_SACK_PERMIT
;

553 
›t
->
Àn
 = 2;

554 ÊåáÈíàÊé®Áßª(
›t
, o±->
Àn
);

556 
íd
 = ÊåáÈíàÈó¥Ë∑ù(
t˝hdr
->
›t_¨ó
, 
›t
);

557 
›t_¨ó_Àn
 = 
	`˚û_Æign
(
íd
, 4);

558 
i
 = 
íd
; i < 
›t_¨ó_Àn
; i++){

559 ((*)
t˝hdr
->
›t_¨ó
)[
i
] = 
TCP_OPT_NOP
;

561 
t˝hdr
->
Àn
 = (
TCPHDR_LEN
 + 
›t_¨ó_Àn
) / 4;

562  
comî
;

563 
	}
}

565 
	$öô_c⁄√˘_wôh_syn
(
c⁄√˘
 *c⁄√˘, 
sk_buff
 *
comî
){

566 
t˝hdr
 *Å˝hd∏
comî
->tcphdr;

568 
c⁄√˘
->
£q_gŸ
 = 
t˝hdr
->
£q
;

569 
c⁄√˘
->
byãs_gŸ
 = 1;

570 
c⁄√˘
->
£nd_wnd
.
size
 = 
t˝hdr
->
wndsize
;

575 
c⁄√˘
->
ßck_≥rmô
 = 
Ál£
;

576 
c⁄√˘
->
t°amp_≥rmô
 = 
Ál£
;

577 
c⁄√˘
->
£nd_wnd
.
sˇÀ
 = 0;

578 
c⁄√˘
->
max_£g_size
 = 
MY_MSS
;

580 
t˝_›t
 *
›t
 = 
t˝hdr
->
›t_¨ó
;

581 
›t
->
köd
 && ÊåáÈíàÈó¥Ë∑ù(›t, 
t˝hdr
->
›t_¨ó
Ë<Å˝hdr->
Àn
*4 - 
TCPHDR_LEN
){

582 
Àn
 = 
›t
->len;

583 
›t
->
köd
){

584 
TCP_OPT_NOP
:

585 
Àn
 = 1;

587 
TCP_OPT_MSS
:{

588 
	`as£π
(
Àn
 == 4);

589 
u16
 
his_mss
 = 
	`¡ohs
(*
›t
->
d©a
.
w‹d
);

590 if(
his_mss
 < 
MY_MSS
Ë
c⁄√˘
->
max_£g_size
 = his_mss;

593 
TCP_OPT_WNDSCL
:

594 
	`as£π
(
Àn
 == 3);

595 
c⁄√˘
->
£nd_wnd
.
sˇÀ
 = *
›t
->
d©a
.
byã
;

597 
TCP_OPT_SACK_PERMIT
:

598 
	`as£π
(
Àn
 == 2);

599 
c⁄√˘
->
ßck_≥rmô
 = 
åue
;

601 
TCP_OPT_TSTAMP
:

602 
c⁄√˘
->
ßck_≥rmô
 = 
åue
;

603 
	`as£π
(
Àn
 == 10);

605 
TCP_OPT_UTO
:

606 
	`as£π
(
Àn
 == 4);

608 
TCP_OPT_AO
:

611 
	`•ö
("unknown optionáppears in SYN segment");

613 
c⁄√˘
->
£nd_wnd
.
ªÆsize
 = c⁄√˘->£nd_wnd.
size
 <<

614 
c⁄√˘
->
£nd_wnd
.
sˇÀ
;

615 ÊåáÈíàÊé®Áßª(
›t
, 
Àn
);

617 
	}
}

619 
	$t˝_checksum
(
sk_buff
 *
comî
){

620 
t˝Àn
 = 
	`IP_PAYLOAD_LEN
(
comî
->
ùhdr
);

621 
checksum
 = 
	`¸c16_compuã_be
(
comî
->
t˝hdr
, 
t˝Àn
);

622 
checksum2
 = 
	`¸c16_compuã_be
(
comî
->
p£udo_hdr
, (pseudo_hdr));

623 
sum
 = 
checksum
 + 
checksum2
;

624 
sum
 = (sum & 0xffff) + (sum >> 16);

625 
	`as£π
(~
sum
);

627 
	}
}

	@net/ipv4/udp.c

1 
	~<di•.h
>

2 
	~<√t/udp.h
>

3 
	~<löux/skbuff.h
>

4 
	~<löux/byã‹dî/gíîic.h
>

6 
öfo_udpmsg
(
udphdr
 *udphdr);

9 
	#UDPHDR_BE_FLIP
(
udphdr
)\

11 
	`BYTE_ENDIAN_FLIP2
–(
udphdr
)->
myp‹t
 ); \

12 
	`BYTE_ENDIAN_FLIP2
–(
udphdr
)->
youΩ‹t
 ); \

13 
	`BYTE_ENDIAN_FLIP2
–(
udphdr
)->
tŸ_Àn
 ); \

14 
	`BYTE_ENDIAN_FLIP2
–(
udphdr
)->
chksum
 ); \

15 }0)

	)

18 
	$udp_œyî_ª˚ive
(
sk_buff
 *
comî
){

20 
	`UDPHDR_BE_FLIP
(
comî
->
udphdr
);

21 
	`öfo_udpmsg
(
comî
->
udphdr
);

22 
	}
}

24 
	$öfo_udpmsg
(
udphdr
 *udphdr){

25 
	`›rötf
("UDPÖ‹t(%xË==>Ö‹t(%xË", 
udphdr
->
myp‹t
, udphdr->
youΩ‹t
);

29 
	}
}

	@pmm.c

2 
	~<pmm.h
>

3 
	~<boŸöfo.h
>

4 
	~<utûs.h
>

8 
EMPTY_BLOCK
*
	gblock0
=(EMPTY_BLOCK*)
KV
(
HEAP_BASE
);

9 
	$hóp_öô
(){

10 
block0
->
size
=
HEAP_SIZE
-(
EMPTY_BLOCK
);

11 
	}
}

12 
	$öfo_hóp
(){

13 
block_id
=0;

14 
EMPTY_BLOCK
*
block
=
block0
;

15 
block
){

16 
	`›rötf
("%u(%x~%x)--->",
block_id
++,()
block
,
	`BLOCK_DATA_END
(block));

17 
block
=block->
√xt
;

19 
	}
}

20 *
	$kmÆloc
(
byã
){

21 if(
byã
+4 < (
EMPTY_BLOCK
))  0;

22 
ªÆ_byã
=
byã
+4;

23 
EMPTY_BLOCK
*
block
=
block0
;

24 
block
&&block->
size
<
ªÆ_byã
Ëblock=block->
√xt
;

25 
	`as£π
(
block
);

26 
ªÆ_Æloc
=
	`BLOCK_DATA_END
(
block
)-
ªÆ_byã
+1;

27 *(*)
ªÆ_Æloc
=
byã
;

28 
block
->
size
-=
ªÆ_byã
;

29 *
ªtu∫_Æloc
=(*)(
ªÆ_Æloc
+4);

32  
ªtu∫_Æloc
;

33 
	}
}

34 
	$k‰ì
(*
±
){

35 
ªÆ_u£d_addr
=()
±
-4;

36 
ªÆ_u£d_size
=*(*)(
ªÆ_u£d_addr
)+4;

38 
EMPTY_BLOCK
*
block
=
block0
;

39 
block
->
√xt
&&()block->√xt<
ªÆ_u£d_addr
) block=block->next;

40 if(
	`BLOCK_DATA_END
(
block
)+1==
ªÆ_u£d_addr
){

41 
block
->
size
+=
ªÆ_u£d_size
;

43 if(
	`BLOCK_DATA_END
(
block
)+1==()block->
√xt
){

44 
block
->
size
+=block->
√xt
->size+(
EMPTY_BLOCK
);

45 
	`dñ_node
(
block
->
√xt
);

49 
EMPTY_BLOCK
*
√w
=(EMPTY_BLOCK*)
ªÆ_u£d_addr
;

50 
√w
->
size
=
ªÆ_u£d_size
-(
EMPTY_BLOCK
);

51 if(()
block
->
√xt
==
ªÆ_u£d_addr
+
ªÆ_u£d_size
){

52 
√w
->
size
+=(
block
->
√xt
->size+(
EMPTY_BLOCK
));

53 
	`dñ_node
(
block
->
√xt
);

55 
EMPTY_BLOCK
*
√xt
=
block
->next;

56 
√w
->
¥ev
=
block
;

57 
block
->
√xt
=
√w
;

58 
√w
->
√xt
=next;

59 if(
√xt
Ë√xt->
¥ev
=
√w
;

61 
	}
}

62 
	$dñ_node
(
EMPTY_BLOCK
*
block
){

63 
EMPTY_BLOCK
*
¥ev
=
block
->prev;

64 
	`as£π
(
¥ev
);

65 
¥ev
->
√xt
=
block
->next;

66 if(
block
->
√xt
Ëblock->√xt->
¥ev
=prev;

67 
	}
}

68 
	$ö£π_a·î
(
EMPTY_BLOCK
*
mŸhî
,EMPTY_BLOCK*
block
){

69 
EMPTY_BLOCK
*
√xt
=
mŸhî
->next;

71 
block
->
¥ev
=
mŸhî
;

72 
mŸhî
->
√xt
=
block
;

73 if(
√xt
){

74 
√xt
->
¥ev
=
block
;

75 
block
->
√xt
=next;

77 
	}
}

79 * 
	$kmÆloc0
(
byãs
){

80 *
±r
 = 
	`kmÆloc
(
byãs
);

81 if(
±r
Ë
	`mem£t
’å, 0, 
byãs
);

82  
±r
;

83 
	}
}

	@proc.asm

1 ;
ERR
 
assuª
 
Æªady
 
íãr
 
	g∂aö
-
	gmod


2 %
	gö˛ude
 "utils.inc"

3 
globÆ
 
fúe_asm


4 
£À˘‹_∂aö_c3


5 
£À˘‹_∂aö_d3


6 
tss


7 
size_°ack‰ame


8 ;
fúe_asm
(
addr_pcb
);

10 [
£˘i⁄
 .
ãxt
]

11 
	gfúe_asm
:

12 
mov
 
e•
,[e•+4];
poöt
É• 
to
 
	gaddr_pcb
,
™d
 
ª£t
 
kî√l
 
°ack


13 
mov
 
	gebx
,[
size_°ack‰ame
]

14 
Àa
 
	góx
,[
e•
+
ebx
]

15 
mov
 
	gdw‹d
 [
tss
+
tss_e•0_off£t
],
	góx
;
	gpcb
.
	g°ack‰ame
.
bŸtom
 
ö
 
	gtss
.
	ge•0


16 ;
be
 
¥ï¨ed
 
√xt
 
	g˛ock
-
	göãºu±


18 ;
ªady
 
jump
 
to
 
rög3
 
™d
 
go
 
	gahód
,
£nd
 
™
 
EOI
 
	gnow
 ÂèëÈÄÅ‰∫Ü‰πüÊ≤°‰∫ãÂÑøÔºå‰∏ç
	gúëd
Ôºå8259AÁöÑ
	gúq
‰∏ä‰∏çÊù•

19 
mov
 
	gÆ
,20
h


20 
	gout
 20
	gh
,
Æ


22 
p›
 
gs


23 
p›
 
fs


24 
p›
 
es


25 
p›
 
ds


26 
p›ad


27 
add
 
	ge•
,4

29 
	gúëd


	@proc.c

1 
	~<asm_œbÀ.h
>

2 
	~<¥oc.h
>

3 
	~<scheduÀ.h
>

4 
	~<mm.h
>

5 
	~<utûs.h
>

6 
	~<scheduÀ.h
>

7 
	#PCB_MAGIC_NUMBER
 0xØbbccdd

	)

8 
	g£À˘‹_∂aö_d
[4]={()&
£À˘‹_∂aö_d0
,()&
£À˘‹_∂aö_d1
,0,()&
£À˘‹_∂aö_d3
};

9 
	g£À˘‹_∂aö_c
[4]={()&
£À˘‹_∂aö_c0
,()&
£À˘‹_∂aö_c1
,0,()&
£À˘‹_∂aö_c3
};

10 
	g__eÊags
=0x1200;

13 
	$öô_pcb
(
pcb
 *
baby
,
u32
 
addr
,
¥io
,
time_¶i˚
,*
p_«me
){

14 
u32
 
NEED_RESCHED_OFFSET
;

15 
off1
 = (
u32
)&
NEED_RESCHED_OFFSET
 ;

16 
off2
 = 
	`MEMBER_OFFSET
(
pcb
, 
√ed_ªsched
);

17 
	`as£π
(
off1
 =
off2
);

19 
baby
->
ªgs
.
ss
=(
£À˘‹_∂aö_d
[0]);

20 
baby
->
ªgs
.
e•
 = (
u32
)&(baby->regs);

22 
baby
->
ªgs
.
eÊags
=
__eÊags
;

23 
baby
->
ªgs
.
cs
=(
£À˘‹_∂aö_c
[0]);

24 
baby
->
ªgs
.
eù
=
addr
;

25 
baby
->
ªgs
.
gs
=baby->ªgs.
fs
=baby->ªgs.
es
=baby->ªgs.
ds
=(
£À˘‹_∂aö_d
[0]);

27 
baby
->
√ed_ªsched
 = 0;

28 
baby
->
sig≥ndög
 = 0;

29 
baby
->
¥io
=prio;

30 
baby
->
pid
 = 
	`Æloc_pid
(0);

31 
baby
->
time_¶i˚
=baby->
time_¶i˚_fuŒ
=time_slice;

32 
	`°∫˝y
(
baby
->
p_«me
,Ö_«me, 
P_NAME_MAX
);

34 
baby
->
thªad
.
e•
 = ()&baby->
ªgs
;

35 
baby
->
thªad
.
eù
 = ()
ª°‹e_Æl
;

36 
baby
->
fs
 = 
	`kmÆloc0
–(
fs_°ru˘
));

37 
baby
->
fûes
 = 
	`kmÆloc0
––
fûes_°ru˘
) );

38 
baby
->
fûes
->
fûï
 = baby->fûes->
‹igö_fûï
;

39 
baby
->
fûes
->
max_fds
 = (baby->fûes->
‹igö_fûï
) / 4;

40 
baby
->
æimôs
[
RLIMIT_NOFILE
].
cur
 = 512;

41 
baby
->
æimôs
[
RLIMIT_NOFILE
].
max
 = 1024;

42 
baby
->
f°ack
.
e•
 = -1;

43 
baby
->
magic
 = 
PCB_MAGIC_NUMBER
;

44 
baby
->
mm
 = 0;

45 
	`INIT_LIST_HEAD
(&
baby
->
siblög
);

46 
	`INIT_LIST_HEAD
(&
baby
->
chûdªn
);

47 
baby
->
mŸhî
 = baby->
m⁄ô‹
 = 0;

48 
	}
}

50 
pcb
 * 
	$¸óã_¥o˚ss
(
u32
 
addr
,
¥io
,
time_¶i˚
,*
p_«me
){

52 
pcb
 *
baby
 = (pcb*)
	`__Æloc_∑ges
(
__GFP_DEFAULT
,1);

53 
	`öô_pcb
(
baby
,
addr
,
¥io
,
time_¶i˚
,
p_«me
);

54 
	`›rötf
("√wÖro˚ss:babyáddr:%x\n",
baby
);

55 
	`LL_I_INCRE
(
li°_a˘ive
,
baby
,
¥io
);

57  
baby
;

58 
	}
}

60 
pcb
 *
	$gë_cuºít
(){

61 
pcb
 *
p
;

62 
__asm__
 
	`__vﬁ©ûe__
("™d»%%e•,%0":"Ù"(
p
):"0"(~8191));

63 if((*)
p
 < (*)0xc0000000 ||Ö->
magic
 !
PCB_MAGIC_NUMBER
){

64 
	`›rötf
("\¿© %x ", ()
p
);

65 
	`•ö
("get ill current");

67  
p
;

68 
	}
}

70 
	$¥oc_öô
(){

72 if((
pcb
)!=
PCB_SIZE
Ë
	`•ö
("structÖcb size wrong");

73 
	}
}

75 
	$pcb_öfo
(
pcb
 *
p
){

77 
	`›rötf
("p_«me:%†íåy:%xÖrio:%uÅime_¶i˚:%u\n",
p
->
p_«me
,p->
ªgs
.
eù
,p->
¥io
,p->
time_¶i˚
);

78 
	}
}

79 
	$fúe_thªad
(
pcb
 *
p
){

80 
	`as£π
(
p
->
mm
 == 0);

81 
boﬁ
 
èsk_avaûabÀ
;

82 
èsk_avaûabÀ
 = 
åue
;

84 
__asm__
 
	`__vﬁ©ûe__
(

88 :"r"(&
p
->
ªgs
)

90 
	}
}

99 
	$Æloc_pid
(
pid
){

100 
pid_‰esh
 = 0;

101 if(
pid
 >0 &&Öid !
pid_‰esh
Ë
	`•ö
("bad @pid");

102  
pid_‰esh
++;

103 
	}
}

105 
	$£t_pid
(
pid
, 
pcb
 *
p
){

106 
p
->
pid
 =Öid;

108 
	}
}

110 
	$put_fûes
(
fûes_°ru˘
 *
fûes
){

111 
fûes
->
cou¡
--;

112 if(
fûes
->
cou¡
 > 0) ;

115 if(
fûes
->
fûï
 !fûes->
‹igö_fûï
)

116 
	`k‰ì2
(
fûes
->
fûï
);

119 
i
 = 0; i < 
fûes
->
max_fds
; i++){

120 
fûe
 *fûê
fûes
->
fûï
[
i
];

121 if(
fûe
Ë
	`k_˛o£
(file);

124 
	`kmem_ˇche_‰ì
(
fûes_°ru˘_ˇche
, 
fûes
);

125 
	}
}

127 
	$put_fs
(
fs_°ru˘
 *
fs
){

128 
fs
->
cou¡
--;

129 if(
fs
->
cou¡
 > 0) ;

131 
	`m¡put
(
fs
->
pwdm¡
);

132 
	`m¡put
(
fs
->
roŸm¡
);

133 
	`dput
(
fs
->
pwd
);

134 
	`dput
(
fs
->
roŸ
);

136 
	`kmem_ˇche_‰ì
(
fs_°ru˘_ˇche
, 
fs
);

137 
	}
}

143 
	$ªÀa£_vm_¨ó
(
vm_¨ó
 *
vma
){

144 
löór_addr
 
vaddr
;

145 
mm
 *mm;

146 
±e
 *
pgdú
, *
pgtbl
;

147 
±e
 *
dúít
;

149 
mm
 = 
vma
->mm;

150 
pgdú
 = 
	`PGDIR_OF_MM
(
mm
);

152 
vaddr
.
vÆue
 = 
vma
->
°¨t
;

153 
pgtbl
 = 
	`±e2∑ge
(
pgdú
[
vaddr
.
dú_idx
]);

154 
vaddr
.
vÆue
 < 
vma
->
íd
){

155 
∑ge
 *
u£Ωage
;

156 
i
 = 
vaddr
.
tbl_idx
;

158 if(
pgtbl
[
i
].
vÆue
 =0Ë
_c⁄töue
;

159 
u£Ωage
 = 
	`±e2∑ge_t
–
pgtbl
[
i
] );

160 
	`put_∑ge
(
u£Ωage
);

162 
_c⁄töue
:

163 
vaddr
.
vÆue
 +
__4K
;

164 if((
vaddr
.
vÆue
 % 
__4M
) == 0){

165 
±e
 
¥ev
 = 
pgdú
[
vaddr
.
dú_idx
 - 1];

166 
	`put_∑ge
–
	`±e2∑ge_t
(
¥ev
) );

167 
dúít
 = 
pgdú
 + 
vaddr
.
dú_idx
;

168 
pgtbl
 = 
	`±e2∑ge
(*
dúít
);

171 
	`kmem_ˇche_‰ì
(
vm_¨ó_ˇche
, 
vma
);

173 
	}
}

177 
	$åy_ªÀa£_u£r_•a˚
(
mm
 *mm){

178 
vm_¨ó
 *
vma
, *
√xt
;

179 
	`as£π
(
mm
->
vma
);

180 if(
mm
->
u£rs
 > 1)  0;

182 
vma
 = 
mm
->vma;

184 
√xt
 = 
vma
->next;

185 
	`ªÀa£_vm_¨ó
(
vma
);

186 } 
√xt
 !
mm
->
vma
 && (vma =Çext));

188 
mm
->
vma
 = 0;

190 
	}
}

192 
	$åy_ªÀa£_k∫l_ªsour˚
(
pcb
 *
p
){

194 
	`put_fûes
(
p
->
fûes
);

195 
	`put_fs
(
p
->
fs
);

197 
p
->
fûes
 = 0;

198 
p
->
fs
 = 0;

200 
	}
}

205 
	$__ªÀa£_mm
(
mm
 *mm){

206 
±e
 * 
pgdú
; 
	`as£π
(
mm
 !
cuºít
->mm);

208 
pgdú
 = 
	`PGDIR_OF_MM
(
mm
);

209 
	`__‰ì_∑ge
(
pgdú
);

211 
mm
->
¸3
.
vÆue
 = 0;

212 
	`k‰ì2
(
mm
);

215 
	}
}

	@ramdisk.c

2 
	~"ømdisk.h
"

3 
	~"fs_˚Œ.h
"

4 
	~"mm.h
"

5 
	$ømdisk_öô
(
addr
){

6 
˚Œmbr
 = (*)(
RAMDISK_BASE
 + 
PAGE_OFFSET
);

7 
	`›rötf
("ømdisk inô:mbr:%x\¿u£ cñ»fûesy°em\n", 
˚Œmbr
);

8 
	}
}

10 
	$˚Œ_ªad
(*
fûe
, *
buf
){

11 
˚Œid
 = 
	`£¨ch_fûe
(
fûe
);

12 if(
˚Œid
 == -1)  0;

13 *
§c
 = 
˚Œmbr
 + (
˚Œid
*
CELL_SECTORS
 + 1) * 512;

14 
	`mem˝y
(
buf
, 
§c
, 1024);

16 
	}
}

	@schedule.c

1 
	~<scheduÀ.h
>

2 
	~<¥oc.h
>

3 
	~<utûs.h
>

4 
	~<löux/sched.h
>

5 
	~<löux/¥ötf.h
>

7 
	gticks
;

8 
pcb
 *
èsk0
;

10 
	gsched_b¨_tôÀ
[] = {'<', '<', 0};

11 
	gsched_b¨_body
[16];

14 
pcb
 *
	gli°_¶ìp
;

15 
pcb
 **
	gpcb_li°s
[3] = {&
li°_a˘ive
, &
li°_expúe
, &
li°_¶ìp
};

16 
	$a˘ive_¶ìp
(
pcb
 *
p
,
u32
 
msg_ty≥
,u32 
msg_böd
){

17 
IF
 = 
	`˛i_ex
();

19 
p
->
msg_ty≥
=msg_type;

20 
p
->
msg_böd
=msg_bind;

21 
	`LL_DEL
(
li°_a˘ive
,
p
);

22 
	`LL_I_INCRE
(
li°_¶ìp
,
p
,
¥io
);

24 if(
IF
Ë
	`°i
();

25 
	}
}

27 
	$a˘ive_expúe
(
pcb
 *
p
){

28 
IF
 = 
	`˛i_ex
();

30 
	`LL_DEL
(
li°_a˘ive
,
p
);

31 
	`LL_I_INCRE
(
li°_expúe
,
p
,
¥io
);

33 if(
IF
Ë
	`°i
();

34 
	}
}

36 
	$¶ìp_a˘ive
(
pcb
 *
p
){

37 
IF
 = 
	`˛i_ex
();

39 
	`LL_DEL
(
li°_¶ìp
,
p
);

40 
	`LL_I_INCRE
(
li°_a˘ive
,
p
,
¥io
);

42 
p
->
msg_ty≥
 = 0;

44 if(
IF
Ë
	`°i
();

45 
	}
}

47 
	$¶ìp_expúe
(
pcb
 *
p
){

48 
IF
 = 
	`˛i_ex
();

50 
	`LL_DEL
(
li°_¶ìp
,
p
);

51 
	`LL_I_INCRE
(
li°_expúe
,
p
,
¥io
);

52 
p
->
msg_ty≥
 = 0;

54 if(
IF
Ë
	`°i
();

55 
	}
}

56 
	$do_timî
(
±_ªgs
 *
¥egs
){

57 
tôÀ
[16] = { 148,' ', 0};

58 
b¨buf
[16];

60 
ticks
++;

61 if(
ticks
 % 100 == 0){

62 
	`•rötf
(
b¨buf
, "%u", 
ticks
/100);

63 
	`wrôe_b¨
(0, 0, 
tôÀ
, 
b¨buf
);

65 if(
ticks
 % 300 =0Ë
	`›rötf
("^");

68 
	`•rötf
(
sched_b¨_body
, " %*x %*s", 4, 
cuºít
->
time_¶i˚
, 8, cuºít->
p_«me
);

69 
	`wrôe_b¨
(0, 1, 
sched_b¨_tôÀ
, 
sched_b¨_body
);

71 if(
¥egs
->
cs
 & 3) {

72 
	`as£π
(
cuºít
->
time_¶i˚
 > 0);

73 if(--
cuºít
->
time_¶i˚
 == 0){

74 
	`a˘ive_expúe
(
cuºít
);

75 
cuºít
->
√ed_ªsched
 = 1;

80 
pcb
 *
cuº
=
li°_¶ìp
;

81 
cuº
){

83 
pcb
 *
√xt
 = 
cuº
->next;

84 if(
cuº
->
msg_ty≥
==
MSGTYPE_TIMER
){

85 
cuº
->
msg_böd
--;

87 if(
cuº
->
msg_böd
==0){

92 if(
cuº
->
time_¶i˚
){

93 
	`¶ìp_a˘ive
(
cuº
);

95 
cuºít
->
√ed_ªsched
 = 1;

97 
	`¶ìp_expúe
(
cuº
);

100 
cuº
 = 
√xt
;

103 
	}
}

109 
	$scheduÀ
(){

110 
IF
;

111 
IF
 = 
	`˛i_ex
();

114 
cuºít
->
√ed_ªsched
 = 0;

115 
pcb
 *
√xt
 = 0;

124 if(!
li°_a˘ive
 && 
li°_expúe
){

125 
pcb
*
p
=
li°_expúe
;

126 
p
){

127 
p
->
time_¶i˚
 =Ö->
time_¶i˚_fuŒ
;

128 
p
ı->
√xt
;

130 
	`EXCHG_PTR
(
li°_a˘ive
,
li°_expúe
);

132 
sched_b¨_tôÀ
[1] = sched_bar_title[0] ^= 2;

135 i‡(
li°_a˘ive
Ë
√xt
 =Üist_active;

136 
√xt
 = 
èsk0
;

138 if(
√xt
 =
cuºít
){

151 if(
√xt
->
mm
){

161 
g_tss
->
e•0
 = ()
√xt
 + 
THREAD_SIZE
;

164 
__asm__
 
	`__vﬁ©ûe__
("movl %0, %%cr3\n\t"

166 :"r"(
√xt
->
mm
->
¸3
.
vÆue
));

176 
__asm__
 
	`__vﬁ©ûe__
(

197 :"=m"(
cuºít
->
thªad
.
e•
),"=m"(cuºít->thªad.
eù
)

198 :"m"(
√xt
->
thªad
.
e•
), "m"“ext->thªad.
eù
),"b"(
cuºít
)

200 if(
IF
Ë
	`°i
();

204 
	}
}

207 
	$scheduÀ_timeout
(
m£c
){

208 
¶i˚
 = (
m£c
-1)/10 + 1;

209 
	`a˘ive_¶ìp
(
cuºít
, 
MSGTYPE_TIMER
, 
¶i˚
);

210 
	`scheduÀ
();

211  
¶i˚
;

212 
	}
}

217 
	$kp_¶ìp
(
u32
 
msg_ty≥
,u32 
msg_böd
){

219 
IF
 = 
	`˛i_ex
();

220 
	`a˘ive_¶ìp
(
cuºít
,
msg_ty≥
,
msg_böd
);

221 
	`scheduÀ
();

222 if(
IF
Ë
	`°i
();

223 
	}
}

225 
	$wake_up
(
li°_hód
 *
roŸ
){

226 
pcb
 *
tsk
;

227 
	`li°_f‹_óch_ß„
(
roŸ
, 
tsk
, 
¶ìp
){

228 
	`¶ìp_a˘ive
(
tsk
);

230 
	`INIT_LIST_HEAD
(
roŸ
);

231 
	}
}

236 
	$¶ìp_⁄
(
li°_hód
 *
roŸ
){

237 
	`li°_add
(&
cuºít
->
¶ìp
, 
roŸ
);

238 
	`kp_¶ìp
(0, 
MSGTYPE_DEEP
);

239 
	}
}

241 
	$kthªad_¶ìp
(
u32
 
msg_ty≥
, u32 
msg_böd
){

242 
	`a˘ive_¶ìp
(
cuºít
, 
msg_ty≥
, 
msg_böd
);

243 
__asm__
 
	`__vﬁ©ûe__
 ("int $0x81");

245 
	}
}

	@t.c

1 
	~"../debug/debug.h
"

2 
	~<as£π.h
>

3 
	~<°dio.h
>

4 
	sÊowî
{

5 
Êowî
 *
	m¥ev
, *
	m√xt
;

6 
Êowî
 *
	m_¥ev
, *
	m_√xt
;

7 
	mage
;

10 
	$ö£π
(
Êowî
 *
roŸ
, Êowî*
√w
){

11 
	}
}

14 
	gg_¨øy
[10] = {1, 2, 3, 4, 5, 6};

15 
	$foob¨
(){

16 
Øa
;

17 
i
 =0; i < 10; i++){

18 
a
 = 0x123;

19 
b
;

20 i‡(
a
 > 
b
)

21 
Øa
: 
	`¥ötf
("hñl‹ :%d\n", 
a
);

23 
	}
}

24 
	$îa£
(
v
[]){

25 
i
 = 0; i < 10; i++){

26 
v
[
i
] = 0;

28 
	}
}

29 
	$maö
(
¨gc
, *
¨gv
[], *
ívp
[]){

31 
x
 = 2;

32 
Øa
;

35 
j
 = 0x11; j < 100; j++){

36 
a
 = 0x456;

37 
	`¶ìp
(1);

38 
Øa
:

39 
	`¥ötf
("hñl‹ :%d\n", 
j
);

43 
	}
}

	@time.c

1 
	~<löux/timî.h
>

2 
	~<time.h
>

3 
	~<úq.h
>

4 
	~<löux/sched.h
>

5 
	~<löux/bh.h
>

6 
	gtime_bh
;

7 
	$timî_öãºu±
(
úq
, *
dev
, 
±_ªgs
 *
¥egs
){

9 
	`do_timî
(
¥egs
);

10 
	`m¨k_bh
(
time_bh
);

11 
	}
}

13 
	$time_bŸtomhÆf
(*
d©a
){

14 
	`my_timîli°_dida
();

16 
	}
}

17 
	$öô_time
(){

19 
	`ªque°_úq
(0, &
timî_öãºu±
, 
SA_INTERRUPT
, 0);

21 
úq_desc
[0].
°©us
 &~
IRQ_DISABLED
;

22 
time_bh
 = 
	`Æloc_bh
(
time_bŸtomhÆf
, 0);

23 
	`öô_mytimî
();

24 
	}
}

	@utils.asm

1 ;
the£
 
fun˘i⁄s
 
¨e
 
de˛¨ed
 
™d
 
	$commíãd
(
some
 
basic
 
ex∂™©i⁄
Ë
ö
 
utûs
.
h


2 %
ö˛ude
 "include/old/utils.inc"

3 
globÆ
 
ö_byã
,
out_byã
,
p‹t_ªad
,
p‹t_wrôe
,
dëe˘_˝u
,
ö_dw
,
out_dw
,
upd©e_eÊags
,
≠_öô
,
≠_öô_íd
, 
ªad_imr_of8259


4 
globÆ
 
__bt
, 
__bts
, 
__bå
, 
__bsc
, 
__bs0s


5 
˝u_°rög


6 
globÆ
 
öô8259A


7 
globÆ
 
öô8253


8 [
£˘i⁄
 .
ãxt
]

9 
dëe˘_˝u
:;
	`dëe˘_˝u
();

10 
mov
 
óx
,0

11 
˝uid


12 
mov
 [
˝u_°rög
],
ebx


13 
mov
 [
˝u_°rög
+4],
edx


14 
mov
 [
˝u_°rög
+8],
ecx


15 
ªt


18 
p‹t_ªad
:;
	`p‹t_ªad
(
p‹t
,*
buf
,
byã
);

19 
mov
 
edx
,[
e•
+4]

20 
mov
 
edi
,[
e•
+8]

21 
mov
 
ecx
,[
e•
+12]

22 
shr
 
ecx
,1

23 
˛d


24 
ªp
 
ösw


25 
ªt


26 
p‹t_wrôe
:;
	`p‹t_wrôe
(
p‹t
,*
buf
,
byã
);

27 
mov
 
edx
,[
e•
+4]

28 
mov
 
esi
,[
e•
+8]

29 
mov
 
ecx
,[
e•
+12]

30 
shr
 
ecx
,1

31 
˛d


32 
ªp
 
outsw


33 
ªt


35 
ö_byã
: ;
	$ö_byã
(
p‹t
)

36 
x‹
 
óx
,eax

37 
mov
 
dx
,[
e•
+4]

38 
ö
 
Æ
,
dx


39 
iodñay


40 
ªt


41 
ö_dw
: ;
u32
 
	$ö_dw
(
p‹t
)

42 
mov
 
dx
,[
e•
+4]

43 
ö
 
óx
,
dx


44 
ªt


45 
out_byã
:;
	$out_byã
(
p‹t
,
vÆue
)

46 
mov
 
dx
,[
e•
+4]

47 
mov
 
Æ
,[
e•
+8]

48 
out
 
dx
,
Æ


49 
ªt


50 
out_dw
: ;
	$out_dw
(
p‹t
,
u32
 
vÆue
)

51 
mov
 
dx
,[
e•
+4]

52 
mov
 
óx
,[
e•
+8]

53 
out
 
dx
,
óx


54 
ªt


55 ;
	`öô8259A
(
mask
);

56 
öô8259A
:

57 
mov
 
Æ
,11
h


58 
out
 20
h
,
Æ
 ;
£nd
 
icw1
 
to
 0x20 
¨g
 
mónög
:[
icw4
 
√eded
]

59 
iodñay
;
io_dñay
 
bñ⁄g
 
to
 
the
 
ßme
 
£gmít
,
so
 
ju°
 
ˇŒ
 
	$œbñ
(
«mñy
 
jmp
 
√¨
 
±r
 
œbñ
Ë
is
 
ok
.

60 
out
 0a0
h
,
Æ
 ;
£nd
 
icw1
 
to
 0xa0

61 
iodñay


63 
mov
 
Æ
,20
h


64 
out
 21
h
,
Æ
 ;
£nd
 
icw2
 
to
 0x21. 
¨g
 
mónög
:[
úq0
=0x20]

65 
iodñay


66 
mov
 
Æ
,28
h


67 
out
 0a1
h
,
Æ
 ;
£nd
 
icw2
 
to
 0xa1. 
¨g
 
mónög
:[
úq8
=0x28]

68 
iodñay


70 
mov
 
Æ
,4

71 
out
 21
h
,
Æ
 ;
£nd
 
icw3
 
to
 0x21 
¨g
 
mónög
:[
lök
 
¶ave
 
chù
 
©
 
ú2
]

72 
iodñay


73 
mov
 
Æ
,2

74 
out
 0a1
h
,
Æ
 ;
£nd
 
icw3
 
to
 0xa1 
¨g
 
mónög
:[
lök
 
ma°î
 
chù
 
‰om
 
ú2
]

75 
iodñay


77 
mov
 
Æ
,1

78 
out
 21
h
,
Æ
 ;
¨g
 
mónög
[80X86 
mod
,
n‹mÆ
 
EOI
]

79 
iodñay


80 
out
 0a1
h
,
Æ


81 
iodñay


82 ;
öôül
 
w‹d
 
p‹t
 
föished
..

84 ;
£nd
 
ocw1
,
£t
 
öãºu±
 
mash
 

85 
mov
 
Æ
,[
e•
+4];
ERR
 
by
 ,
Æl
 
úq
-
p‹t
 
was
 
masked


86 
out
 21
h
,
Æ


87 
iodñay


88 
mov
 
Æ
,10110011b; 
¨g
 
móög
:[
AT
 
h¨d
-
disk
 
úq
 
›í
]

89 
out
 0a1
h
,
Æ


90 
iodñay


91 
ªt


92 
ªad_imr_of8259
: ;
	`ªad_imr_of8259
();

93 
x‹
 
óx
,eax

94 
ö
 
Æ
, 0a1
h


95 
mov
 
ah
, 
Æ


96 
ö
 
Æ
, 21
h


97 
ªt


99 
öô8253
:

100 
mov
 
Æ
,0x34

101 
out
 0x43,
Æ


103 
mov
 
ax
,[
e•
+4]

104 
out
 0x40,
Æ


105 
mov
 
Æ
,
ah


106 
out
 0x40,
Æ


107 
ªt


110 ;;;;;;;;;;;;;;;;;;;;; 
	`__bt
(*
ba£
, 
m
);

111 
__bt
:

112 
mov
 
edx
, [
e•
 + 4] ;
óx
 = 
ba£


113 
mov
 
ecx
, [
e•
 + 8] ;
ebx
 = 
m


114 
x‹
 
óx
,Éax

115 
bt
 [
edx
], 
ecx


116 
adc
 
óx
, 0

117 
ªt


119 ;;;;;;;;;;;;;;;;;;;; 
	`__bts
(*
ba£
, 
m
);

120 
__bts
:

121 
mov
 
edx
, [
e•
 + 4] ;
óx
 = 
ba£


122 
mov
 
ecx
, [
e•
 + 8] ;
ebx
 = 
m


123 
x‹
 
óx
,Éax

124 
bts
 [
edx
], 
ecx


125 
adc
 
óx
, 0

126 
ªt


128 ;;;;;;;;;;;;;;;;;;;; 
	`__bå
(*
ba£
, 
m
); @
DESC
 
bô
 
ã°
 
™d
 
ª£t


129 
__bå
:

130 
mov
 
edx
, [
e•
 + 4] ;
óx
 = 
ba£


131 
mov
 
ecx
, [
e•
 + 8] ;
ebx
 = 
m


132 
x‹
 
óx
,Éax

133 
bå
 [
edx
], 
ecx


134 
adc
 
óx
, 0

135 
ªt


137 ;;;;;;;;;;;;;;;;;; 
	`__bsc
(*
addr
); @
DESC
 
bô
 
sˇn
 
™d
 
ª£t


138 
__b§
:

139 
mov
 
edx
, [
e•
 + 4] ;edx = 
addr


140 
mov
 
óx
, [
edx
] ;óx = *
addr
, 
«mñy
 
bô
 
ödex


141 
bsf
 
óx
,Éax

142 
jz
 .
zîo


143 
bå
 [
edx
], 
óx


144 
ªt


145 .
zîo
:

146 
mov
 
óx
, -1

147 
ªt


148 
__bs0s
:

149 
mov
 
edx
, [
e•
 + 4] ;edx = 
addr


150 
mov
 
óx
, [
edx
] ;óx = *
addr
, 
«mñy
 
bô
 
ödex


151 
nŸ
 
óx
 ;eax = ~eax

152 
bsf
 
óx
,Éax

153 
jz
 .
zîo


154 
bts
 [
edx
], 
óx


155 
ªt


156 .
zîo
:

157 
mov
 
óx
, -1

158 
ªt


	@utils.c

1 
	~<utûs.h
>

2 
	~<¥oc.h
>

3 
	~<di•.h
>

4 
	~<löux/byã‹dî/gíîic.h
>

5 
	~<löux/¥ötf.h
>

6 
	$dump_sys
(){

7 
	}
}

9 *
	$MAKE_IP_STR
(
u32
 
ù
){

11 
	}
}

13 
	$•ö
(*
msg
){

14 
__asm__
 
	`__vﬁ©ûe__
 ("cli");

15 
	`›rötf
("%s",
msg
);

17 
	}
}

18 
	$as£π_func
(*
exp
,*
fûe
,*
ba£_fûe
,
löe
){

20 
	`˛i
();

21 
	`›rötf
("as£π faûuª>>>exp:%s,fûe:%s,ba£_fûe:%s,löe:%u\n",
exp
,
fûe
,
ba£_fûe
,
löe
);

23 
	}
}

26 
	$bô1_cou¡
(*
addr
,
byãs
){

27 
cou¡
=0;

28 
off£t
=0;off£t<
byãs
;offset++){

30 
x
=0;x<8;x++){

32 if(((1<<
x
)&
addr
[
off£t
])!=0){

33 
cou¡
++;

37  
cou¡
;

38 
	}
}

41 
	$mem˝y
(* 
de°
,*
§c
,
byãs
){

42 
i
=0;i<
byãs
;i++){

43 ((*)
de°
)[
i
] = ((*)
§c
)[i];

45 
	}
}

48 
	$memcmp
(*
_s1
, *
_s2
, 
Àn
){

49 *
s1
 = 
_s1
;

50 *
s2
 = 
_s2
;

51 
i
 = 0; i < 
Àn
; i++){

52 if(
s1
[
i
] =
s2
[i]) ;

56 
	}
}

61 
	$memã°
(*
°¨t
, 
Àn
){

62 
n
 = 
Àn
 / 4;

63 
l
 = 
Àn
 % 4;

64 
i
;

65 
i
 = 0; i < 
n
; i++){

66 if(((*)
°¨t
)[
i
] !0Ë
	`•ö
("memtest failed");

68 
i
 = 0; i < 
l
; i++){

69 if(((*)
°¨t
)[
i
] !0Ë
	`•ö
("memtest failed");

71 
	}
}

75 
	#LPJ
 0x242000

	)

76 
	#HZ
 100

	)

77 
	gx_udñay
;

78 
	$udñay
(
u£cs
)

80 
i
 = 0; i < 
u£cs
; i++){

81 
j
 = 0; j < 0x10000; j++){

82 
__asm__
 
	`__vﬁ©ûe__
("add %1, %1\n\t"

84 : "=m"(
x_udñay
)

88 
	}
}

92 
u16
 
	$¸c16_compuã_be
(*
¨ó
, 
Àn
){

93 
u16
 *
_¨ó
 = 
¨ó
;

94 
u32
 
sum
 = 0;

95 
i
 = 0; i < 
Àn
/2; i++){

97 
u16
 
fõld
 = 
	`¡ohs
(
_¨ó
[
i
]);

98 
sum
 +
fõld
;

101 °ru˘{ 
u16
 
ax
, 
ˇºy
; } *
óx
 = (*)&
sum
;

102 
óx
->
ˇºy
){

103 
sum
 = 
óx
->
ax
 +Éax->
ˇºy
;

106  
sum
;

107 
	}
}

109 
	g__Àss_go
 = 1;

110 
	$__Àss
(*
buf
, 
Àn
){

111 *
°r
 = 
buf
;

112 
¥es¢um
 = 80*12;

113 
i
 = 0; i < 
Àn
; i +
¥es¢um
){

114 
À·
 = 
Àn
 - 
i
;

115 
	`›rötf
(" %*†", 
¥es¢um
 < 
À·
 ?Öªs¢um :Üe·, 
°r
 + 
i
);

116 
__Àss_go
 = 
Ál£
;

117 !
__Àss_go
);

119 
	}
}

121 
	gù°r_buf
[128];

122 *
	gù°r
 = 
ù°r_buf
;

123 * 
	$mk_ù°r
(
u32
 
ù
){

124 *
ªsu…
 = 
ù°r
;

125 
__óx
 *
óx
 = (*)&
ù
;

126 
Àn
 = 
	`•rötf
(
ù°r
, "%u.%u.%u.%u", 
óx
->
AH
,Éax->
AL
,Éax->
ah
,Éax->
Æ
);

127 
ù°r
[
Àn
] = 0;

128 
ù°r
 +
Àn
 + 2;

129 if(
ù°r
 - 
ù°r_buf
 > 110) ipstr = ipstr_buf;

130  
ªsu…
;

131 
	}
}

	@video_drv.c

5 
	~<video_drv.h
>

6 
	~<utûs.h
>

7 
	~<vÆTy≥.h
>

10 
	$£t_curs‹
(
pos
){

11 
	`out_byã
(
CRTC_ADDR_REG
,
CURSOR_L
);

12 
	`out_byã
(
CRTC_DATA_REG
,
pos
&0xff);

13 
	`out_byã
(
CRTC_ADDR_REG
,
CURSOR_H
);

14 
	`out_byã
(
CRTC_DATA_REG
,
pos
>>8);

15 
	}
}

18 
	$£t_°¨t
(
u32
 
pos
){

19 
	`out_byã
(
CRTC_ADDR_REG
,
START_ADDR_L
);

20 
	`out_byã
(
CRTC_DATA_REG
,
pos
&0xff);

21 
	`out_byã
(
CRTC_ADDR_REG
,
START_ADDR_H
);

22 
	`out_byã
(
CRTC_DATA_REG
,
pos
>>8);

23 
	}
}

26 
	$gë_°¨t
(){

27 
pos
=0;

28 
	`out_byã
(
CRTC_ADDR_REG
,
START_ADDR_L
);

29 
pos
+=
	`ö_byã
(
CRTC_DATA_REG
);

30 
	`out_byã
(
CRTC_ADDR_REG
,
START_ADDR_H
);

31 
pos
+=
	`ö_byã
(
CRTC_DATA_REG
)<<8;

32  
pos
;

33 
	}
}

	@../debug/debug.h

1 #i‚de‡
X86_DEBUG_H


2 
	#X86_DEBUG_H


	)

4 #¥agm®
∑ck
(
push
)

5 #¥agm®
∑ck
(1)

6 
	udr_˘æ
{

7 
	mvÆue
;

9 
	mL0
: 1;

10 
	mG0
: 1;

11 
	mL1
: 1;

12 
	mG1
: 1;

13 
	mL2
: 1;

14 
	mG2
: 1;

15 
	mL3
: 1;

16 
	mG3
: 1;

20 
	mRWE0
: 2;

21 
	mLEN0
: 2;

22 
	mRWE1
: 2;

23 
	mLEN1
: 2;

24 
	mRWE2
: 2;

25 
	mLEN2
: 2;

26 
	mRWE3
: 2;

27 
	mLEN3
: 2;

31 
	#RWE_EXEC
 0

	)

32 
	#RWE_W_ONLY
 1

	)

33 
	#RWE_WR
 3

	)

35 
	#BRK_ADDR_ALIGN_1
 0

	)

36 
	#BRK_ADDR_ALIGN_2
 1

	)

37 
	#BRK_ADDR_ALIGN_4
 3

	)

39 #¥agm®
∑ck
(
p›
)

	@
1
.
0
152
2795
arch/x86/include/asm/bit.h
arch/x86/include/asm/errno.h
arch/x86/include/asm/io.h
arch/x86/include/asm/page.h
arch/x86/kernel/process.c
arch/x86/kernel/sys_i386.c
arch/x86/mm/fault.c
arch/x86/mm/ioremap.c
block/buffer.cn
block/ll_rw_blk.c
boot.asm
bootinfo.asm
drivers/ide/ide.c
drivers/net/8139.c
drivers/net/e1000.c
drivers/pci/pci.c
drivers/pci/pci_vendor.c
elf.c
fs/binfmt_elf.c
fs/cell/cell.c
fs/cell/namei.c
fs/dcache.c
fs/exec.c
fs/inode.c
fs/namei.c
fs/open.c
fs/pipe.cn
fs/read_write.c
fs/super.c
fs_cell.c
func_table.c
garbage.c
i8259.c
include/asm-generic/errno-base.h
include/asm-generic/errno.h
include/asm-generic/fcntl.h
include/asm-generic/io.h
include/asm/resource.h
include/linux/NR_syscall.h
include/linux/arp.h
include/linux/assert.h
include/linux/bh.h
include/linux/binfmts.h
include/linux/blkdev.h
include/linux/buffer_head.h
include/linux/byteorder/generic.h
include/linux/cell.h
include/linux/cell_common.h
include/linux/ctype.h
include/linux/dcache.h
include/linux/errno.h
include/linux/fs.h
include/linux/fs_struct.h
include/linux/icmp.h
include/linux/ide.h
include/linux/if_ether.h
include/linux/ip.h
include/linux/kit.h
include/linux/mm.h
include/linux/mount.h
include/linux/mylist.h
include/linux/netdevice.h
include/linux/pci.h
include/linux/pci_ids.h
include/linux/pci_regs.h
include/linux/pci_vendor.h
include/linux/pci_vendor_full.h
include/linux/pipe.h
include/linux/printf.h
include/linux/resource.h
include/linux/sched.h
include/linux/skbuff.h
include/linux/slab.h
include/linux/string.h
include/linux/timer.h
include/linux/udp.h
include/linux/wait.h
include/net/arp.h
include/net/icmp.h
include/net/ip.h
include/net/tcp.h
include/net/udp.h
include/old/asm_lable.h
include/old/atomic.h
include/old/blk.h
include/old/bootinfo.h
include/old/disp.h
include/old/elf.h
include/old/fork.h
include/old/fs.h
include/old/fs_cell.h
include/old/fs_ext.h
include/old/func_table.h
include/old/hd.h
include/old/hd_drv.h
include/old/heap.h
include/old/hs.h
include/old/i8259.h
include/old/irq.h
include/old/kbd_drv.h
include/old/ku_mm.h
include/old/ku_proc.h
include/old/ku_utils.h
include/old/list.h
include/old/mm.h
include/old/mmzone.h
include/old/ntfs.h
include/old/pmm.h
include/old/proc.h
include/old/ramdisk.h
include/old/schedule.h
include/old/struinfo.h
include/old/time.h
include/old/tty.h
include/old/utils.h
include/old/valType.h
include/old/video_drv.h
irq.c
kernel.asm
kernel.c
kernel/bh.c
kernel/exit.c
kernel/fork.c
kernel/timer.c
ku_utils.c
lib/printf.c
lib/string.c
lib/vsprintf.c
mm.c
mm/memory.c
mm/mmap.c
mm/slab.c
mmzone.c
net/core/dev.c
net/core/skbuff.c
net/core/testnet.c
net/ipv4/arp.c
net/ipv4/icmp.c
net/ipv4/ip.c
net/ipv4/tcp.cn
net/ipv4/udp.c
pmm.c
proc.asm
proc.c
ramdisk.c
schedule.c
t.c
time.c
utils.asm
utils.c
video_drv.c
../debug/debug.h
