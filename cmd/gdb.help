*
 gdb的printf也是行缓冲的 !

set disassembly-flavor intel

set arch i386 /  i8086

br *0x7c00 if $ax > 256

x/2i $pc				反汇编接下来两条指令

info proc map



watch
1, watch -l 总是不行
2, watch (int *)*xxxx 似乎跟 *xxxx 不一样?
3, set can-use-hw-watchpoints 0
   对gdb-stub确实有效果
   不然，一直是
	Could not insert hardware breakpoints:
	You may have requested too many hardware breakpoints/watchpoints.
	但是很慢。
4,  我想起来bochs的watch是很快的。

有两种方式来使用这个脚本：
1）启动gdb时候
gdb在启动的时候，会在当前目录下查找".gdbinit"这个文件，并把它的内容作为gdb命令进行解释，所以如果我把脚本命名为".gdbinit"，这样在启动的时候就会处理这些命令。
2）gdb运行期间
可以使用 source script-file 来解释gdb命令脚本script-file

*
add-auto-load-safe-path /home/wws/lab/yanqi/cmd/.gdbinit

*
add-symbol-file xx.so address
这有儿像3D建模里的贴图．因为.so被加载到内存的地址不稳定，
所以gdb手里光有调试信息（符号表）是不够的．
它还要知道这个文件被加载到哪儿，它才能把你要的＂行断点/符号断点"
转化成"地址断点"．
这个address是 LOAD_BASE + [.text].sh_addr
这样操作：
1, gdb 里输入info proc map
   找到xx.so的加载地址LOAD_BASE

2, readelf -S xx.so
   找到xx.so的.text段的Addr.

3, 口算出address. 
   address = LOAD_BASE + Addr

4, 输入add-symbol-file xx.so address





